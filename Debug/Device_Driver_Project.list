
Device_Driver_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005148  08005148  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005148  08005148  00006148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005150  08005150  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005154  08005154  00006154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005158  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  080051b4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080051b4  000072f8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018417  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a7  00000000  00000000  0001f4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d4e1  00000000  00000000  00021c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0002f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a06d  00000000  00000000  00030ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b3a  00000000  00000000  0005af0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ecf7  00000000  00000000  00073a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018273e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003120  00000000  00000000  00182784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  001858a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000005c 	.word	0x2000005c
 8000210:	00000000 	.word	0x00000000
 8000214:	08004f08 	.word	0x08004f08

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000060 	.word	0x20000060
 8000230:	08004f08 	.word	0x08004f08

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000254:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000258:	f000 b9b0 	b.w	80005bc <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800027a:	4688      	mov	r8, r1
 800027c:	4604      	mov	r4, r0
 800027e:	468e      	mov	lr, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14a      	bne.n	800031a <__udivmoddi4+0xa6>
 8000284:	428a      	cmp	r2, r1
 8000286:	4617      	mov	r7, r2
 8000288:	d95f      	bls.n	800034a <__udivmoddi4+0xd6>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	b14e      	cbz	r6, 80002a4 <__udivmoddi4+0x30>
 8000290:	f1c6 0320 	rsb	r3, r6, #32
 8000294:	fa01 fe06 	lsl.w	lr, r1, r6
 8000298:	40b7      	lsls	r7, r6
 800029a:	40b4      	lsls	r4, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a8:	fa1f fc87 	uxth.w	ip, r7
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fbbe f1f8 	udiv	r1, lr, r8
 80002b2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002be:	429a      	cmp	r2, r3
 80002c0:	d907      	bls.n	80002d2 <__udivmoddi4+0x5e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x5c>
 80002ca:	429a      	cmp	r2, r3
 80002cc:	f200 8154 	bhi.w	8000578 <__udivmoddi4+0x304>
 80002d0:	4601      	mov	r1, r0
 80002d2:	1a9b      	subs	r3, r3, r2
 80002d4:	b2a2      	uxth	r2, r4
 80002d6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002da:	fb08 3310 	mls	r3, r8, r0, r3
 80002de:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d90b      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002ea:	18ba      	adds	r2, r7, r2
 80002ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80002f0:	bf2c      	ite	cs
 80002f2:	2401      	movcs	r4, #1
 80002f4:	2400      	movcc	r4, #0
 80002f6:	4594      	cmp	ip, r2
 80002f8:	d902      	bls.n	8000300 <__udivmoddi4+0x8c>
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	f000 813f 	beq.w	800057e <__udivmoddi4+0x30a>
 8000300:	4618      	mov	r0, r3
 8000302:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000306:	eba2 020c 	sub.w	r2, r2, ip
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa2>
 800030e:	40f2      	lsrs	r2, r6
 8000310:	2300      	movs	r3, #0
 8000312:	e9c5 2300 	strd	r2, r3, [r5]
 8000316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xb6>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb0>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa2>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d14e      	bne.n	80003d0 <__udivmoddi4+0x15c>
 8000332:	4543      	cmp	r3, r8
 8000334:	f0c0 8112 	bcc.w	800055c <__udivmoddi4+0x2e8>
 8000338:	4282      	cmp	r2, r0
 800033a:	f240 810f 	bls.w	800055c <__udivmoddi4+0x2e8>
 800033e:	4608      	mov	r0, r1
 8000340:	2d00      	cmp	r5, #0
 8000342:	d0e8      	beq.n	8000316 <__udivmoddi4+0xa2>
 8000344:	e9c5 4e00 	strd	r4, lr, [r5]
 8000348:	e7e5      	b.n	8000316 <__udivmoddi4+0xa2>
 800034a:	2a00      	cmp	r2, #0
 800034c:	f000 80ac 	beq.w	80004a8 <__udivmoddi4+0x234>
 8000350:	fab2 f682 	clz	r6, r2
 8000354:	2e00      	cmp	r6, #0
 8000356:	f040 80bb 	bne.w	80004d0 <__udivmoddi4+0x25c>
 800035a:	1a8b      	subs	r3, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b2bc      	uxth	r4, r7
 8000362:	2101      	movs	r1, #1
 8000364:	0c02      	lsrs	r2, r0, #16
 8000366:	b280      	uxth	r0, r0
 8000368:	fbb3 fcfe 	udiv	ip, r3, lr
 800036c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000370:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000374:	fb04 f20c 	mul.w	r2, r4, ip
 8000378:	429a      	cmp	r2, r3
 800037a:	d90e      	bls.n	800039a <__udivmoddi4+0x126>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	429a      	cmp	r2, r3
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80ec 	beq.w	8000570 <__udivmoddi4+0x2fc>
 8000398:	46c4      	mov	ip, r8
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	fbb3 f8fe 	udiv	r8, r3, lr
 80003a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003a4:	fb04 f408 	mul.w	r4, r4, r8
 80003a8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x154>
 80003b0:	18ba      	adds	r2, r7, r2
 80003b2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	2001      	movcs	r0, #1
 80003ba:	2000      	movcc	r0, #0
 80003bc:	4294      	cmp	r4, r2
 80003be:	d902      	bls.n	80003c6 <__udivmoddi4+0x152>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	f000 80d1 	beq.w	8000568 <__udivmoddi4+0x2f4>
 80003c6:	4698      	mov	r8, r3
 80003c8:	1b12      	subs	r2, r2, r4
 80003ca:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003ce:	e79d      	b.n	800030c <__udivmoddi4+0x98>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa08 f401 	lsl.w	r4, r8, r1
 80003da:	fa00 f901 	lsl.w	r9, r0, r1
 80003de:	fa22 f706 	lsr.w	r7, r2, r6
 80003e2:	fa28 f806 	lsr.w	r8, r8, r6
 80003e6:	408a      	lsls	r2, r1
 80003e8:	431f      	orrs	r7, r3
 80003ea:	fa20 f306 	lsr.w	r3, r0, r6
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	4323      	orrs	r3, r4
 80003f2:	fa1f fc87 	uxth.w	ip, r7
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	fbb8 fef0 	udiv	lr, r8, r0
 80003fc:	fb00 881e 	mls	r8, r0, lr, r8
 8000400:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000404:	fb0e f80c 	mul.w	r8, lr, ip
 8000408:	45a0      	cmp	r8, r4
 800040a:	d90e      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	45a0      	cmp	r8, r4
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 80b8 	beq.w	8000598 <__udivmoddi4+0x324>
 8000428:	46d6      	mov	lr, sl
 800042a:	eba4 0408 	sub.w	r4, r4, r8
 800042e:	fa1f f883 	uxth.w	r8, r3
 8000432:	fbb4 f3f0 	udiv	r3, r4, r0
 8000436:	fb00 4413 	mls	r4, r0, r3, r4
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000442:	45a4      	cmp	ip, r4
 8000444:	d90e      	bls.n	8000464 <__udivmoddi4+0x1f0>
 8000446:	193c      	adds	r4, r7, r4
 8000448:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800044c:	bf2c      	ite	cs
 800044e:	f04f 0801 	movcs.w	r8, #1
 8000452:	f04f 0800 	movcc.w	r8, #0
 8000456:	45a4      	cmp	ip, r4
 8000458:	d903      	bls.n	8000462 <__udivmoddi4+0x1ee>
 800045a:	f1b8 0f00 	cmp.w	r8, #0
 800045e:	f000 809f 	beq.w	80005a0 <__udivmoddi4+0x32c>
 8000462:	4603      	mov	r3, r0
 8000464:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000468:	eba4 040c 	sub.w	r4, r4, ip
 800046c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000470:	4564      	cmp	r4, ip
 8000472:	4673      	mov	r3, lr
 8000474:	46e0      	mov	r8, ip
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0x20a>
 8000478:	d107      	bne.n	800048a <__udivmoddi4+0x216>
 800047a:	45f1      	cmp	r9, lr
 800047c:	d205      	bcs.n	800048a <__udivmoddi4+0x216>
 800047e:	ebbe 0302 	subs.w	r3, lr, r2
 8000482:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000486:	3801      	subs	r0, #1
 8000488:	46e0      	mov	r8, ip
 800048a:	b15d      	cbz	r5, 80004a4 <__udivmoddi4+0x230>
 800048c:	ebb9 0203 	subs.w	r2, r9, r3
 8000490:	eb64 0408 	sbc.w	r4, r4, r8
 8000494:	fa04 f606 	lsl.w	r6, r4, r6
 8000498:	fa22 f301 	lsr.w	r3, r2, r1
 800049c:	40cc      	lsrs	r4, r1
 800049e:	431e      	orrs	r6, r3
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e736      	b.n	8000316 <__udivmoddi4+0xa2>
 80004a8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004ac:	0c01      	lsrs	r1, r0, #16
 80004ae:	4614      	mov	r4, r2
 80004b0:	b280      	uxth	r0, r0
 80004b2:	4696      	mov	lr, r2
 80004b4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004b8:	2620      	movs	r6, #32
 80004ba:	4690      	mov	r8, r2
 80004bc:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004c0:	4610      	mov	r0, r2
 80004c2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004c6:	eba3 0308 	sub.w	r3, r3, r8
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	e74b      	b.n	8000368 <__udivmoddi4+0xf4>
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	f1c6 0320 	rsb	r3, r6, #32
 80004d6:	fa01 f206 	lsl.w	r2, r1, r6
 80004da:	fa21 f803 	lsr.w	r8, r1, r3
 80004de:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e2:	fa20 f303 	lsr.w	r3, r0, r3
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	40b0      	lsls	r0, r6
 80004ea:	4313      	orrs	r3, r2
 80004ec:	0c02      	lsrs	r2, r0, #16
 80004ee:	0c19      	lsrs	r1, r3, #16
 80004f0:	b280      	uxth	r0, r0
 80004f2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004f6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004fa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	4588      	cmp	r8, r1
 8000504:	d951      	bls.n	80005aa <__udivmoddi4+0x336>
 8000506:	1879      	adds	r1, r7, r1
 8000508:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0a01 	movcs.w	sl, #1
 8000512:	f04f 0a00 	movcc.w	sl, #0
 8000516:	4588      	cmp	r8, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x2ac>
 800051a:	f1ba 0f00 	cmp.w	sl, #0
 800051e:	d031      	beq.n	8000584 <__udivmoddi4+0x310>
 8000520:	eba1 0108 	sub.w	r1, r1, r8
 8000524:	fbb1 f9fe 	udiv	r9, r1, lr
 8000528:	fb09 f804 	mul.w	r8, r9, r4
 800052c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000530:	b29b      	uxth	r3, r3
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	4543      	cmp	r3, r8
 8000538:	d235      	bcs.n	80005a6 <__udivmoddi4+0x332>
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4543      	cmp	r3, r8
 800054c:	d2bb      	bcs.n	80004c6 <__udivmoddi4+0x252>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d1b8      	bne.n	80004c6 <__udivmoddi4+0x252>
 8000554:	f1a9 0102 	sub.w	r1, r9, #2
 8000558:	443b      	add	r3, r7
 800055a:	e7b4      	b.n	80004c6 <__udivmoddi4+0x252>
 800055c:	1a84      	subs	r4, r0, r2
 800055e:	eb68 0203 	sbc.w	r2, r8, r3
 8000562:	2001      	movs	r0, #1
 8000564:	4696      	mov	lr, r2
 8000566:	e6eb      	b.n	8000340 <__udivmoddi4+0xcc>
 8000568:	443a      	add	r2, r7
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	e72b      	b.n	80003c8 <__udivmoddi4+0x154>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	443b      	add	r3, r7
 8000576:	e710      	b.n	800039a <__udivmoddi4+0x126>
 8000578:	3902      	subs	r1, #2
 800057a:	443b      	add	r3, r7
 800057c:	e6a9      	b.n	80002d2 <__udivmoddi4+0x5e>
 800057e:	443a      	add	r2, r7
 8000580:	3802      	subs	r0, #2
 8000582:	e6be      	b.n	8000302 <__udivmoddi4+0x8e>
 8000584:	eba7 0808 	sub.w	r8, r7, r8
 8000588:	f1a9 0c02 	sub.w	ip, r9, #2
 800058c:	4441      	add	r1, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c9      	b.n	800052c <__udivmoddi4+0x2b8>
 8000598:	f1ae 0e02 	sub.w	lr, lr, #2
 800059c:	443c      	add	r4, r7
 800059e:	e744      	b.n	800042a <__udivmoddi4+0x1b6>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e75e      	b.n	8000464 <__udivmoddi4+0x1f0>
 80005a6:	4649      	mov	r1, r9
 80005a8:	e78d      	b.n	80004c6 <__udivmoddi4+0x252>
 80005aa:	eba1 0108 	sub.w	r1, r1, r8
 80005ae:	46cc      	mov	ip, r9
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7b8      	b.n	800052c <__udivmoddi4+0x2b8>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2400      	movs	r4, #0
 80005c6:	9403      	str	r4, [sp, #12]
 80005c8:	9404      	str	r4, [sp, #16]
 80005ca:	9405      	str	r4, [sp, #20]
 80005cc:	9406      	str	r4, [sp, #24]
 80005ce:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	4b17      	ldr	r3, [pc, #92]	@ (8000630 <MX_GPIO_Init+0x70>)
 80005d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d4:	f042 0204 	orr.w	r2, r2, #4
 80005d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005dc:	f002 0204 	and.w	r2, r2, #4
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005e6:	f042 0201 	orr.w	r2, r2, #1
 80005ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005ee:	f002 0201 	and.w	r2, r2, #1
 80005f2:	9201      	str	r2, [sp, #4]
 80005f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005f8:	f042 0220 	orr.w	r2, r2, #32
 80005fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8000608:	4d0a      	ldr	r5, [pc, #40]	@ (8000634 <MX_GPIO_Init+0x74>)
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000610:	4628      	mov	r0, r5
 8000612:	f000 fd97 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000616:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800061a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000624:	a903      	add	r1, sp, #12
 8000626:	4628      	mov	r0, r5
 8000628:	f000 fca8 	bl	8000f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800062c:	b009      	add	sp, #36	@ 0x24
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	42021400 	.word	0x42021400

08000638 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if((huart ->Instance) == huart4.Instance) {
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <HAL_UART_RxCpltCallback+0x14>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d000      	beq.n	8000644 <HAL_UART_RxCpltCallback+0xc>
		response_received = true;
	}
}
 8000642:	4770      	bx	lr
		response_received = true;
 8000644:	4b02      	ldr	r3, [pc, #8]	@ (8000650 <HAL_UART_RxCpltCallback+0x18>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	e7fa      	b.n	8000642 <HAL_UART_RxCpltCallback+0xa>
 800064c:	2000007c 	.word	0x2000007c
 8000650:	20000078 	.word	0x20000078

08000654 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000656:	e7fe      	b.n	8000656 <Error_Handler+0x2>

08000658 <MX_UART4_Init>:
{
 8000658:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800065a:	4815      	ldr	r0, [pc, #84]	@ (80006b0 <MX_UART4_Init+0x58>)
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_UART4_Init+0x5c>)
 800065e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000660:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000664:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	2300      	movs	r3, #0
 8000668:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800066a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800066c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800066e:	220c      	movs	r2, #12
 8000670:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000678:	6243      	str	r3, [r0, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800067c:	f003 fd80 	bl	8004180 <HAL_UART_Init>
 8000680:	b970      	cbnz	r0, 80006a0 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <MX_UART4_Init+0x58>)
 8000686:	f003 febb 	bl	8004400 <HAL_UARTEx_SetTxFifoThreshold>
 800068a:	b958      	cbnz	r0, 80006a4 <MX_UART4_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <MX_UART4_Init+0x58>)
 8000690:	f003 fedb 	bl	800444a <HAL_UARTEx_SetRxFifoThreshold>
 8000694:	b940      	cbnz	r0, 80006a8 <MX_UART4_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_UART4_Init+0x58>)
 8000698:	f003 fe93 	bl	80043c2 <HAL_UARTEx_DisableFifoMode>
 800069c:	b930      	cbnz	r0, 80006ac <MX_UART4_Init+0x54>
}
 800069e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006a0:	f7ff ffd8 	bl	8000654 <Error_Handler>
    Error_Handler();
 80006a4:	f7ff ffd6 	bl	8000654 <Error_Handler>
    Error_Handler();
 80006a8:	f7ff ffd4 	bl	8000654 <Error_Handler>
    Error_Handler();
 80006ac:	f7ff ffd2 	bl	8000654 <Error_Handler>
 80006b0:	2000007c 	.word	0x2000007c
 80006b4:	40004c00 	.word	0x40004c00

080006b8 <MX_TIM5_Init>:
{
 80006b8:	b500      	push	{lr}
 80006ba:	b091      	sub	sp, #68	@ 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006bc:	2300      	movs	r3, #0
 80006be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80006c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80006c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80006c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80006c6:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	9308      	str	r3, [sp, #32]
 80006ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80006cc:	930a      	str	r3, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9302      	str	r3, [sp, #8]
 80006d2:	9303      	str	r3, [sp, #12]
 80006d4:	9304      	str	r3, [sp, #16]
 80006d6:	9305      	str	r3, [sp, #20]
 80006d8:	9306      	str	r3, [sp, #24]
 80006da:	9307      	str	r3, [sp, #28]
  htim5.Instance = TIM5;
 80006dc:	4824      	ldr	r0, [pc, #144]	@ (8000770 <MX_TIM5_Init+0xb8>)
 80006de:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <MX_TIM5_Init+0xbc>)
 80006e0:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 4000-1;
 80006e2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80006e6:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1000-1;
 80006ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ee:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f0:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80006f6:	f002 f965 	bl	80029c4 <HAL_TIM_Base_Init>
 80006fa:	bb68      	cbnz	r0, 8000758 <MX_TIM5_Init+0xa0>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80006fc:	481c      	ldr	r0, [pc, #112]	@ (8000770 <MX_TIM5_Init+0xb8>)
 80006fe:	f002 f9c1 	bl	8002a84 <HAL_TIM_PWM_Init>
 8000702:	bb58      	cbnz	r0, 800075c <MX_TIM5_Init+0xa4>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8000704:	2108      	movs	r1, #8
 8000706:	481a      	ldr	r0, [pc, #104]	@ (8000770 <MX_TIM5_Init+0xb8>)
 8000708:	f002 f9ec 	bl	8002ae4 <HAL_TIM_OnePulse_Init>
 800070c:	bb40      	cbnz	r0, 8000760 <MX_TIM5_Init+0xa8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800070e:	2306      	movs	r3, #6
 8000710:	930b      	str	r3, [sp, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000712:	2300      	movs	r3, #0
 8000714:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000716:	a90b      	add	r1, sp, #44	@ 0x2c
 8000718:	4815      	ldr	r0, [pc, #84]	@ (8000770 <MX_TIM5_Init+0xb8>)
 800071a:	f002 fc1f 	bl	8002f5c <HAL_TIM_SlaveConfigSynchro>
 800071e:	bb08      	cbnz	r0, 8000764 <MX_TIM5_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000726:	a908      	add	r1, sp, #32
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_TIM5_Init+0xb8>)
 800072a:	f002 fd03 	bl	8003134 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	b9d8      	cbnz	r0, 8000768 <MX_TIM5_Init+0xb0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000730:	2360      	movs	r3, #96	@ 0x60
 8000732:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8000734:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000738:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073e:	2200      	movs	r2, #0
 8000740:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000742:	a901      	add	r1, sp, #4
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <MX_TIM5_Init+0xb8>)
 8000746:	f002 fa7e 	bl	8002c46 <HAL_TIM_PWM_ConfigChannel>
 800074a:	b978      	cbnz	r0, 800076c <MX_TIM5_Init+0xb4>
  HAL_TIM_MspPostInit(&htim5);
 800074c:	4808      	ldr	r0, [pc, #32]	@ (8000770 <MX_TIM5_Init+0xb8>)
 800074e:	f000 f975 	bl	8000a3c <HAL_TIM_MspPostInit>
}
 8000752:	b011      	add	sp, #68	@ 0x44
 8000754:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000758:	f7ff ff7c 	bl	8000654 <Error_Handler>
    Error_Handler();
 800075c:	f7ff ff7a 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000760:	f7ff ff78 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000764:	f7ff ff76 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000768:	f7ff ff74 	bl	8000654 <Error_Handler>
    Error_Handler();
 800076c:	f7ff ff72 	bl	8000654 <Error_Handler>
 8000770:	20000110 	.word	0x20000110
 8000774:	40000c00 	.word	0x40000c00

08000778 <MX_TIM2_Init>:
{
 8000778:	b500      	push	{lr}
 800077a:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077c:	2300      	movs	r3, #0
 800077e:	930a      	str	r3, [sp, #40]	@ 0x28
 8000780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000782:	930c      	str	r3, [sp, #48]	@ 0x30
 8000784:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	9307      	str	r3, [sp, #28]
 8000788:	9308      	str	r3, [sp, #32]
 800078a:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	9304      	str	r3, [sp, #16]
 8000796:	9305      	str	r3, [sp, #20]
 8000798:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800079a:	4823      	ldr	r0, [pc, #140]	@ (8000828 <MX_TIM2_Init+0xb0>)
 800079c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a0:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 4000-1;
 80007a2:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80007a6:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000-1;
 80007aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007ae:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b4:	f002 f906 	bl	80029c4 <HAL_TIM_Base_Init>
 80007b8:	bb60      	cbnz	r0, 8000814 <MX_TIM2_Init+0x9c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c0:	a90a      	add	r1, sp, #40	@ 0x28
 80007c2:	4819      	ldr	r0, [pc, #100]	@ (8000828 <MX_TIM2_Init+0xb0>)
 80007c4:	f002 faea 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 80007c8:	bb30      	cbnz	r0, 8000818 <MX_TIM2_Init+0xa0>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007ca:	4817      	ldr	r0, [pc, #92]	@ (8000828 <MX_TIM2_Init+0xb0>)
 80007cc:	f002 f92a 	bl	8002a24 <HAL_TIM_OC_Init>
 80007d0:	bb20      	cbnz	r0, 800081c <MX_TIM2_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007da:	a907      	add	r1, sp, #28
 80007dc:	4812      	ldr	r0, [pc, #72]	@ (8000828 <MX_TIM2_Init+0xb0>)
 80007de:	f002 fca9 	bl	8003134 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	b9e8      	cbnz	r0, 8000820 <MX_TIM2_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007e4:	2330      	movs	r3, #48	@ 0x30
 80007e6:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 3000;
 80007e8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80007ec:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2200      	movs	r2, #0
 80007f0:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f4:	4669      	mov	r1, sp
 80007f6:	480c      	ldr	r0, [pc, #48]	@ (8000828 <MX_TIM2_Init+0xb0>)
 80007f8:	f002 f9e8 	bl	8002bcc <HAL_TIM_OC_ConfigChannel>
 80007fc:	b990      	cbnz	r0, 8000824 <MX_TIM2_Init+0xac>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <MX_TIM2_Init+0xb0>)
 8000800:	6802      	ldr	r2, [r0, #0]
 8000802:	6993      	ldr	r3, [r2, #24]
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim2);
 800080a:	f000 f917 	bl	8000a3c <HAL_TIM_MspPostInit>
}
 800080e:	b00f      	add	sp, #60	@ 0x3c
 8000810:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000814:	f7ff ff1e 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000818:	f7ff ff1c 	bl	8000654 <Error_Handler>
    Error_Handler();
 800081c:	f7ff ff1a 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000820:	f7ff ff18 	bl	8000654 <Error_Handler>
    Error_Handler();
 8000824:	f7ff ff16 	bl	8000654 <Error_Handler>
 8000828:	2000015c 	.word	0x2000015c

0800082c <SystemClock_Config>:
{
 800082c:	b500      	push	{lr}
 800082e:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000830:	2248      	movs	r2, #72	@ 0x48
 8000832:	2100      	movs	r1, #0
 8000834:	a806      	add	r0, sp, #24
 8000836:	f003 fed7 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083a:	2300      	movs	r3, #0
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	9303      	str	r3, [sp, #12]
 8000842:	9304      	str	r3, [sp, #16]
 8000844:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000846:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800084a:	f000 fca3 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>
 800084e:	b9d0      	cbnz	r0, 8000886 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000850:	2310      	movs	r3, #16
 8000852:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000858:	2300      	movs	r3, #0
 800085a:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800085c:	2260      	movs	r2, #96	@ 0x60
 800085e:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000860:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	a806      	add	r0, sp, #24
 8000864:	f000 fde2 	bl	800142c <HAL_RCC_OscConfig>
 8000868:	b978      	cbnz	r0, 800088a <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800086e:	2100      	movs	r1, #0
 8000870:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000878:	a801      	add	r0, sp, #4
 800087a:	f001 f9b1 	bl	8001be0 <HAL_RCC_ClockConfig>
 800087e:	b930      	cbnz	r0, 800088e <SystemClock_Config+0x62>
}
 8000880:	b019      	add	sp, #100	@ 0x64
 8000882:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000886:	f7ff fee5 	bl	8000654 <Error_Handler>
    Error_Handler();
 800088a:	f7ff fee3 	bl	8000654 <Error_Handler>
    Error_Handler();
 800088e:	f7ff fee1 	bl	8000654 <Error_Handler>
	...

08000894 <main>:
{
 8000894:	b530      	push	{r4, r5, lr}
 8000896:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000898:	f000 fa60 	bl	8000d5c <HAL_Init>
  SystemClock_Config();
 800089c:	f7ff ffc6 	bl	800082c <SystemClock_Config>
  MX_GPIO_Init();
 80008a0:	f7ff fe8e 	bl	80005c0 <MX_GPIO_Init>
  MX_UART4_Init();
 80008a4:	f7ff fed8 	bl	8000658 <MX_UART4_Init>
  MX_TIM5_Init();
 80008a8:	f7ff ff06 	bl	80006b8 <MX_TIM5_Init>
  MX_TIM2_Init();
 80008ac:	f7ff ff64 	bl	8000778 <MX_TIM2_Init>
  sprintf(user_prompt, "\r\nEnter desired duty cycle (0 to 100): ");
 80008b0:	ac01      	add	r4, sp, #4
 80008b2:	4d3a      	ldr	r5, [pc, #232]	@ (800099c <main+0x108>)
 80008b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008c0:	e884 0003 	stmia.w	r4, {r0, r1}
  char user_response[4] = {0};
 80008c4:	2100      	movs	r1, #0
 80008c6:	9100      	str	r1, [sp, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);        // Start TIM5 PWM output
 80008c8:	4835      	ldr	r0, [pc, #212]	@ (80009a0 <main+0x10c>)
 80008ca:	f002 fb7f 	bl	8002fcc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);                      // Start TIM1 (master base timer)
 80008ce:	4835      	ldr	r0, [pc, #212]	@ (80009a4 <main+0x110>)
 80008d0:	f001 ffc6 	bl	8002860 <HAL_TIM_Base_Start>
 80008d4:	e026      	b.n	8000924 <main+0x90>
			  user_response[response_len] = 0;
 80008d6:	2200      	movs	r2, #0
 80008d8:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 80008dc:	446b      	add	r3, sp
 80008de:	f803 2c68 	strb.w	r2, [r3, #-104]
	  if(response_len > 0) {
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	dd14      	ble.n	8000910 <main+0x7c>
		  int duty_cycle = atoi(user_response);
 80008e6:	4668      	mov	r0, sp
 80008e8:	f003 fdd4 	bl	8004494 <atoi>
 80008ec:	4602      	mov	r2, r0
		  if((duty_cycle <= 100) && (duty_cycle > 0)) {
 80008ee:	1e43      	subs	r3, r0, #1
 80008f0:	2b63      	cmp	r3, #99	@ 0x63
 80008f2:	d844      	bhi.n	800097e <main+0xea>
			  sprintf(user_prompt, "\r\nReceived duty cycle %d", duty_cycle);
 80008f4:	492c      	ldr	r1, [pc, #176]	@ (80009a8 <main+0x114>)
 80008f6:	a801      	add	r0, sp, #4
 80008f8:	f003 fe54 	bl	80045a4 <siprintf>
			  HAL_UART_Transmit(&huart4, (uint8_t*)user_prompt, strlen(user_prompt), HAL_MAX_DELAY);
 80008fc:	a801      	add	r0, sp, #4
 80008fe:	f7ff fc99 	bl	8000234 <strlen>
 8000902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000906:	b282      	uxth	r2, r0
 8000908:	a901      	add	r1, sp, #4
 800090a:	4828      	ldr	r0, [pc, #160]	@ (80009ac <main+0x118>)
 800090c:	f003 fb6a 	bl	8003fe4 <HAL_UART_Transmit>
	  sprintf(user_prompt, "\r\nEnter desired duty cycle (0 to 100): ");
 8000910:	ac01      	add	r4, sp, #4
 8000912:	4d22      	ldr	r5, [pc, #136]	@ (800099c <main+0x108>)
 8000914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
	  HAL_UART_Transmit(&huart4, (uint8_t*)user_prompt, strlen(user_prompt), HAL_MAX_DELAY);
 8000924:	a801      	add	r0, sp, #4
 8000926:	f7ff fc85 	bl	8000234 <strlen>
 800092a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800092e:	b282      	uxth	r2, r0
 8000930:	a901      	add	r1, sp, #4
 8000932:	481e      	ldr	r0, [pc, #120]	@ (80009ac <main+0x118>)
 8000934:	f003 fb56 	bl	8003fe4 <HAL_UART_Transmit>
	  int response_len = 0;
 8000938:	2400      	movs	r4, #0
	  while(response_len <= 3) {
 800093a:	2c03      	cmp	r4, #3
 800093c:	dcd1      	bgt.n	80008e2 <main+0x4e>
		  HAL_UART_Receive_IT(&huart4, (uint8_t*)&(user_response[response_len]), 1);
 800093e:	eb0d 0504 	add.w	r5, sp, r4
 8000942:	2201      	movs	r2, #1
 8000944:	4629      	mov	r1, r5
 8000946:	4819      	ldr	r0, [pc, #100]	@ (80009ac <main+0x118>)
 8000948:	f003 fcec 	bl	8004324 <HAL_UART_Receive_IT>
		  while(response_received == false) {};
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <main+0x11c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0fb      	beq.n	800094c <main+0xb8>
		  HAL_UART_Transmit(&huart4, (uint8_t*)&(user_response[response_len]), 1, HAL_MAX_DELAY);
 8000954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000958:	2201      	movs	r2, #1
 800095a:	4629      	mov	r1, r5
 800095c:	4813      	ldr	r0, [pc, #76]	@ (80009ac <main+0x118>)
 800095e:	f003 fb41 	bl	8003fe4 <HAL_UART_Transmit>
		  response_received = false;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <main+0x11c>)
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
		  if((user_response[response_len] == '\r') || ((user_response[response_len] == '\n'))) {
 8000968:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 800096c:	446b      	add	r3, sp
 800096e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000972:	2b0d      	cmp	r3, #13
 8000974:	d0af      	beq.n	80008d6 <main+0x42>
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d0ad      	beq.n	80008d6 <main+0x42>
		  response_len++;
 800097a:	3401      	adds	r4, #1
 800097c:	e7dd      	b.n	800093a <main+0xa6>
			  sprintf(user_prompt, "\r\nReceived invalid duty cycle %d, try again!", duty_cycle);
 800097e:	490d      	ldr	r1, [pc, #52]	@ (80009b4 <main+0x120>)
 8000980:	a801      	add	r0, sp, #4
 8000982:	f003 fe0f 	bl	80045a4 <siprintf>
			  HAL_UART_Transmit(&huart4, (uint8_t*)user_prompt, strlen(user_prompt), HAL_MAX_DELAY);
 8000986:	a801      	add	r0, sp, #4
 8000988:	f7ff fc54 	bl	8000234 <strlen>
 800098c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000990:	b282      	uxth	r2, r0
 8000992:	a901      	add	r1, sp, #4
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <main+0x118>)
 8000996:	f003 fb25 	bl	8003fe4 <HAL_UART_Transmit>
 800099a:	e7b9      	b.n	8000910 <main+0x7c>
 800099c:	08004f20 	.word	0x08004f20
 80009a0:	20000110 	.word	0x20000110
 80009a4:	2000015c 	.word	0x2000015c
 80009a8:	08004f48 	.word	0x08004f48
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	20000078 	.word	0x20000078
 80009b4:	08004f64 	.word	0x08004f64

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b500      	push	{lr}
 80009ba:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_MspInit+0x34>)
 80009be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009c0:	f042 0201 	orr.w	r2, r2, #1
 80009c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80009c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009c8:	f002 0201 	and.w	r2, r2, #1
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009d2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80009d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009e2:	f000 fbbd 	bl	8001160 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	b003      	add	sp, #12
 80009e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80009f2:	6803      	ldr	r3, [r0, #0]
 80009f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009f8:	d004      	beq.n	8000a04 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80009fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d00d      	beq.n	8000a1c <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000a00:	b002      	add	sp, #8
 8000a02:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a04:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a0a:	f042 0201 	orr.w	r2, r2, #1
 8000a0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	9b00      	ldr	r3, [sp, #0]
 8000a1a:	e7f1      	b.n	8000a00 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_TIM_Base_MspInit+0x48>)
 8000a1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a20:	f042 0208 	orr.w	r2, r2, #8
 8000a24:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	9b01      	ldr	r3, [sp, #4]
}
 8000a30:	e7e6      	b.n	8000a00 <HAL_TIM_Base_MspInit+0x10>
 8000a32:	bf00      	nop
 8000a34:	40000c00 	.word	0x40000c00
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a3c:	b500      	push	{lr}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	2300      	movs	r3, #0
 8000a42:	9303      	str	r3, [sp, #12]
 8000a44:	9304      	str	r3, [sp, #16]
 8000a46:	9305      	str	r3, [sp, #20]
 8000a48:	9306      	str	r3, [sp, #24]
 8000a4a:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8000a4c:	6803      	ldr	r3, [r0, #0]
 8000a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a52:	d005      	beq.n	8000a60 <HAL_TIM_MspPostInit+0x24>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <HAL_TIM_MspPostInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d019      	beq.n	8000a8e <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000a5a:	b009      	add	sp, #36	@ 0x24
 8000a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000a64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a66:	f042 0201 	orr.w	r2, r2, #1
 8000a6a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a80:	2301      	movs	r3, #1
 8000a82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	a903      	add	r1, sp, #12
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <HAL_TIM_MspPostInit+0x80>)
 8000a88:	f000 fa78 	bl	8000f7c <HAL_GPIO_Init>
 8000a8c:	e7e5      	b.n	8000a5a <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_TIM_MspPostInit+0x84>)
 8000a90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000aaa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	a903      	add	r1, sp, #12
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <HAL_TIM_MspPostInit+0x80>)
 8000ab0:	f000 fa64 	bl	8000f7c <HAL_GPIO_Init>
}
 8000ab4:	e7d1      	b.n	8000a5a <HAL_TIM_MspPostInit+0x1e>
 8000ab6:	bf00      	nop
 8000ab8:	40000c00 	.word	0x40000c00
 8000abc:	42020000 	.word	0x42020000
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b510      	push	{r4, lr}
 8000ac6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ac8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	2100      	movs	r1, #0
 8000acc:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000ace:	9128      	str	r1, [sp, #160]	@ 0xa0
 8000ad0:	9129      	str	r1, [sp, #164]	@ 0xa4
 8000ad2:	912a      	str	r1, [sp, #168]	@ 0xa8
 8000ad4:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad6:	2294      	movs	r2, #148	@ 0x94
 8000ad8:	a802      	add	r0, sp, #8
 8000ada:	f003 fd85 	bl	80045e8 <memset>
  if(huart->Instance==UART4)
 8000ade:	6822      	ldr	r2, [r4, #0]
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_UART_MspInit+0x90>)
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d001      	beq.n	8000aea <HAL_UART_MspInit+0x26>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000ae6:	b02c      	add	sp, #176	@ 0xb0
 8000ae8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000aea:	2308      	movs	r3, #8
 8000aec:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	eb0d 0003 	add.w	r0, sp, r3
 8000af2:	f001 faa5 	bl	8002040 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	bb48      	cbnz	r0, 8000b4c <HAL_UART_MspInit+0x88>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_UART_MspInit+0x94>)
 8000afa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000afc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000b00:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b04:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000b08:	9200      	str	r2, [sp, #0]
 8000b0a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b0e:	f042 0204 	orr.w	r2, r2, #4
 8000b12:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000b1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b22:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2400      	movs	r4, #0
 8000b2a:	9429      	str	r4, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	942a      	str	r4, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	a927      	add	r1, sp, #156	@ 0x9c
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <HAL_UART_MspInit+0x98>)
 8000b36:	f000 fa21 	bl	8000f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	2040      	movs	r0, #64	@ 0x40
 8000b40:	f000 f984 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b44:	2040      	movs	r0, #64	@ 0x40
 8000b46:	f000 f991 	bl	8000e6c <HAL_NVIC_EnableIRQ>
}
 8000b4a:	e7cc      	b.n	8000ae6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000b4c:	f7ff fd82 	bl	8000654 <Error_Handler>
 8000b50:	e7d2      	b.n	8000af8 <HAL_UART_MspInit+0x34>
 8000b52:	bf00      	nop
 8000b54:	40004c00 	.word	0x40004c00
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	42020800 	.word	0x42020800

08000b60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler>

08000b62 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler>

08000b64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler>

08000b66 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler>

08000b68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler>

08000b6a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f905 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bd08      	pop	{r3, pc}

08000b78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8000b78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b7a:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <UART4_IRQHandler+0xc>)
 8000b7c:	f002 fb70 	bl	8003260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	2000007c 	.word	0x2000007c

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <_sbrk+0x38>)
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <_sbrk+0x40>)
 8000b92:	6800      	ldr	r0, [r0, #0]
 8000b94:	b140      	cbz	r0, 8000ba8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <_sbrk+0x40>)
 8000b98:	6800      	ldr	r0, [r0, #0]
 8000b9a:	4403      	add	r3, r0
 8000b9c:	1a52      	subs	r2, r2, r1
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d806      	bhi.n	8000bb0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ba2:	4a09      	ldr	r2, [pc, #36]	@ (8000bc8 <_sbrk+0x40>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ba6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ba8:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <_sbrk+0x40>)
 8000baa:	4c08      	ldr	r4, [pc, #32]	@ (8000bcc <_sbrk+0x44>)
 8000bac:	6004      	str	r4, [r0, #0]
 8000bae:	e7f2      	b.n	8000b96 <_sbrk+0xe>
    errno = ENOMEM;
 8000bb0:	f003 fd22 	bl	80045f8 <__errno>
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	e7f3      	b.n	8000ba6 <_sbrk+0x1e>
 8000bbe:	bf00      	nop
 8000bc0:	20030000 	.word	0x20030000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200001a8 	.word	0x200001a8
 8000bcc:	200002f8 	.word	0x200002f8

08000bd0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd0:	4a03      	ldr	r2, [pc, #12]	@ (8000be0 <SystemInit+0x10>)
 8000bd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000bd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f013 0f08 	tst.w	r3, #8
 8000bec:	d116      	bne.n	8000c1c <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf4:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000bfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b0c      	cmp	r3, #12
 8000c08:	d848      	bhi.n	8000c9c <SystemCoreClockUpdate+0xb8>
 8000c0a:	e8df f003 	tbb	[pc, r3]
 8000c0e:	470c      	.short	0x470c
 8000c10:	470f4747 	.word	0x470f4747
 8000c14:	47134747 	.word	0x47134747
 8000c18:	4747      	.short	0x4747
 8000c1a:	17          	.byte	0x17
 8000c1b:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c24:	e7e8      	b.n	8000bf8 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c28:	601a      	str	r2, [r3, #0]
      break;
 8000c2a:	e028      	b.n	8000c7e <SystemCoreClockUpdate+0x9a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c2e:	4a20      	ldr	r2, [pc, #128]	@ (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c30:	601a      	str	r2, [r3, #0]
      break;
 8000c32:	e024      	b.n	8000c7e <SystemCoreClockUpdate+0x9a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c36:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c38:	601a      	str	r2, [r3, #0]
      break;
 8000c3a:	e020      	b.n	8000c7e <SystemCoreClockUpdate+0x9a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000c3e:	68d9      	ldr	r1, [r3, #12]
 8000c40:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c4a:	3301      	adds	r3, #1

      switch (pllsource)
 8000c4c:	2902      	cmp	r1, #2
 8000c4e:	d004      	beq.n	8000c5a <SystemCoreClockUpdate+0x76>
 8000c50:	2903      	cmp	r1, #3
 8000c52:	d01f      	beq.n	8000c94 <SystemCoreClockUpdate+0xb0>
        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
          break;

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000c54:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000c58:	e002      	b.n	8000c60 <SystemCoreClockUpdate+0x7c>
          pllvco = (HSI_VALUE / pllm);
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c5c:	fbb2 f2f3 	udiv	r2, r2, r3
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000c60:	4910      	ldr	r1, [pc, #64]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000c62:	68cb      	ldr	r3, [r1, #12]
 8000c64:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000c6c:	68ca      	ldr	r2, [r1, #12]
 8000c6e:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8000c72:	3201      	adds	r2, #1
 8000c74:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8000c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c7c:	6013      	str	r3, [r2, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <SystemCoreClockUpdate+0xc0>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <SystemCoreClockUpdate+0xd0>)
 8000c88:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c8c:	6813      	ldr	r3, [r2, #0]
 8000c8e:	40cb      	lsrs	r3, r1
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	4770      	bx	lr
          pllvco = (HSE_VALUE / pllm);
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c96:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000c9a:	e7e1      	b.n	8000c60 <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = msirange;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c9e:	601a      	str	r2, [r3, #0]
      break;
 8000ca0:	e7ed      	b.n	8000c7e <SystemCoreClockUpdate+0x9a>
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	08004f94 	.word	0x08004f94
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	00f42400 	.word	0x00f42400
 8000cb4:	08004fdc 	.word	0x08004fdc

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f7ff ff88 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <LoopForever+0x16>)
	cmp	r2, r3
 8000ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ce6:	f003 fc8d 	bl	8004604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fdd3 	bl	8000894 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000cf0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000cf4:	08005158 	.word	0x08005158
	ldr	r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cfc:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000d00:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000d04:	200002f8 	.word	0x200002f8

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_InitTick+0x44>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b90b      	cbnz	r3, 8000d16 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d12:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d14:	4770      	bx	lr
{
 8000d16:	b510      	push	{r4, lr}
 8000d18:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d22:	4a0c      	ldr	r2, [pc, #48]	@ (8000d54 <HAL_InitTick+0x48>)
 8000d24:	6810      	ldr	r0, [r2, #0]
 8000d26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d2a:	f000 f8a3 	bl	8000e74 <HAL_SYSTICK_Config>
 8000d2e:	b968      	cbnz	r0, 8000d4c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	2c07      	cmp	r4, #7
 8000d32:	d901      	bls.n	8000d38 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
 8000d36:	e00a      	b.n	8000d4e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d40:	f000 f884 	bl	8000e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <HAL_InitTick+0x4c>)
 8000d46:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2000      	movs	r0, #0
 8000d4a:	e000      	b.n	8000d4e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
}
 8000d4e:	bd10      	pop	{r4, pc}
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_Init>:
{
 8000d5c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d5e:	2004      	movs	r0, #4
 8000d60:	f000 f862 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 8000d64:	f7ff ff3e 	bl	8000be4 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f7ff ffcf 	bl	8000d0c <HAL_InitTick>
 8000d6e:	b110      	cbz	r0, 8000d76 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8000d70:	2401      	movs	r4, #1
}
 8000d72:	4620      	mov	r0, r4
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	4604      	mov	r4, r0
    HAL_MspInit();
 8000d78:	f7ff fe1e 	bl	80009b8 <HAL_MspInit>
 8000d7c:	e7f9      	b.n	8000d72 <HAL_Init+0x16>
	...

08000d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_IncTick+0x10>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <HAL_IncTick+0x14>)
 8000d86:	6811      	ldr	r1, [r2, #0]
 8000d88:	440b      	add	r3, r1
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000004 	.word	0x20000004
 8000d94:	200001ac 	.word	0x200001ac

08000d98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d98:	4b01      	ldr	r3, [pc, #4]	@ (8000da0 <HAL_GetTick+0x8>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001ac 	.word	0x200001ac

08000da4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000da4:	2800      	cmp	r0, #0
 8000da6:	db07      	blt.n	8000db8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da8:	f000 021f 	and.w	r2, r0, #31
 8000dac:	0940      	lsrs	r0, r0, #5
 8000dae:	2301      	movs	r3, #1
 8000db0:	4093      	lsls	r3, r2
 8000db2:	4a02      	ldr	r2, [pc, #8]	@ (8000dbc <__NVIC_EnableIRQ+0x18>)
 8000db4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	db08      	blt.n	8000dd6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	0149      	lsls	r1, r1, #5
 8000dc6:	b2c9      	uxtb	r1, r1
 8000dc8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000dcc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000dd0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000dd4:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	f000 000f 	and.w	r0, r0, #15
 8000dda:	0149      	lsls	r1, r1, #5
 8000ddc:	b2c9      	uxtb	r1, r1
 8000dde:	4b01      	ldr	r3, [pc, #4]	@ (8000de4 <__NVIC_SetPriority+0x24>)
 8000de0:	5419      	strb	r1, [r3, r0]
  }
}
 8000de2:	4770      	bx	lr
 8000de4:	e000ed14 	.word	0xe000ed14

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dea:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dee:	f1c0 0c07 	rsb	ip, r0, #7
 8000df2:	f1bc 0f03 	cmp.w	ip, #3
 8000df6:	bf28      	it	cs
 8000df8:	f04f 0c03 	movcs.w	ip, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfc:	1cc3      	adds	r3, r0, #3
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d90f      	bls.n	8000e22 <NVIC_EncodePriority+0x3a>
 8000e02:	1f03      	subs	r3, r0, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000e08:	fa0e f00c 	lsl.w	r0, lr, ip
 8000e0c:	ea21 0100 	bic.w	r1, r1, r0
 8000e10:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e12:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e16:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000e1a:	ea41 0002 	orr.w	r0, r1, r2
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	2300      	movs	r3, #0
 8000e24:	e7ee      	b.n	8000e04 <NVIC_EncodePriority+0x1c>
	...

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	0200      	lsls	r0, r0, #8
 8000e36:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000e44:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_NVIC_SetPriority+0x1c>)
 8000e52:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000e58:	f7ff ffc6 	bl	8000de8 <NVIC_EncodePriority>
 8000e5c:	4601      	mov	r1, r0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff ffae 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	f7ff ff99 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000e72:	bd08      	pop	{r3, pc}

08000e74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	3801      	subs	r0, #1
 8000e76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e7a:	d20b      	bcs.n	8000e94 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000e80:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <HAL_SYSTICK_Config+0x24>)
 8000e84:	21e0      	movs	r1, #224	@ 0xe0
 8000e86:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	2207      	movs	r2, #7
 8000e90:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e92:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e94:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9c:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d006      	beq.n	8000eb4 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	6443      	str	r3, [r0, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb4:	6802      	ldr	r2, [r0, #0]
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	f023 030e 	bic.w	r3, r3, #14
 8000ebc:	6013      	str	r3, [r2, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ebe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ec6:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec8:	6802      	ldr	r2, [r0, #0]
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ed2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8000ed4:	f003 021c 	and.w	r2, r3, #28
 8000ed8:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8000eda:	2301      	movs	r3, #1
 8000edc:	4093      	lsls	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000ee2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000ee4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8000ee6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8000ee8:	b133      	cbz	r3, 8000ef8 <HAL_DMA_Abort+0x5c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ef0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ef2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8000ef4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8000ef6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	2300      	movs	r3, #0
 8000f00:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

    return status;
 8000f04:	4618      	mov	r0, r3
  }
}
 8000f06:	4770      	bx	lr

08000f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f0a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d003      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f14:	2304      	movs	r3, #4
 8000f16:	6443      	str	r3, [r0, #68]	@ 0x44

    status = HAL_ERROR;
 8000f18:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000f1a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1c:	6802      	ldr	r2, [r0, #0]
 8000f1e:	6813      	ldr	r3, [r2, #0]
 8000f20:	f023 030e 	bic.w	r3, r3, #14
 8000f24:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000f26:	6802      	ldr	r2, [r0, #0]
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f30:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f38:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8000f3c:	f003 021c 	and.w	r2, r3, #28
 8000f40:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8000f42:	2301      	movs	r3, #1
 8000f44:	4093      	lsls	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f48:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000f4a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000f4c:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8000f4e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8000f50:	b133      	cbz	r3, 8000f60 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f58:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f5a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8000f5c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000f60:	2301      	movs	r3, #1
 8000f62:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8000f66:	2300      	movs	r3, #0
 8000f68:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 8000f6c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000f6e:	b113      	cbz	r3, 8000f76 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8000f70:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2000      	movs	r0, #0
 8000f74:	e7d1      	b.n	8000f1a <HAL_DMA_Abort_IT+0x12>
 8000f76:	2000      	movs	r0, #0
 8000f78:	e7cf      	b.n	8000f1a <HAL_DMA_Abort_IT+0x12>
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 8000f7e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f80:	e065      	b.n	800104e <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f82:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f84:	005e      	lsls	r6, r3, #1
 8000f86:	2403      	movs	r4, #3
 8000f88:	40b4      	lsls	r4, r6
 8000f8a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	68cc      	ldr	r4, [r1, #12]
 8000f90:	40b4      	lsls	r4, r6
 8000f92:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000f94:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f98:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	684c      	ldr	r4, [r1, #4]
 8000f9e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000fa2:	409c      	lsls	r4, r3
 8000fa4:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000fa6:	6044      	str	r4, [r0, #4]
 8000fa8:	e062      	b.n	8001070 <HAL_GPIO_Init+0xf4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000faa:	08dd      	lsrs	r5, r3, #3
 8000fac:	3508      	adds	r5, #8
 8000fae:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000fb2:	f003 0c07 	and.w	ip, r3, #7
 8000fb6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fba:	f04f 0e0f 	mov.w	lr, #15
 8000fbe:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000fc2:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fc6:	690c      	ldr	r4, [r1, #16]
 8000fc8:	fa04 f40c 	lsl.w	r4, r4, ip
 8000fcc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000fd0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000fd4:	e063      	b.n	800109e <HAL_GPIO_Init+0x122>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000fd6:	2406      	movs	r4, #6
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 8000fda:	2400      	movs	r4, #0
 8000fdc:	fa04 f40e 	lsl.w	r4, r4, lr
 8000fe0:	432c      	orrs	r4, r5
        EXTI->EXTICR[position >> 2U] = temp;
 8000fe2:	4d56      	ldr	r5, [pc, #344]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 8000fe4:	f10c 0c18 	add.w	ip, ip, #24
 8000fe8:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fec:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000fee:	43d4      	mvns	r4, r2
 8000ff0:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff4:	684f      	ldr	r7, [r1, #4]
 8000ff6:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8000ffa:	d001      	beq.n	8001000 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8000ffc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001000:	4d4e      	ldr	r5, [pc, #312]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 8001002:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001004:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001006:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800100a:	684f      	ldr	r7, [r1, #4]
 800100c:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8001010:	d001      	beq.n	8001016 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8001012:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001016:	4d49      	ldr	r5, [pc, #292]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 8001018:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800101a:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 800101e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001022:	684f      	ldr	r7, [r1, #4]
 8001024:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8001028:	d001      	beq.n	800102e <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800102a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800102e:	4d43      	ldr	r5, [pc, #268]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 8001030:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001034:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8001038:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103a:	684e      	ldr	r6, [r1, #4]
 800103c:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8001040:	d001      	beq.n	8001046 <HAL_GPIO_Init+0xca>
        {
          temp |= iocurrent;
 8001042:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8001046:	4a3d      	ldr	r2, [pc, #244]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 8001048:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 800104c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800104e:	680a      	ldr	r2, [r1, #0]
 8001050:	fa32 f403 	lsrs.w	r4, r2, r3
 8001054:	d071      	beq.n	800113a <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001056:	f04f 0c01 	mov.w	ip, #1
 800105a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 800105e:	ea1c 0202 	ands.w	r2, ip, r2
 8001062:	d0f3      	beq.n	800104c <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	684c      	ldr	r4, [r1, #4]
 8001066:	f004 0403 	and.w	r4, r4, #3
 800106a:	3c01      	subs	r4, #1
 800106c:	2c01      	cmp	r4, #1
 800106e:	d988      	bls.n	8000f82 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	684c      	ldr	r4, [r1, #4]
 8001072:	f004 0403 	and.w	r4, r4, #3
 8001076:	2c03      	cmp	r4, #3
 8001078:	d00c      	beq.n	8001094 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 800107a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800107c:	005d      	lsls	r5, r3, #1
 800107e:	f04f 0c03 	mov.w	ip, #3
 8001082:	fa0c fc05 	lsl.w	ip, ip, r5
 8001086:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108a:	688c      	ldr	r4, [r1, #8]
 800108c:	40ac      	lsls	r4, r5
 800108e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8001092:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001094:	684c      	ldr	r4, [r1, #4]
 8001096:	f004 0403 	and.w	r4, r4, #3
 800109a:	2c02      	cmp	r4, #2
 800109c:	d085      	beq.n	8000faa <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800109e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80010a4:	f04f 0c03 	mov.w	ip, #3
 80010a8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80010ac:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	684c      	ldr	r4, [r1, #4]
 80010b2:	f004 0403 	and.w	r4, r4, #3
 80010b6:	fa04 f40e 	lsl.w	r4, r4, lr
 80010ba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80010be:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	684c      	ldr	r4, [r1, #4]
 80010c2:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80010c6:	d0c1      	beq.n	800104c <HAL_GPIO_Init+0xd0>
        temp = EXTI->EXTICR[position >> 2U];
 80010c8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80010cc:	f10c 0518 	add.w	r5, ip, #24
 80010d0:	4c1a      	ldr	r4, [pc, #104]	@ (800113c <HAL_GPIO_Init+0x1c0>)
 80010d2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80010d6:	f003 0e03 	and.w	lr, r3, #3
 80010da:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80010de:	240f      	movs	r4, #15
 80010e0:	fa04 f40e 	lsl.w	r4, r4, lr
 80010e4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010e8:	4c15      	ldr	r4, [pc, #84]	@ (8001140 <HAL_GPIO_Init+0x1c4>)
 80010ea:	42a0      	cmp	r0, r4
 80010ec:	f43f af75 	beq.w	8000fda <HAL_GPIO_Init+0x5e>
 80010f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	d016      	beq.n	8001126 <HAL_GPIO_Init+0x1aa>
 80010f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80010fc:	42a0      	cmp	r0, r4
 80010fe:	d014      	beq.n	800112a <HAL_GPIO_Init+0x1ae>
 8001100:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001104:	42a0      	cmp	r0, r4
 8001106:	d012      	beq.n	800112e <HAL_GPIO_Init+0x1b2>
 8001108:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800110c:	42a0      	cmp	r0, r4
 800110e:	d010      	beq.n	8001132 <HAL_GPIO_Init+0x1b6>
 8001110:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001114:	42a0      	cmp	r0, r4
 8001116:	d00e      	beq.n	8001136 <HAL_GPIO_Init+0x1ba>
 8001118:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800111c:	42a0      	cmp	r0, r4
 800111e:	f43f af5a 	beq.w	8000fd6 <HAL_GPIO_Init+0x5a>
 8001122:	2407      	movs	r4, #7
 8001124:	e75a      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 8001126:	2401      	movs	r4, #1
 8001128:	e758      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 800112a:	2402      	movs	r4, #2
 800112c:	e756      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 800112e:	2403      	movs	r4, #3
 8001130:	e754      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 8001132:	2404      	movs	r4, #4
 8001134:	e752      	b.n	8000fdc <HAL_GPIO_Init+0x60>
 8001136:	2405      	movs	r4, #5
 8001138:	e750      	b.n	8000fdc <HAL_GPIO_Init+0x60>
  }
}
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113c:	4002f400 	.word	0x4002f400
 8001140:	42020000 	.word	0x42020000

08001144 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	b10a      	cbz	r2, 800114a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	6181      	str	r1, [r0, #24]
 8001148:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800114c:	4770      	bx	lr
	...

08001150 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8001150:	4b02      	ldr	r3, [pc, #8]	@ (800115c <HAL_PWREx_GetVoltageRange+0xc>)
 8001152:	6818      	ldr	r0, [r3, #0]
}
 8001154:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40007000 	.word	0x40007000

08001160 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001160:	4a02      	ldr	r2, [pc, #8]	@ (800116c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8001162:	6893      	ldr	r3, [r2, #8]
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6093      	str	r3, [r2, #8]
}
 800116a:	4770      	bx	lr
 800116c:	40007000 	.word	0x40007000

08001170 <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <HAL_PWREx_SMPS_GetEffectiveMode+0x20>)
 8001172:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001174:	f413 5080 	ands.w	r0, r3, #4096	@ 0x1000
 8001178:	d106      	bne.n	8001188 <HAL_PWREx_SMPS_GetEffectiveMode+0x18>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800117a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800117e:	d000      	beq.n	8001182 <HAL_PWREx_SMPS_GetEffectiveMode+0x12>
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 8001180:	4770      	bx	lr
    mode = PWR_SMPS_LOW_POWER;
 8001182:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001186:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 8001188:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  return mode;
 800118c:	e7f8      	b.n	8001180 <HAL_PWREx_SMPS_GetEffectiveMode+0x10>
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_PWREx_ControlVoltageScaling>:
{
 8001194:	b538      	push	{r3, r4, r5, lr}
 8001196:	4605      	mov	r5, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x80>)
 800119a:	681c      	ldr	r4, [r3, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800119c:	f7ff ffe8 	bl	8001170 <HAL_PWREx_SMPS_GetEffectiveMode>
 80011a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80011a4:	d02d      	beq.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011a6:	f404 64c0 	and.w	r4, r4, #1536	@ 0x600
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80011b2:	d128      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x72>
  if (vos_old == VoltageScaling)
 80011b4:	42ac      	cmp	r4, r5
 80011b6:	d028      	beq.n	800120a <HAL_PWREx_ControlVoltageScaling+0x76>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011b8:	4a16      	ldr	r2, [pc, #88]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c0:	432b      	orrs	r3, r5
 80011c2:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	4a14      	ldr	r2, [pc, #80]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0x88>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	09db      	lsrs	r3, r3, #7
 80011d2:	2232      	movs	r2, #50	@ 0x32
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	4a11      	ldr	r2, [pc, #68]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e2:	e000      	b.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    wait_loop_index--;
 80011e4:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80011e8:	6952      	ldr	r2, [r2, #20]
 80011ea:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80011ee:	d001      	beq.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f7      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80011fc:	d107      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80011fe:	2000      	movs	r0, #0
}
 8001200:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
 8001204:	e7fc      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	e7fa      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_OK;
 800120a:	2000      	movs	r0, #0
 800120c:	e7f8      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_TIMEOUT;
 800120e:	2003      	movs	r0, #3
 8001210:	e7f6      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8001212:	bf00      	nop
 8001214:	40007000 	.word	0x40007000
 8001218:	20000000 	.word	0x20000000
 800121c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001220:	cccccccd 	.word	0xcccccccd

08001224 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001232:	3301      	adds	r3, #1

  switch (pllsource)
 8001234:	2a02      	cmp	r2, #2
 8001236:	d005      	beq.n	8001244 <RCC_GetSysClockFreqFromPLLSource+0x20>
 8001238:	2a03      	cmp	r2, #3
 800123a:	d015      	beq.n	8001268 <RCC_GetSysClockFreqFromPLLSource+0x44>
 800123c:	2a01      	cmp	r2, #1
 800123e:	d01d      	beq.n	800127c <RCC_GetSysClockFreqFromPLLSource+0x58>
 8001240:	2000      	movs	r0, #0
 8001242:	e008      	b.n	8001256 <RCC_GetSysClockFreqFromPLLSource+0x32>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001244:	4818      	ldr	r0, [pc, #96]	@ (80012a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001246:	fbb0 f0f3 	udiv	r0, r0, r3
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001252:	fb03 f000 	mul.w	r0, r3, r0
      /* unexpected */
      pllvco = 0;
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800125e:	3301      	adds	r3, #1
 8001260:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8001262:	fbb0 f0f3 	udiv	r0, r0, r3
 8001266:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800126a:	fbb0 f0f3 	udiv	r0, r0, r3
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001276:	fb03 f000 	mul.w	r0, r3, r0
      break;
 800127a:	e7ec      	b.n	8001256 <RCC_GetSysClockFreqFromPLLSource+0x32>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f013 0f08 	tst.w	r3, #8
 8001284:	d108      	bne.n	8001298 <RCC_GetSysClockFreqFromPLLSource+0x74>
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800128c:	f3c3 2303 	ubfx	r3, r3, #8, #4
        pllvco = MSIRangeTable[msirange];
 8001290:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001292:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8001296:	e7de      	b.n	8001256 <RCC_GetSysClockFreqFromPLLSource+0x32>
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001298:	4b02      	ldr	r3, [pc, #8]	@ (80012a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012a0:	e7f6      	b.n	8001290 <RCC_GetSysClockFreqFromPLLSource+0x6c>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	08004f94 	.word	0x08004f94

080012b0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80012b0:	b530      	push	{r4, r5, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80012be:	d00c      	beq.n	80012da <RCC_SetFlashLatencyFromMSIRange+0x2a>
    vos = HAL_PWREx_GetVoltageRange();
 80012c0:	f7ff ff46 	bl	8001150 <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80012c4:	b1d0      	cbz	r0, 80012fc <RCC_SetFlashLatencyFromMSIRange+0x4c>
 80012c6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80012ca:	d017      	beq.n	80012fc <RCC_SetFlashLatencyFromMSIRange+0x4c>
    if (msirange > RCC_MSIRANGE_8)
 80012cc:	2c80      	cmp	r4, #128	@ 0x80
 80012ce:	d82c      	bhi.n	800132a <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if (msirange == RCC_MSIRANGE_8)
 80012d0:	d02d      	beq.n	800132e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      else if (msirange == RCC_MSIRANGE_7)
 80012d2:	2c70      	cmp	r4, #112	@ 0x70
 80012d4:	d02d      	beq.n	8001332 <RCC_SetFlashLatencyFromMSIRange+0x82>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012d6:	2100      	movs	r1, #0
 80012d8:	e017      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
    __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4d18      	ldr	r5, [pc, #96]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80012dc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80012e4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80012ee:	f7ff ff2f 	bl	8001150 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80012f2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80012f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	65ab      	str	r3, [r5, #88]	@ 0x58
 80012fa:	e7e3      	b.n	80012c4 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if (msirange > RCC_MSIRANGE_8)
 80012fc:	2c80      	cmp	r4, #128	@ 0x80
 80012fe:	d903      	bls.n	8001308 <RCC_SetFlashLatencyFromMSIRange+0x58>
      if (msirange > RCC_MSIRANGE_10)
 8001300:	2ca0      	cmp	r4, #160	@ 0xa0
 8001302:	d910      	bls.n	8001326 <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001304:	2102      	movs	r1, #2
 8001306:	e000      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001308:	2100      	movs	r1, #0
  __HAL_FLASH_SET_LATENCY(latency);
 800130a:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <RCC_SetFlashLatencyFromMSIRange+0x90>)
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f023 030f 	bic.w	r3, r3, #15
 8001312:	430b      	orrs	r3, r1
 8001314:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	428b      	cmp	r3, r1
 800131e:	d10a      	bne.n	8001336 <RCC_SetFlashLatencyFromMSIRange+0x86>
  return HAL_OK;
 8001320:	2000      	movs	r0, #0
}
 8001322:	b003      	add	sp, #12
 8001324:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 8001326:	2101      	movs	r1, #1
 8001328:	e7ef      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
      latency = FLASH_LATENCY_3; /* 3WS */
 800132a:	2103      	movs	r1, #3
 800132c:	e7ed      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800132e:	2102      	movs	r1, #2
 8001330:	e7eb      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001332:	2101      	movs	r1, #1
 8001334:	e7e9      	b.n	800130a <RCC_SetFlashLatencyFromMSIRange+0x5a>
    return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	e7f3      	b.n	8001322 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40022000 	.word	0x40022000

08001344 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001344:	4a2e      	ldr	r2, [pc, #184]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001346:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	f002 0203 	and.w	r2, r2, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800134e:	f013 030c 	ands.w	r3, r3, #12
 8001352:	d009      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x24>
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d005      	beq.n	8001364 <HAL_RCC_GetSysClockFreq+0x20>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001358:	2b04      	cmp	r3, #4
 800135a:	d04d      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0xb4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800135c:	2b08      	cmp	r3, #8
 800135e:	d04d      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001360:	2000      	movs	r0, #0
 8001362:	e00f      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x40>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001364:	2a01      	cmp	r2, #1
 8001366:	d1f7      	bne.n	8001358 <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001368:	4a25      	ldr	r2, [pc, #148]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	f012 0f08 	tst.w	r2, #8
 8001370:	d10c      	bne.n	800138c <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001372:	4a23      	ldr	r2, [pc, #140]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001374:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8001378:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800137c:	4921      	ldr	r1, [pc, #132]	@ (8001404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800137e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001382:	b113      	cbz	r3, 800138a <HAL_RCC_GetSysClockFreq+0x46>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d006      	beq.n	8001396 <HAL_RCC_GetSysClockFreq+0x52>
 8001388:	2000      	movs	r0, #0
}
 800138a:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800138c:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001394:	e7f2      	b.n	800137c <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013a4:	3301      	adds	r3, #1
    switch (pllsource)
 80013a6:	2a02      	cmp	r2, #2
 80013a8:	d00a      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x7c>
 80013aa:	2a03      	cmp	r2, #3
 80013ac:	d01a      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80013ba:	fb03 f000 	mul.w	r0, r3, r0
        break;
 80013be:	e008      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80013ce:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80013da:	3301      	adds	r3, #1
 80013dc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80013de:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e2:	4770      	bx	lr
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80013f2:	fb03 f000 	mul.w	r0, r3, r0
        break;
 80013f6:	e7ec      	b.n	80013d2 <HAL_RCC_GetSysClockFreq+0x8e>
    sysclockfreq = HSI_VALUE;
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013fa:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <HAL_RCC_GetSysClockFreq+0xc4>)
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	08004f94 	.word	0x08004f94
 8001408:	00f42400 	.word	0x00f42400

0800140c <HAL_RCC_GetHCLKFreq>:
{
 800140c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800140e:	f7ff ff99 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <HAL_RCC_GetHCLKFreq+0x18>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800141a:	4a03      	ldr	r2, [pc, #12]	@ (8001428 <HAL_RCC_GetHCLKFreq+0x1c>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
}
 800141e:	40d8      	lsrs	r0, r3
 8001420:	bd08      	pop	{r3, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	08004fdc 	.word	0x08004fdc

0800142c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800142c:	2800      	cmp	r0, #0
 800142e:	f000 83b6 	beq.w	8001b9e <HAL_RCC_OscConfig+0x772>
{
 8001432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001434:	b083      	sub	sp, #12
 8001436:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001438:	4b9e      	ldr	r3, [pc, #632]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800143a:	689d      	ldr	r5, [r3, #8]
 800143c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	68de      	ldr	r6, [r3, #12]
 8001442:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	6803      	ldr	r3, [r0, #0]
 8001448:	f013 0f10 	tst.w	r3, #16
 800144c:	d056      	beq.n	80014fc <HAL_RCC_OscConfig+0xd0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800144e:	b30d      	cbz	r5, 8001494 <HAL_RCC_OscConfig+0x68>
 8001450:	2d0c      	cmp	r5, #12
 8001452:	d01d      	beq.n	8001490 <HAL_RCC_OscConfig+0x64>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001454:	69e3      	ldr	r3, [r4, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80bc 	beq.w	80015d4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 800145c:	4a95      	ldr	r2, [pc, #596]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001466:	f7ff fc97 	bl	8000d98 <HAL_GetTick>
 800146a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146c:	4b91      	ldr	r3, [pc, #580]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f013 0f02 	tst.w	r3, #2
 8001474:	f040 809b 	bne.w	80015ae <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001478:	f7ff fc8e 	bl	8000d98 <HAL_GetTick>
 800147c:	1bc0      	subs	r0, r0, r7
 800147e:	2802      	cmp	r0, #2
 8001480:	d9f4      	bls.n	800146c <HAL_RCC_OscConfig+0x40>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001482:	4b8c      	ldr	r3, [pc, #560]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f013 0f02 	tst.w	r3, #2
 800148a:	d1ef      	bne.n	800146c <HAL_RCC_OscConfig+0x40>
              return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e391      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001490:	2e01      	cmp	r6, #1
 8001492:	d1df      	bne.n	8001454 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001494:	4b87      	ldr	r3, [pc, #540]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f013 0f02 	tst.w	r3, #2
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_OscConfig+0x7a>
 800149e:	69e3      	ldr	r3, [r4, #28]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 837e 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x776>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80014a8:	4b82      	ldr	r3, [pc, #520]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f013 0f08 	tst.w	r3, #8
 80014b0:	d057      	beq.n	8001562 <HAL_RCC_OscConfig+0x136>
 80014b2:	4b80      	ldr	r3, [pc, #512]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d858      	bhi.n	8001570 <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	f042 0208 	orr.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80014ce:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80014da:	6a21      	ldr	r1, [r4, #32]
 80014dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014e0:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014e2:	2d00      	cmp	r5, #0
 80014e4:	d05c      	beq.n	80015a0 <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014e6:	f7ff ff91 	bl	800140c <HAL_RCC_GetHCLKFreq>
 80014ea:	4b73      	ldr	r3, [pc, #460]	@ (80016b8 <HAL_RCC_OscConfig+0x28c>)
 80014ec:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80014ee:	4b73      	ldr	r3, [pc, #460]	@ (80016bc <HAL_RCC_OscConfig+0x290>)
 80014f0:	6818      	ldr	r0, [r3, #0]
 80014f2:	f7ff fc0b 	bl	8000d0c <HAL_InitTick>
        if (status != HAL_OK)
 80014f6:	2800      	cmp	r0, #0
 80014f8:	f040 835c 	bne.w	8001bb4 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	f013 0f01 	tst.w	r3, #1
 8001502:	f000 808b 	beq.w	800161c <HAL_RCC_OscConfig+0x1f0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001506:	2d08      	cmp	r5, #8
 8001508:	d07f      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
 800150a:	2d0c      	cmp	r5, #12
 800150c:	d07b      	beq.n	8001606 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	6863      	ldr	r3, [r4, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001514:	f000 80a7 	beq.w	8001666 <HAL_RCC_OscConfig+0x23a>
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	f000 80a9 	beq.w	8001672 <HAL_RCC_OscConfig+0x246>
 8001520:	4b64      	ldr	r3, [pc, #400]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001530:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a9 	beq.w	800168c <HAL_RCC_OscConfig+0x260>
        tickstart = HAL_GetTick();
 800153a:	f7ff fc2d 	bl	8000d98 <HAL_GetTick>
 800153e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001540:	4b5c      	ldr	r3, [pc, #368]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154a:	f7ff fc25 	bl	8000d98 <HAL_GetTick>
 800154e:	1bc0      	subs	r0, r0, r7
 8001550:	2864      	cmp	r0, #100	@ 0x64
 8001552:	d9f5      	bls.n	8001540 <HAL_RCC_OscConfig+0x114>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001554:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x114>
              return HAL_TIMEOUT;
 800155e:	2003      	movs	r0, #3
 8001560:	e328      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001562:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800156e:	e7a4      	b.n	80014ba <HAL_RCC_OscConfig+0x8e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001570:	f7ff fe9e 	bl	80012b0 <RCC_SetFlashLatencyFromMSIRange>
 8001574:	2800      	cmp	r0, #0
 8001576:	f040 8316 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x77a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157a:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	f042 0208 	orr.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800158a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001596:	6a21      	ldr	r1, [r4, #32]
 8001598:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	e7a2      	b.n	80014e6 <HAL_RCC_OscConfig+0xba>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80015a2:	f7ff fe85 	bl	80012b0 <RCC_SetFlashLatencyFromMSIRange>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d09d      	beq.n	80014e6 <HAL_RCC_OscConfig+0xba>
              return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e302      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ae:	4b41      	ldr	r3, [pc, #260]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f042 0208 	orr.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80015be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80015ca:	6a21      	ldr	r1, [r4, #32]
 80015cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e793      	b.n	80014fc <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_MSI_DISABLE();
 80015d4:	4a37      	ldr	r2, [pc, #220]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80015de:	f7ff fbdb 	bl	8000d98 <HAL_GetTick>
 80015e2:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f013 0f02 	tst.w	r3, #2
 80015ec:	d086      	beq.n	80014fc <HAL_RCC_OscConfig+0xd0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbd3 	bl	8000d98 <HAL_GetTick>
 80015f2:	1bc0      	subs	r0, r0, r7
 80015f4:	2802      	cmp	r0, #2
 80015f6:	d9f5      	bls.n	80015e4 <HAL_RCC_OscConfig+0x1b8>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f8:	4b2e      	ldr	r3, [pc, #184]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f013 0f02 	tst.w	r3, #2
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1b8>
              return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
 8001604:	e2d6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001606:	2e03      	cmp	r6, #3
 8001608:	d181      	bne.n	800150e <HAL_RCC_OscConfig+0xe2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4b2a      	ldr	r3, [pc, #168]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001612:	d003      	beq.n	800161c <HAL_RCC_OscConfig+0x1f0>
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 82c7 	beq.w	8001baa <HAL_RCC_OscConfig+0x77e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	f013 0f02 	tst.w	r3, #2
 8001622:	d060      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001624:	2d04      	cmp	r5, #4
 8001626:	d04d      	beq.n	80016c4 <HAL_RCC_OscConfig+0x298>
 8001628:	2d0c      	cmp	r5, #12
 800162a:	d049      	beq.n	80016c0 <HAL_RCC_OscConfig+0x294>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	68e3      	ldr	r3, [r4, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8090 	beq.w	8001754 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_ENABLE();
 8001634:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800163e:	f7ff fbab 	bl	8000d98 <HAL_GetTick>
 8001642:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800164c:	d179      	bne.n	8001742 <HAL_RCC_OscConfig+0x316>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fba3 	bl	8000d98 <HAL_GetTick>
 8001652:	1b40      	subs	r0, r0, r5
 8001654:	2802      	cmp	r0, #2
 8001656:	d9f5      	bls.n	8001644 <HAL_RCC_OscConfig+0x218>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x218>
              return HAL_TIMEOUT;
 8001662:	2003      	movs	r0, #3
 8001664:	e2a6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e75f      	b.n	8001532 <HAL_RCC_OscConfig+0x106>
 8001672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001676:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e752      	b.n	8001532 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800168c:	f7ff fb84 	bl	8000d98 <HAL_GetTick>
 8001690:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800169a:	d0bf      	beq.n	800161c <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff fb7c 	bl	8000d98 <HAL_GetTick>
 80016a0:	1bc0      	subs	r0, r0, r7
 80016a2:	2864      	cmp	r0, #100	@ 0x64
 80016a4:	d9f5      	bls.n	8001692 <HAL_RCC_OscConfig+0x266>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_RCC_OscConfig+0x288>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x266>
              return HAL_TIMEOUT;
 80016b0:	2003      	movs	r0, #3
 80016b2:	e27f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 80016b4:	40021000 	.word	0x40021000
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016c0:	2e02      	cmp	r6, #2
 80016c2:	d1b3      	bne.n	800162c <HAL_RCC_OscConfig+0x200>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	4ba9      	ldr	r3, [pc, #676]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2aa>
 80016ce:	68e3      	ldr	r3, [r4, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 826c 	beq.w	8001bae <HAL_RCC_OscConfig+0x782>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4aa5      	ldr	r2, [pc, #660]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80016d8:	6853      	ldr	r3, [r2, #4]
 80016da:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80016de:	6921      	ldr	r1, [r4, #16]
 80016e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80016e4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f013 0f08 	tst.w	r3, #8
 80016ec:	d070      	beq.n	80017d0 <HAL_RCC_OscConfig+0x3a4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ee:	6963      	ldr	r3, [r4, #20]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d050      	beq.n	8001796 <HAL_RCC_OscConfig+0x36a>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80016f4:	69a3      	ldr	r3, [r4, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d145      	bne.n	8001786 <HAL_RCC_OscConfig+0x35a>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80016fa:	4a9c      	ldr	r2, [pc, #624]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80016fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001700:	f023 0310 	bic.w	r3, r3, #16
 8001704:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 8001708:	4a98      	ldr	r2, [pc, #608]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800170a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001716:	f7ff fb3f 	bl	8000d98 <HAL_GetTick>
 800171a:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171c:	4b93      	ldr	r3, [pc, #588]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	f013 0f02 	tst.w	r3, #2
 8001726:	d153      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fb36 	bl	8000d98 <HAL_GetTick>
 800172c:	1b40      	subs	r0, r0, r5
 800172e:	2807      	cmp	r0, #7
 8001730:	d9f4      	bls.n	800171c <HAL_RCC_OscConfig+0x2f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001732:	4b8e      	ldr	r3, [pc, #568]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001738:	f013 0f02 	tst.w	r3, #2
 800173c:	d1ee      	bne.n	800171c <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e238      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4a8a      	ldr	r2, [pc, #552]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001744:	6853      	ldr	r3, [r2, #4]
 8001746:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800174a:	6921      	ldr	r1, [r4, #16]
 800174c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001750:	6053      	str	r3, [r2, #4]
 8001752:	e7c8      	b.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_DISABLE();
 8001754:	4a85      	ldr	r2, [pc, #532]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800175c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800175e:	f7ff fb1b 	bl	8000d98 <HAL_GetTick>
 8001762:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	4b81      	ldr	r3, [pc, #516]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800176c:	d0bb      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176e:	f7ff fb13 	bl	8000d98 <HAL_GetTick>
 8001772:	1b40      	subs	r0, r0, r5
 8001774:	2802      	cmp	r0, #2
 8001776:	d9f5      	bls.n	8001764 <HAL_RCC_OscConfig+0x338>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	4b7c      	ldr	r3, [pc, #496]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x338>
              return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
 8001784:	e216      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001786:	4a79      	ldr	r2, [pc, #484]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001788:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001794:	e7b8      	b.n	8001708 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_LSI_DISABLE();
 8001796:	4a75      	ldr	r2, [pc, #468]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001798:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80017a4:	f7ff faf8 	bl	8000d98 <HAL_GetTick>
 80017a8:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017aa:	4b70      	ldr	r3, [pc, #448]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b0:	f013 0f02 	tst.w	r3, #2
 80017b4:	d00c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff faef 	bl	8000d98 <HAL_GetTick>
 80017ba:	1b40      	subs	r0, r0, r5
 80017bc:	2807      	cmp	r0, #7
 80017be:	d9f4      	bls.n	80017aa <HAL_RCC_OscConfig+0x37e>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c0:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	f013 0f02 	tst.w	r3, #2
 80017ca:	d0ee      	beq.n	80017aa <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 80017cc:	2003      	movs	r0, #3
 80017ce:	e1f1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	f013 0f04 	tst.w	r3, #4
 80017d6:	f000 80f0 	beq.w	80019ba <HAL_RCC_OscConfig+0x58e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017da:	4b64      	ldr	r3, [pc, #400]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80017e2:	d124      	bne.n	800182e <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b61      	ldr	r3, [pc, #388]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80017e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80017ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017f8:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001970 <HAL_RCC_OscConfig+0x544>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001802:	d016      	beq.n	8001832 <HAL_RCC_OscConfig+0x406>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001804:	68a3      	ldr	r3, [r4, #8]
 8001806:	f013 0f01 	tst.w	r3, #1
 800180a:	d033      	beq.n	8001874 <HAL_RCC_OscConfig+0x448>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800180c:	f013 0f04 	tst.w	r3, #4
 8001810:	d028      	beq.n	8001864 <HAL_RCC_OscConfig+0x438>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001812:	4b56      	ldr	r3, [pc, #344]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001814:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001818:	f042 0204 	orr.w	r2, r2, #4
 800181c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001820:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800182c:	e02f      	b.n	800188e <HAL_RCC_OscConfig+0x462>
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2500      	movs	r5, #0
 8001830:	e7e3      	b.n	80017fa <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001832:	4a4f      	ldr	r2, [pc, #316]	@ (8001970 <HAL_RCC_OscConfig+0x544>)
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800183c:	f7ff faac 	bl	8000d98 <HAL_GetTick>
 8001840:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <HAL_RCC_OscConfig+0x544>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800184a:	d1db      	bne.n	8001804 <HAL_RCC_OscConfig+0x3d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff faa4 	bl	8000d98 <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	2802      	cmp	r0, #2
 8001854:	d9f5      	bls.n	8001842 <HAL_RCC_OscConfig+0x416>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <HAL_RCC_OscConfig+0x544>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8001860:	2003      	movs	r0, #3
 8001862:	e1a7      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001864:	4a41      	ldr	r2, [pc, #260]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001866:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001872:	e00c      	b.n	800188e <HAL_RCC_OscConfig+0x462>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001874:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001876:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001882:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001886:	f022 0204 	bic.w	r2, r2, #4
 800188a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	68a3      	ldr	r3, [r4, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d053      	beq.n	800193c <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8001894:	f7ff fa80 	bl	8000d98 <HAL_GetTick>
 8001898:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a0:	f013 0f02 	tst.w	r3, #2
 80018a4:	d10e      	bne.n	80018c4 <HAL_RCC_OscConfig+0x498>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fa77 	bl	8000d98 <HAL_GetTick>
 80018aa:	1b80      	subs	r0, r0, r6
 80018ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018b0:	4298      	cmp	r0, r3
 80018b2:	d9f2      	bls.n	800189a <HAL_RCC_OscConfig+0x46e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b4:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ba:	f013 0f02 	tst.w	r3, #2
 80018be:	d1ec      	bne.n	800189a <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 80018c0:	2003      	movs	r0, #3
 80018c2:	e177      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018ca:	d01b      	beq.n	8001904 <HAL_RCC_OscConfig+0x4d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018cc:	4a27      	ldr	r2, [pc, #156]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80018ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80018d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa57 	bl	8000d98 <HAL_GetTick>
 80018ea:	1b80      	subs	r0, r0, r6
 80018ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018f0:	4298      	cmp	r0, r3
 80018f2:	d9f2      	bls.n	80018da <HAL_RCC_OscConfig+0x4ae>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fa:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_OscConfig+0x4ae>
              return HAL_TIMEOUT;
 8001900:	2003      	movs	r0, #3
 8001902:	e157      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001906:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800190a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800190e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001918:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800191c:	d04c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fa3b 	bl	8000d98 <HAL_GetTick>
 8001922:	1b80      	subs	r0, r0, r6
 8001924:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001928:	4298      	cmp	r0, r3
 800192a:	d9f2      	bls.n	8001912 <HAL_RCC_OscConfig+0x4e6>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001932:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001936:	d0ec      	beq.n	8001912 <HAL_RCC_OscConfig+0x4e6>
              return HAL_TIMEOUT;
 8001938:	2003      	movs	r0, #3
 800193a:	e13b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
      tickstart = HAL_GetTick();
 800193c:	f7ff fa2c 	bl	8000d98 <HAL_GetTick>
 8001940:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001948:	f013 0f02 	tst.w	r3, #2
 800194c:	d012      	beq.n	8001974 <HAL_RCC_OscConfig+0x548>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fa23 	bl	8000d98 <HAL_GetTick>
 8001952:	1b80      	subs	r0, r0, r6
 8001954:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001958:	4298      	cmp	r0, r3
 800195a:	d9f2      	bls.n	8001942 <HAL_RCC_OscConfig+0x516>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_RCC_OscConfig+0x540>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001962:	f013 0f02 	tst.w	r3, #2
 8001966:	d0ec      	beq.n	8001942 <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 8001968:	2003      	movs	r0, #3
 800196a:	e123      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 800196c:	40021000 	.word	0x40021000
 8001970:	40007000 	.word	0x40007000
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001974:	4b97      	ldr	r3, [pc, #604]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800197e:	d01b      	beq.n	80019b8 <HAL_RCC_OscConfig+0x58c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001980:	4a94      	ldr	r2, [pc, #592]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001982:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800198a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800198e:	4b91      	ldr	r3, [pc, #580]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001994:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001998:	d00e      	beq.n	80019b8 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff f9fd 	bl	8000d98 <HAL_GetTick>
 800199e:	1b80      	subs	r0, r0, r6
 80019a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019a4:	4298      	cmp	r0, r3
 80019a6:	d9f2      	bls.n	800198e <HAL_RCC_OscConfig+0x562>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019a8:	4b8a      	ldr	r3, [pc, #552]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ae:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80019b2:	d0ec      	beq.n	800198e <HAL_RCC_OscConfig+0x562>
              return HAL_TIMEOUT;
 80019b4:	2003      	movs	r0, #3
 80019b6:	e0fd      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
    if (pwrclkchanged == SET)
 80019b8:	bb15      	cbnz	r5, 8001a00 <HAL_RCC_OscConfig+0x5d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f013 0f20 	tst.w	r3, #32
 80019c0:	d041      	beq.n	8001a46 <HAL_RCC_OscConfig+0x61a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019c4:	b313      	cbz	r3, 8001a0c <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSI48_ENABLE();
 80019c6:	4a83      	ldr	r2, [pc, #524]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 80019c8:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9e0 	bl	8000d98 <HAL_GetTick>
 80019d8:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019da:	4b7e      	ldr	r3, [pc, #504]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 80019dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019e0:	f013 0f02 	tst.w	r3, #2
 80019e4:	d12f      	bne.n	8001a46 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e6:	f7ff f9d7 	bl	8000d98 <HAL_GetTick>
 80019ea:	1b40      	subs	r0, r0, r5
 80019ec:	2802      	cmp	r0, #2
 80019ee:	d9f4      	bls.n	80019da <HAL_RCC_OscConfig+0x5ae>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019f0:	4b78      	ldr	r3, [pc, #480]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019f6:	f013 0f02 	tst.w	r3, #2
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 80019fc:	2003      	movs	r0, #3
 80019fe:	e0d9      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a00:	4a74      	ldr	r2, [pc, #464]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a0a:	e7d6      	b.n	80019ba <HAL_RCC_OscConfig+0x58e>
      __HAL_RCC_HSI48_DISABLE();
 8001a0c:	4a71      	ldr	r2, [pc, #452]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a0e:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9bd 	bl	8000d98 <HAL_GetTick>
 8001a1e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a26:	f013 0f02 	tst.w	r3, #2
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a2c:	f7ff f9b4 	bl	8000d98 <HAL_GetTick>
 8001a30:	1b40      	subs	r0, r0, r5
 8001a32:	2802      	cmp	r0, #2
 8001a34:	d9f4      	bls.n	8001a20 <HAL_RCC_OscConfig+0x5f4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3c:	f013 0f02 	tst.w	r3, #2
 8001a40:	d0ee      	beq.n	8001a20 <HAL_RCC_OscConfig+0x5f4>
            return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e0b6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80b2 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a4e:	4a61      	ldr	r2, [pc, #388]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a50:	6892      	ldr	r2, [r2, #8]
 8001a52:	f002 020c 	and.w	r2, r2, #12
 8001a56:	2a0c      	cmp	r2, #12
 8001a58:	d073      	beq.n	8001b42 <HAL_RCC_OscConfig+0x716>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d018      	beq.n	8001a90 <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a60:	6813      	ldr	r3, [r2, #0]
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a68:	f7ff f996 	bl	8000d98 <HAL_GetTick>
 8001a6c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a76:	d05d      	beq.n	8001b34 <HAL_RCC_OscConfig+0x708>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f98e 	bl	8000d98 <HAL_GetTick>
 8001a7c:	1b00      	subs	r0, r0, r4
 8001a7e:	2802      	cmp	r0, #2
 8001a80:	d9f5      	bls.n	8001a6e <HAL_RCC_OscConfig+0x642>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	4b54      	ldr	r3, [pc, #336]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	e091      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_DISABLE();
 8001a90:	4a50      	ldr	r2, [pc, #320]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001a92:	6813      	ldr	r3, [r2, #0]
 8001a94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f97d 	bl	8000d98 <HAL_GetTick>
 8001a9e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x696>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f975 	bl	8000d98 <HAL_GetTick>
 8001aae:	1b40      	subs	r0, r0, r5
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f5      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x674>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x674>
              return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e078      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac2:	4a44      	ldr	r2, [pc, #272]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001ac4:	68d3      	ldr	r3, [r2, #12]
 8001ac6:	4944      	ldr	r1, [pc, #272]	@ (8001bd8 <HAL_RCC_OscConfig+0x7ac>)
 8001ac8:	4019      	ands	r1, r3
 8001aca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001acc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001ace:	3801      	subs	r0, #1
 8001ad0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001ad4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001ad6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ada:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001adc:	0840      	lsrs	r0, r0, #1
 8001ade:	3801      	subs	r0, #1
 8001ae0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001ae4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001ae6:	0840      	lsrs	r0, r0, #1
 8001ae8:	3801      	subs	r0, #1
 8001aea:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001aee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001af0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001af4:	4319      	orrs	r1, r3
 8001af6:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b00:	68d3      	ldr	r3, [r2, #12]
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001b08:	f7ff f946 	bl	8000d98 <HAL_GetTick>
 8001b0c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x704>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f93e 	bl	8000d98 <HAL_GetTick>
 8001b1c:	1b00      	subs	r0, r0, r4
 8001b1e:	2802      	cmp	r0, #2
 8001b20:	d9f5      	bls.n	8001b0e <HAL_RCC_OscConfig+0x6e2>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6e2>
              return HAL_TIMEOUT;
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	e041      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e03f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b34:	4a27      	ldr	r2, [pc, #156]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001b36:	68d1      	ldr	r1, [r2, #12]
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_RCC_OscConfig+0x7b0>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001b3e:	2000      	movs	r0, #0
 8001b40:	e038      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d038      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x78c>
        pll_config = RCC->PLLCFGR;
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_RCC_OscConfig+0x7a8>)
 8001b48:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	f003 0103 	and.w	r1, r3, #3
 8001b4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001b50:	4291      	cmp	r1, r2
 8001b52:	d133      	bne.n	8001bbc <HAL_RCC_OscConfig+0x790>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b5a:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001b60:	d12e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x794>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b62:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b66:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b68:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001b6c:	d12a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x798>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b72:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b74:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001b78:	d126      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x79c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001b7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b80:	0852      	lsrs	r2, r2, #1
 8001b82:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b84:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b88:	d120      	bne.n	8001bcc <HAL_RCC_OscConfig+0x7a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b8a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001b8e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001b90:	0852      	lsrs	r2, r2, #1
 8001b92:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b94:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001b98:	d11a      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x7a4>
  return HAL_OK;
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
    return HAL_ERROR;
 8001b9e:	2001      	movs	r0, #1
}
 8001ba0:	4770      	bx	lr
        return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	e006      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
            return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
 8001bac:	e002      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
}
 8001bb4:	b003      	add	sp, #12
 8001bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	e7fb      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
          return HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e7f9      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7f7      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	e7f5      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bc8:	2001      	movs	r0, #1
 8001bca:	e7f3      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7f1      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e7ef      	b.n	8001bb4 <HAL_RCC_OscConfig+0x788>
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	019f800c 	.word	0x019f800c
 8001bdc:	feeefffc 	.word	0xfeeefffc

08001be0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001be0:	2800      	cmp	r0, #0
 8001be2:	f000 80e9 	beq.w	8001db8 <HAL_RCC_ClockConfig+0x1d8>
{
 8001be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be8:	460d      	mov	r5, r1
 8001bea:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b76      	ldr	r3, [pc, #472]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1e8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	428b      	cmp	r3, r1
 8001bf6:	d20b      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4a73      	ldr	r2, [pc, #460]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1e8>)
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f023 030f 	bic.w	r3, r3, #15
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	6813      	ldr	r3, [r2, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	428b      	cmp	r3, r1
 8001c0c:	f040 80d6 	bne.w	8001dbc <HAL_RCC_ClockConfig+0x1dc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f013 0f02 	tst.w	r3, #2
 8001c16:	d00c      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c18:	68a2      	ldr	r2, [r4, #8]
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d905      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c26:	4969      	ldr	r1, [pc, #420]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c28:	688b      	ldr	r3, [r1, #8]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	f013 0f01 	tst.w	r3, #1
 8001c38:	d076      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x148>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	6863      	ldr	r3, [r4, #4]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d00d      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x7c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d025      	beq.n	8001c90 <HAL_RCC_ClockConfig+0xb0>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d13c      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xe2>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c4c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f013 0f02 	tst.w	r3, #2
 8001c56:	d121      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
 8001c5a:	e0a6      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e09f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c6a:	f7ff fadb 	bl	8001224 <RCC_GetSysClockFreqFromPLLSource>
      if (pllfreq > 80000000U)
 8001c6e:	4b58      	ldr	r3, [pc, #352]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	4298      	cmp	r0, r3
 8001c72:	d92d      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0xf0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c74:	4b55      	ldr	r3, [pc, #340]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001c7c:	d12a      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c7e:	4a53      	ldr	r2, [pc, #332]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	6893      	ldr	r3, [r2, #8]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c8c:	2780      	movs	r7, #128	@ 0x80
 8001c8e:	e024      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c90:	4b4e      	ldr	r3, [pc, #312]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001c98:	f000 8092 	beq.w	8001dc0 <HAL_RCC_ClockConfig+0x1e0>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c9c:	f7ff fb52 	bl	8001344 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	4298      	cmp	r0, r3
 8001ca4:	d918      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ca6:	4b49      	ldr	r3, [pc, #292]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001cae:	d137      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x140>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cb0:	4a46      	ldr	r2, [pc, #280]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	6893      	ldr	r3, [r2, #8]
 8001cb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cbe:	2780      	movs	r7, #128	@ 0x80
 8001cc0:	e00b      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc2:	4b42      	ldr	r3, [pc, #264]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001cca:	d1e7      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8001ccc:	2001      	movs	r0, #1
 8001cce:	e06c      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cd0:	2700      	movs	r7, #0
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
 8001cd8:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4a3c      	ldr	r2, [pc, #240]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	6893      	ldr	r3, [r2, #8]
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	6861      	ldr	r1, [r4, #4]
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f856 	bl	8000d98 <HAL_GetTick>
 8001cec:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	6862      	ldr	r2, [r4, #4]
 8001cf8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cfc:	d012      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfe:	f7ff f84b 	bl	8000d98 <HAL_GetTick>
 8001d02:	1b80      	subs	r0, r0, r6
 8001d04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d08:	4298      	cmp	r0, r3
 8001d0a:	d9f0      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	6862      	ldr	r2, [r4, #4]
 8001d16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d1a:	d0e8      	beq.n	8001cee <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	e044      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d20:	2700      	movs	r7, #0
 8001d22:	e7da      	b.n	8001cda <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 8001d24:	2f00      	cmp	r7, #0
 8001d26:	d141      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f013 0f02 	tst.w	r3, #2
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x16a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d30:	68a2      	ldr	r2, [r4, #8]
 8001d32:	4b26      	ldr	r3, [pc, #152]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d205      	bcs.n	8001d4a <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3e:	4923      	ldr	r1, [pc, #140]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d40:	688b      	ldr	r3, [r1, #8]
 8001d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d46:	431a      	orrs	r2, r3
 8001d48:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1e8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	d90a      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x18c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1e8>)
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f023 030f 	bic.w	r3, r3, #15
 8001d5e:	432b      	orrs	r3, r5
 8001d60:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	42ab      	cmp	r3, r5
 8001d6a:	d12b      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1e4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	f013 0f04 	tst.w	r3, #4
 8001d72:	d006      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	6893      	ldr	r3, [r2, #8]
 8001d78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d7c:	68e1      	ldr	r1, [r4, #12]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	f013 0f08 	tst.w	r3, #8
 8001d88:	d007      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x1ba>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8a:	4a10      	ldr	r2, [pc, #64]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	6893      	ldr	r3, [r2, #8]
 8001d8e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001d92:	6921      	ldr	r1, [r4, #16]
 8001d94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d98:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d9a:	f7ff fb37 	bl	800140c <HAL_RCC_GetHCLKFreq>
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001da0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001da2:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f7fe ffb1 	bl	8000d0c <HAL_InitTick>
}
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dac:	4a07      	ldr	r2, [pc, #28]	@ (8001dcc <HAL_RCC_ClockConfig+0x1ec>)
 8001dae:	6893      	ldr	r3, [r2, #8]
 8001db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001db4:	6093      	str	r3, [r2, #8]
 8001db6:	e7b7      	b.n	8001d28 <HAL_RCC_ClockConfig+0x148>
    return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
}
 8001dba:	4770      	bx	lr
      return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	e7f4      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
          return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	e7f2      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	e7f0      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ca>
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	04c4b400 	.word	0x04c4b400
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000008 	.word	0x20000008

08001ddc <HAL_RCC_GetPCLK1Freq>:
{
 8001ddc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dde:	f7ff fb15 	bl	800140c <HAL_RCC_GetHCLKFreq>
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001dea:	4a03      	ldr	r2, [pc, #12]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dee:	40d8      	lsrs	r0, r3
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08004fd4 	.word	0x08004fd4

08001dfc <HAL_RCC_GetPCLK2Freq>:
{
 8001dfc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dfe:	f7ff fb05 	bl	800140c <HAL_RCC_GetHCLKFreq>
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e0a:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e0e:	40d8      	lsrs	r0, r3
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08004fd4 	.word	0x08004fd4

08001e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4604      	mov	r4, r0
 8001e20:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8001e22:	6803      	ldr	r3, [r0, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d04f      	beq.n	8001ec8 <RCCEx_PLLSAI2_Config+0xac>
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d054      	beq.n	8001ed6 <RCCEx_PLLSAI2_Config+0xba>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d159      	bne.n	8001ee4 <RCCEx_PLLSAI2_Config+0xc8>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e30:	4b30      	ldr	r3, [pc, #192]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f013 0f02 	tst.w	r3, #2
 8001e38:	d056      	beq.n	8001ee8 <RCCEx_PLLSAI2_Config+0xcc>
  }

  if (status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e44:	f7fe ffa8 	bl	8000d98 <HAL_GetTick>
 8001e48:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001e52:	d009      	beq.n	8001e68 <RCCEx_PLLSAI2_Config+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e54:	f7fe ffa0 	bl	8000d98 <HAL_GetTick>
 8001e58:	1b43      	subs	r3, r0, r5
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d9f5      	bls.n	8001e4a <RCCEx_PLLSAI2_Config+0x2e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001e5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001e66:	d141      	bne.n	8001eec <RCCEx_PLLSAI2_Config+0xd0>
      }
    }

    if (status == HAL_OK)
    {
      if (Divider == DIVIDER_P_UPDATE)
 8001e68:	b986      	cbnz	r6, 8001e8c <RCCEx_PLLSAI2_Config+0x70>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e6a:	4822      	ldr	r0, [pc, #136]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e6c:	6943      	ldr	r3, [r0, #20]
 8001e6e:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <RCCEx_PLLSAI2_Config+0xdc>)
 8001e70:	401a      	ands	r2, r3
 8001e72:	68a1      	ldr	r1, [r4, #8]
 8001e74:	68e3      	ldr	r3, [r4, #12]
 8001e76:	06db      	lsls	r3, r3, #27
 8001e78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001e7c:	6861      	ldr	r1, [r4, #4]
 8001e7e:	3901      	subs	r1, #1
 8001e80:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001e84:	6821      	ldr	r1, [r4, #0]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	6142      	str	r2, [r0, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7fe ff7f 	bl	8000d98 <HAL_GetTick>
 8001e9a:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001ea4:	d109      	bne.n	8001eba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ea6:	f7fe ff77 	bl	8000d98 <HAL_GetTick>
 8001eaa:	1b43      	subs	r3, r0, r5
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d9f5      	bls.n	8001e9c <RCCEx_PLLSAI2_Config+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001eb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001eb8:	d01a      	beq.n	8001ef0 <RCCEx_PLLSAI2_Config+0xd4>
      }

      if (status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001ebc:	6953      	ldr	r3, [r2, #20]
 8001ebe:	6921      	ldr	r1, [r4, #16]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6153      	str	r3, [r2, #20]
 8001ec4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001ed0:	d1b3      	bne.n	8001e3a <RCCEx_PLLSAI2_Config+0x1e>
        status = HAL_ERROR;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	e7f7      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <RCCEx_PLLSAI2_Config+0xd8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 8001ede:	d1ac      	bne.n	8001e3a <RCCEx_PLLSAI2_Config+0x1e>
        status = HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7f0      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
  switch (pPllSai2->PLLSAI2Source)
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7ee      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
        status = HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e7ec      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
          status = HAL_TIMEOUT;
 8001eec:	2003      	movs	r0, #3
 8001eee:	e7ea      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
            status = HAL_TIMEOUT;
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	e7e8      	b.n	8001ec6 <RCCEx_PLLSAI2_Config+0xaa>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	07ff800c 	.word	0x07ff800c

08001efc <RCCEx_PLLSAI1_Config>:
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4604      	mov	r4, r0
 8001f00:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d052      	beq.n	8001fae <RCCEx_PLLSAI1_Config+0xb2>
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d057      	beq.n	8001fbc <RCCEx_PLLSAI1_Config+0xc0>
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	f040 8086 	bne.w	800201e <RCCEx_PLLSAI1_Config+0x122>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f12:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f013 0f02 	tst.w	r3, #2
 8001f1a:	f000 8082 	beq.w	8002022 <RCCEx_PLLSAI1_Config+0x126>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f1e:	4a44      	ldr	r2, [pc, #272]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001f26:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f28:	f7fe ff36 	bl	8000d98 <HAL_GetTick>
 8001f2c:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001f36:	d009      	beq.n	8001f4c <RCCEx_PLLSAI1_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f38:	f7fe ff2e 	bl	8000d98 <HAL_GetTick>
 8001f3c:	1b43      	subs	r3, r0, r5
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d9f5      	bls.n	8001f2e <RCCEx_PLLSAI1_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f42:	4b3b      	ldr	r3, [pc, #236]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001f4a:	d16c      	bne.n	8002026 <RCCEx_PLLSAI1_Config+0x12a>
      if (Divider == DIVIDER_P_UPDATE)
 8001f4c:	2e00      	cmp	r6, #0
 8001f4e:	d13c      	bne.n	8001fca <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f50:	4837      	ldr	r0, [pc, #220]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f52:	6903      	ldr	r3, [r0, #16]
 8001f54:	4a37      	ldr	r2, [pc, #220]	@ (8002034 <RCCEx_PLLSAI1_Config+0x138>)
 8001f56:	401a      	ands	r2, r3
 8001f58:	68a1      	ldr	r1, [r4, #8]
 8001f5a:	68e3      	ldr	r3, [r4, #12]
 8001f5c:	06db      	lsls	r3, r3, #27
 8001f5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001f62:	6861      	ldr	r1, [r4, #4]
 8001f64:	3901      	subs	r1, #1
 8001f66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001f6a:	6821      	ldr	r1, [r4, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f72:	4a2f      	ldr	r2, [pc, #188]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f7a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f7c:	f7fe ff0c 	bl	8000d98 <HAL_GetTick>
 8001f80:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f82:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001f8a:	d109      	bne.n	8001fa0 <RCCEx_PLLSAI1_Config+0xa4>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f8c:	f7fe ff04 	bl	8000d98 <HAL_GetTick>
 8001f90:	1b43      	subs	r3, r0, r5
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d9f5      	bls.n	8001f82 <RCCEx_PLLSAI1_Config+0x86>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001f9e:	d044      	beq.n	800202a <RCCEx_PLLSAI1_Config+0x12e>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8001fa0:	4a23      	ldr	r2, [pc, #140]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001fa2:	6913      	ldr	r3, [r2, #16]
 8001fa4:	69a1      	ldr	r1, [r4, #24]
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6113      	str	r3, [r2, #16]
 8001faa:	2000      	movs	r0, #0
}
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fae:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001fb6:	d1b2      	bne.n	8001f1e <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 8001fb8:	2001      	movs	r0, #1
 8001fba:	e7f7      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 8001fc4:	d1ab      	bne.n	8001f1e <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	e7f0      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
      else if (Divider == DIVIDER_Q_UPDATE)
 8001fca:	2e01      	cmp	r6, #1
 8001fcc:	d013      	beq.n	8001ff6 <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fce:	4818      	ldr	r0, [pc, #96]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001fd0:	6903      	ldr	r3, [r0, #16]
 8001fd2:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <RCCEx_PLLSAI1_Config+0x13c>)
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	68a1      	ldr	r1, [r4, #8]
 8001fd8:	6963      	ldr	r3, [r4, #20]
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	065b      	lsls	r3, r3, #25
 8001fe0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fe4:	6861      	ldr	r1, [r4, #4]
 8001fe6:	3901      	subs	r1, #1
 8001fe8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001fec:	6821      	ldr	r1, [r4, #0]
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	6102      	str	r2, [r0, #16]
 8001ff4:	e7bd      	b.n	8001f72 <RCCEx_PLLSAI1_Config+0x76>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff6:	480e      	ldr	r0, [pc, #56]	@ (8002030 <RCCEx_PLLSAI1_Config+0x134>)
 8001ff8:	6903      	ldr	r3, [r0, #16]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <RCCEx_PLLSAI1_Config+0x140>)
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	68a1      	ldr	r1, [r4, #8]
 8002000:	6923      	ldr	r3, [r4, #16]
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	3b01      	subs	r3, #1
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800200c:	6861      	ldr	r1, [r4, #4]
 800200e:	3901      	subs	r1, #1
 8002010:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002014:	6821      	ldr	r1, [r4, #0]
 8002016:	430b      	orrs	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	6102      	str	r2, [r0, #16]
 800201c:	e7a9      	b.n	8001f72 <RCCEx_PLLSAI1_Config+0x76>
  switch (pPllSai1->PLLSAI1Source)
 800201e:	2001      	movs	r0, #1
 8002020:	e7c4      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
        status = HAL_ERROR;
 8002022:	2001      	movs	r0, #1
 8002024:	e7c2      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8002026:	2003      	movs	r0, #3
 8002028:	e7c0      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
            status = HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
 800202c:	e7be      	b.n	8001fac <RCCEx_PLLSAI1_Config+0xb0>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	07ff800c 	.word	0x07ff800c
 8002038:	f9ff800c 	.word	0xf9ff800c
 800203c:	ff9f800c 	.word	0xff9f800c

08002040 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002048:	6803      	ldr	r3, [r0, #0]
 800204a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800204e:	d034      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002050:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002052:	2b40      	cmp	r3, #64	@ 0x40
 8002054:	d013      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8002056:	d80b      	bhi.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8002058:	b313      	cbz	r3, 80020a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800205a:	2b20      	cmp	r3, #32
 800205c:	d105      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800205e:	2100      	movs	r1, #0
 8002060:	3020      	adds	r0, #32
 8002062:	f7ff fedb 	bl	8001e1c <RCCEx_PLLSAI2_Config>
 8002066:	4606      	mov	r6, r0
        break;
 8002068:	e01f      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch (PeriphClkInit->Sai1ClockSelection)
 800206a:	2701      	movs	r7, #1
 800206c:	463e      	mov	r6, r7
 800206e:	e026      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002070:	2b60      	cmp	r3, #96	@ 0x60
 8002072:	d01e      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002074:	2b80      	cmp	r3, #128	@ 0x80
 8002076:	d01e      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002078:	2701      	movs	r7, #1
 800207a:	463e      	mov	r6, r7
 800207c:	e01f      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800207e:	4aaf      	ldr	r2, [pc, #700]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002080:	68d3      	ldr	r3, [r2, #12]
 8002082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002086:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002088:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800208a:	4aac      	ldr	r2, [pc, #688]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800208c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002090:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8002094:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002096:	430b      	orrs	r3, r1
 8002098:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800209c:	2700      	movs	r7, #0
 800209e:	e00e      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020a0:	2100      	movs	r1, #0
 80020a2:	3004      	adds	r0, #4
 80020a4:	f7ff ff2a 	bl	8001efc <RCCEx_PLLSAI1_Config>
 80020a8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d0ed      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      status = ret;
 80020ae:	4637      	mov	r7, r6
 80020b0:	e005      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 80020b2:	2600      	movs	r6, #0
 80020b4:	e7e9      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80020b6:	2600      	movs	r6, #0
 80020b8:	e7e7      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020ba:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020bc:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80020c4:	d032      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai2ClockSelection)
 80020c6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020cc:	d017      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80020ce:	d80d      	bhi.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xac>
 80020d0:	b32b      	cbz	r3, 800211e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d6:	d106      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d8:	2100      	movs	r1, #0
 80020da:	f104 0020 	add.w	r0, r4, #32
 80020de:	f7ff fe9d 	bl	8001e1c <RCCEx_PLLSAI2_Config>
 80020e2:	4606      	mov	r6, r0
        break;
 80020e4:	e010      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai2ClockSelection)
 80020e6:	2701      	movs	r7, #1
 80020e8:	463e      	mov	r6, r7
 80020ea:	e01f      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80020ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f6:	d007      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80020f8:	2701      	movs	r7, #1
 80020fa:	463e      	mov	r6, r7
 80020fc:	e016      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xec>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020fe:	4a8f      	ldr	r2, [pc, #572]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002100:	68d3      	ldr	r3, [r2, #12]
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8002108:	b97e      	cbnz	r6, 800212a <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800210a:	4a8c      	ldr	r2, [pc, #560]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800210c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002110:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002114:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002116:	430b      	orrs	r3, r1
 8002118:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800211c:	e006      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800211e:	2100      	movs	r1, #0
 8002120:	1d20      	adds	r0, r4, #4
 8002122:	f7ff feeb 	bl	8001efc <RCCEx_PLLSAI1_Config>
 8002126:	4606      	mov	r6, r0
        break;
 8002128:	e7ee      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      status = ret;
 800212a:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002132:	d078      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002134:	4b81      	ldr	r3, [pc, #516]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800213c:	d14f      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002140:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002142:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002146:	659a      	str	r2, [r3, #88]	@ 0x58
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002152:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002156:	4a7a      	ldr	r2, [pc, #488]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002160:	f7fe fe1a 	bl	8000d98 <HAL_GetTick>
 8002164:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800216e:	d109      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x144>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7fe fe12 	bl	8000d98 <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2802      	cmp	r0, #2
 8002178:	d9f5      	bls.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x126>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800217a:	4b71      	ldr	r3, [pc, #452]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002182:	d048      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    if (ret == HAL_OK)
 8002184:	2e00      	cmp	r6, #0
 8002186:	d149      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002188:	4b6c      	ldr	r3, [pc, #432]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800218e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002192:	d019      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002194:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002198:	429a      	cmp	r2, r3
 800219a:	d012      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800219c:	4a67      	ldr	r2, [pc, #412]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800219e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80021a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80021aa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80021ae:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b2:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80021b6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80021ba:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c2:	f013 0f01 	tst.w	r3, #1
 80021c6:	d10d      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c8:	4a5c      	ldr	r2, [pc, #368]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80021ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80021d6:	430b      	orrs	r3, r1
 80021d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021dc:	e01f      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    FlagStatus       pwrclkchanged = RESET;
 80021de:	f04f 0800 	mov.w	r8, #0
 80021e2:	e7b8      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x116>
        tickstart = HAL_GetTick();
 80021e4:	f7fe fdd8 	bl	8000d98 <HAL_GetTick>
 80021e8:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	4b54      	ldr	r3, [pc, #336]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	f013 0f02 	tst.w	r3, #2
 80021f4:	d1e8      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fdcf 	bl	8000d98 <HAL_GetTick>
 80021fa:	1b40      	subs	r0, r0, r5
 80021fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002200:	4298      	cmp	r0, r3
 8002202:	d9f2      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002204:	4b4d      	ldr	r3, [pc, #308]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	f013 0f02 	tst.w	r3, #2
 800220e:	d1db      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
        status = ret;
 8002210:	2703      	movs	r7, #3
              ret = HAL_TIMEOUT;
 8002212:	463e      	mov	r6, r7
 8002214:	e003      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      status = ret;
 8002216:	2703      	movs	r7, #3
          ret = HAL_TIMEOUT;
 8002218:	463e      	mov	r6, r7
 800221a:	e000      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      status = ret;
 800221c:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 800221e:	f1b8 0f00 	cmp.w	r8, #0
 8002222:	f040 8084 	bne.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f013 0f01 	tst.w	r3, #1
 800222c:	d008      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4a43      	ldr	r2, [pc, #268]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002230:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002234:	f023 0303 	bic.w	r3, r3, #3
 8002238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800223a:	430b      	orrs	r3, r1
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	f013 0f02 	tst.w	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x21a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002248:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800224a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800224e:	f023 030c 	bic.w	r3, r3, #12
 8002252:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002254:	430b      	orrs	r3, r1
 8002256:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	f013 0f04 	tst.w	r3, #4
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002262:	4a36      	ldr	r2, [pc, #216]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002264:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002268:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800226c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800226e:	430b      	orrs	r3, r1
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	f013 0f08 	tst.w	r3, #8
 800227a:	d008      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800227c:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800227e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002282:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002286:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002288:	430b      	orrs	r3, r1
 800228a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	f013 0f10 	tst.w	r3, #16
 8002294:	d008      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002296:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002298:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800229c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80022a2:	430b      	orrs	r3, r1
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	f013 0f20 	tst.w	r3, #32
 80022ae:	d008      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80022b6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80022ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80022bc:	430b      	orrs	r3, r1
 80022be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ca:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80022d0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80022d4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80022d6:	430b      	orrs	r3, r1
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80022e2:	d008      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e4:	4a15      	ldr	r2, [pc, #84]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80022ea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80022ee:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80022f0:	430b      	orrs	r3, r1
 80022f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80022fc:	d008      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80022fe:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002300:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002304:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002308:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800230a:	430b      	orrs	r3, r1
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002316:	d026      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x326>
    switch (PeriphClkInit->FdcanClockSelection)
 8002318:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800231a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800231e:	d011      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002320:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002324:	f000 80e6 	beq.w	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 8002328:	b18b      	cbz	r3, 800234e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800232a:	2701      	movs	r7, #1
 800232c:	e01b      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4a03      	ldr	r2, [pc, #12]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002330:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	@ 0x58
 8002338:	e775      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4a92      	ldr	r2, [pc, #584]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002346:	68d3      	ldr	r3, [r2, #12]
 8002348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234c:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 800234e:	2e00      	cmp	r6, #0
 8002350:	f040 80d6 	bne.w	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002354:	4a8e      	ldr	r2, [pc, #568]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002356:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800235a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800235e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002360:	430b      	orrs	r3, r1
 8002362:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800236c:	d008      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236e:	4a88      	ldr	r2, [pc, #544]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002370:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002374:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002378:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800237a:	430b      	orrs	r3, r1
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002388:	4a81      	ldr	r2, [pc, #516]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800238a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800238e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002392:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002394:	430b      	orrs	r3, r1
 8002396:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023a0:	d008      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80023a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80023a8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80023ac:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80023ae:	430b      	orrs	r3, r1
 80023b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023bc:	4a74      	ldr	r2, [pc, #464]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80023be:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80023c2:	f023 0303 	bic.w	r3, r3, #3
 80023c6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80023c8:	430b      	orrs	r3, r1
 80023ca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80023d4:	d011      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80023d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80023dc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80023e0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80023e2:	430b      	orrs	r3, r1
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80023ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ee:	f000 8089 	beq.w	8002504 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023f6:	f000 808a 	beq.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8002400:	d01e      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002402:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002408:	f000 808a 	beq.w	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800240e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8002412:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8002416:	430b      	orrs	r3, r1
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800241c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002424:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002428:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800242a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800242e:	d07f      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002434:	f000 8084 	beq.w	8002540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002438:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800243c:	f000 8086 	beq.w	800254c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8002446:	d00f      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x428>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002448:	4a51      	ldr	r2, [pc, #324]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800244a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800244e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002452:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8002454:	430b      	orrs	r3, r1
 8002456:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800245c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002460:	d07a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x518>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002466:	d07c      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x522>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800246e:	d00e      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002470:	4a47      	ldr	r2, [pc, #284]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002472:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002476:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800247a:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002484:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800248c:	d072      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x534>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002496:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002498:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80024a4:	430b      	orrs	r3, r1
 80024a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80024b0:	d009      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80024b2:	4a37      	ldr	r2, [pc, #220]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80024b4:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80024b8:	f023 0318 	bic.w	r3, r3, #24
 80024bc:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80024c0:	430b      	orrs	r3, r1
 80024c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80024cc:	d00e      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80024ce:	4a30      	ldr	r2, [pc, #192]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80024d0:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80024d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80024d8:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80024dc:	430b      	orrs	r3, r1
 80024de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80024e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80024e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024ea:	d04b      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x544>
}
 80024ec:	4638      	mov	r0, r7
 80024ee:	b002      	add	sp, #8
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024f4:	2100      	movs	r1, #0
 80024f6:	1d20      	adds	r0, r4, #4
 80024f8:	f7ff fd00 	bl	8001efc <RCCEx_PLLSAI1_Config>
 80024fc:	4606      	mov	r6, r0
        break;
 80024fe:	e726      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x30e>
      status = ret;
 8002500:	4637      	mov	r7, r6
 8002502:	e730      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002504:	68d3      	ldr	r3, [r2, #12]
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
 800250c:	e775      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800250e:	2101      	movs	r1, #1
 8002510:	1d20      	adds	r0, r4, #4
 8002512:	f7ff fcf3 	bl	8001efc <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8002516:	2800      	cmp	r0, #0
 8002518:	f43f af6f 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
          status = ret;
 800251c:	4607      	mov	r7, r0
 800251e:	e76c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002522:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800252a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800252e:	e77b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002530:	2101      	movs	r1, #1
 8002532:	1d20      	adds	r0, r4, #4
 8002534:	f7ff fce2 	bl	8001efc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8002538:	2800      	cmp	r0, #0
 800253a:	d081      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
        status = ret;
 800253c:	4607      	mov	r7, r0
 800253e:	e77f      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002540:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002542:	68d3      	ldr	r3, [r2, #12]
 8002544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002548:	60d3      	str	r3, [r2, #12]
 800254a:	e779      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800254c:	4a10      	ldr	r2, [pc, #64]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800254e:	68d3      	ldr	r3, [r2, #12]
 8002550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e773      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002558:	68d3      	ldr	r3, [r2, #12]
 800255a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800255e:	60d3      	str	r3, [r2, #12]
 8002560:	e782      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	2101      	movs	r1, #1
 8002564:	1d20      	adds	r0, r4, #4
 8002566:	f7ff fcc9 	bl	8001efc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 800256a:	2800      	cmp	r0, #0
 800256c:	f43f af7c 	beq.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x428>
        status = ret;
 8002570:	4607      	mov	r7, r0
 8002572:	e779      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002574:	2102      	movs	r1, #2
 8002576:	1d20      	adds	r0, r4, #4
 8002578:	f7ff fcc0 	bl	8001efc <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 800257c:	2800      	cmp	r0, #0
 800257e:	d086      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x44e>
        status = ret;
 8002580:	4607      	mov	r7, r0
 8002582:	e784      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x44e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	68d3      	ldr	r3, [r2, #12]
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
 800258c:	e7ae      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002598:	6a03      	ldr	r3, [r0, #32]
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a8:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ac:	680d      	ldr	r5, [r1, #0]
 80025ae:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025b0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025b4:	688b      	ldr	r3, [r1, #8]
 80025b6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b8:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <TIM_OC1_SetConfig+0x98>)
 80025ba:	4290      	cmp	r0, r2
 80025bc:	d00f      	beq.n	80025de <TIM_OC1_SetConfig+0x4a>
 80025be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025c2:	4290      	cmp	r0, r2
 80025c4:	d00b      	beq.n	80025de <TIM_OC1_SetConfig+0x4a>
 80025c6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80025ca:	4290      	cmp	r0, r2
 80025cc:	d007      	beq.n	80025de <TIM_OC1_SetConfig+0x4a>
 80025ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025d2:	4290      	cmp	r0, r2
 80025d4:	d003      	beq.n	80025de <TIM_OC1_SetConfig+0x4a>
 80025d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80025da:	4290      	cmp	r0, r2
 80025dc:	d105      	bne.n	80025ea <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025de:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025e2:	68ca      	ldr	r2, [r1, #12]
 80025e4:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025e6:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ea:	4a10      	ldr	r2, [pc, #64]	@ (800262c <TIM_OC1_SetConfig+0x98>)
 80025ec:	4290      	cmp	r0, r2
 80025ee:	d00f      	beq.n	8002610 <TIM_OC1_SetConfig+0x7c>
 80025f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025f4:	4290      	cmp	r0, r2
 80025f6:	d00b      	beq.n	8002610 <TIM_OC1_SetConfig+0x7c>
 80025f8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80025fc:	4290      	cmp	r0, r2
 80025fe:	d007      	beq.n	8002610 <TIM_OC1_SetConfig+0x7c>
 8002600:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002604:	4290      	cmp	r0, r2
 8002606:	d003      	beq.n	8002610 <TIM_OC1_SetConfig+0x7c>
 8002608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800260c:	4290      	cmp	r0, r2
 800260e:	d105      	bne.n	800261c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002610:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002614:	694a      	ldr	r2, [r1, #20]
 8002616:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002618:	698c      	ldr	r4, [r1, #24]
 800261a:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800261e:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002620:	684a      	ldr	r2, [r1, #4]
 8002622:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	6203      	str	r3, [r0, #32]
}
 8002626:	bc30      	pop	{r4, r5}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40012c00 	.word	0x40012c00

08002630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002632:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002634:	6a02      	ldr	r2, [r0, #32]
 8002636:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800263a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800263e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002640:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002644:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002648:	680d      	ldr	r5, [r1, #0]
 800264a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800264c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002650:	688a      	ldr	r2, [r1, #8]
 8002652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002656:	4a18      	ldr	r2, [pc, #96]	@ (80026b8 <TIM_OC3_SetConfig+0x88>)
 8002658:	4290      	cmp	r0, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC3_SetConfig+0x34>
 800265c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002660:	4290      	cmp	r0, r2
 8002662:	d106      	bne.n	8002672 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002668:	68ca      	ldr	r2, [r1, #12]
 800266a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800266e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <TIM_OC3_SetConfig+0x88>)
 8002674:	4290      	cmp	r0, r2
 8002676:	d00f      	beq.n	8002698 <TIM_OC3_SetConfig+0x68>
 8002678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800267c:	4290      	cmp	r0, r2
 800267e:	d00b      	beq.n	8002698 <TIM_OC3_SetConfig+0x68>
 8002680:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002684:	4290      	cmp	r0, r2
 8002686:	d007      	beq.n	8002698 <TIM_OC3_SetConfig+0x68>
 8002688:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800268c:	4290      	cmp	r0, r2
 800268e:	d003      	beq.n	8002698 <TIM_OC3_SetConfig+0x68>
 8002690:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002694:	4290      	cmp	r0, r2
 8002696:	d107      	bne.n	80026a8 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002698:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800269c:	694c      	ldr	r4, [r1, #20]
 800269e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026a2:	698c      	ldr	r4, [r1, #24]
 80026a4:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026aa:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ac:	684a      	ldr	r2, [r1, #4]
 80026ae:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b0:	6203      	str	r3, [r0, #32]
}
 80026b2:	bc30      	pop	{r4, r5}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00

080026bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026be:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026c0:	6a02      	ldr	r2, [r0, #32]
 80026c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026c6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026cc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80026d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	680d      	ldr	r5, [r1, #0]
 80026d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026de:	688d      	ldr	r5, [r1, #8]
 80026e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e4:	4d0f      	ldr	r5, [pc, #60]	@ (8002724 <TIM_OC4_SetConfig+0x68>)
 80026e6:	42a8      	cmp	r0, r5
 80026e8:	d00f      	beq.n	800270a <TIM_OC4_SetConfig+0x4e>
 80026ea:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80026ee:	42a8      	cmp	r0, r5
 80026f0:	d00b      	beq.n	800270a <TIM_OC4_SetConfig+0x4e>
 80026f2:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80026f6:	42a8      	cmp	r0, r5
 80026f8:	d007      	beq.n	800270a <TIM_OC4_SetConfig+0x4e>
 80026fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80026fe:	42a8      	cmp	r0, r5
 8002700:	d003      	beq.n	800270a <TIM_OC4_SetConfig+0x4e>
 8002702:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002706:	42a8      	cmp	r0, r5
 8002708:	d104      	bne.n	8002714 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800270a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800270e:	694d      	ldr	r5, [r1, #20]
 8002710:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002714:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002716:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002718:	684a      	ldr	r2, [r1, #4]
 800271a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271c:	6203      	str	r3, [r0, #32]
}
 800271e:	bc30      	pop	{r4, r5}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00

08002728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800272c:	6a02      	ldr	r2, [r0, #32]
 800272e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002732:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002734:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002736:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002738:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800273c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002740:	680d      	ldr	r5, [r1, #0]
 8002742:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002748:	688a      	ldr	r2, [r1, #8]
 800274a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800274e:	4a0f      	ldr	r2, [pc, #60]	@ (800278c <TIM_OC5_SetConfig+0x64>)
 8002750:	4290      	cmp	r0, r2
 8002752:	d00f      	beq.n	8002774 <TIM_OC5_SetConfig+0x4c>
 8002754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002758:	4290      	cmp	r0, r2
 800275a:	d00b      	beq.n	8002774 <TIM_OC5_SetConfig+0x4c>
 800275c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002760:	4290      	cmp	r0, r2
 8002762:	d007      	beq.n	8002774 <TIM_OC5_SetConfig+0x4c>
 8002764:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002768:	4290      	cmp	r0, r2
 800276a:	d003      	beq.n	8002774 <TIM_OC5_SetConfig+0x4c>
 800276c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002770:	4290      	cmp	r0, r2
 8002772:	d104      	bne.n	800277e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002774:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002778:	694a      	ldr	r2, [r1, #20]
 800277a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800277e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002780:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002782:	684a      	ldr	r2, [r1, #4]
 8002784:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	6203      	str	r3, [r0, #32]
}
 8002788:	bc30      	pop	{r4, r5}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00

08002790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002794:	6a02      	ldr	r2, [r0, #32]
 8002796:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800279a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800279c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800279e:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80027a0:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80027a4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a8:	680d      	ldr	r5, [r1, #0]
 80027aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80027ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80027b2:	688d      	ldr	r5, [r1, #8]
 80027b4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b8:	4d0f      	ldr	r5, [pc, #60]	@ (80027f8 <TIM_OC6_SetConfig+0x68>)
 80027ba:	42a8      	cmp	r0, r5
 80027bc:	d00f      	beq.n	80027de <TIM_OC6_SetConfig+0x4e>
 80027be:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80027c2:	42a8      	cmp	r0, r5
 80027c4:	d00b      	beq.n	80027de <TIM_OC6_SetConfig+0x4e>
 80027c6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80027ca:	42a8      	cmp	r0, r5
 80027cc:	d007      	beq.n	80027de <TIM_OC6_SetConfig+0x4e>
 80027ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80027d2:	42a8      	cmp	r0, r5
 80027d4:	d003      	beq.n	80027de <TIM_OC6_SetConfig+0x4e>
 80027d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80027da:	42a8      	cmp	r0, r5
 80027dc:	d104      	bne.n	80027e8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80027de:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80027e2:	694d      	ldr	r5, [r1, #20]
 80027e4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027ea:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80027ec:	684a      	ldr	r2, [r1, #4]
 80027ee:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f0:	6203      	str	r3, [r0, #32]
}
 80027f2:	bc30      	pop	{r4, r5}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40012c00 	.word	0x40012c00

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027fe:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002800:	6a04      	ldr	r4, [r0, #32]
 8002802:	f024 0401 	bic.w	r4, r4, #1
 8002806:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002808:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800280a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800280e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002816:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002818:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800281a:	6203      	str	r3, [r0, #32]
}
 800281c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002820:	4770      	bx	lr

08002822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002822:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002824:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002826:	6a04      	ldr	r4, [r0, #32]
 8002828:	f024 0410 	bic.w	r4, r4, #16
 800282c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002830:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002834:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002838:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800283c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002840:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002842:	6203      	str	r3, [r0, #32]
}
 8002844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002848:	4770      	bx	lr

0800284a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800284a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800284c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002854:	430b      	orrs	r3, r1
 8002856:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	6083      	str	r3, [r0, #8]
}
 800285c:	4770      	bx	lr
	...

08002860 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d131      	bne.n	80028ce <HAL_TIM_Base_Start+0x6e>
  htim->State = HAL_TIM_STATE_BUSY;
 800286a:	2302      	movs	r3, #2
 800286c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <HAL_TIM_Base_Start+0x7c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01c      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800287c:	d019      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 800287e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002882:	4293      	cmp	r3, r2
 8002884:	d015      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 8002886:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800288a:	4293      	cmp	r3, r2
 800288c:	d011      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 800288e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002892:	4293      	cmp	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 8002896:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
 800289e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d005      	beq.n	80028b2 <HAL_TIM_Base_Start+0x52>
    __HAL_TIM_ENABLE(htim);
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80028ae:	2000      	movs	r0, #0
 80028b0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <HAL_TIM_Base_Start+0x80>)
 80028b6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	2a06      	cmp	r2, #6
 80028ba:	d00a      	beq.n	80028d2 <HAL_TIM_Base_Start+0x72>
 80028bc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80028c0:	d009      	beq.n	80028d6 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80028ca:	2000      	movs	r0, #0
 80028cc:	4770      	bx	lr
    return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
 80028d0:	4770      	bx	lr
  return HAL_OK;
 80028d2:	2000      	movs	r0, #0
 80028d4:	4770      	bx	lr
 80028d6:	2000      	movs	r0, #0
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	00010007 	.word	0x00010007

080028e4 <HAL_TIM_OC_MspInit>:
}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_PWM_MspInit>:
}
 80028e6:	4770      	bx	lr

080028e8 <HAL_TIM_OnePulse_MspInit>:
}
 80028e8:	4770      	bx	lr
	...

080028ec <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80028ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ee:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <TIM_Base_SetConfig+0xd4>)
 80028f0:	4290      	cmp	r0, r2
 80028f2:	d012      	beq.n	800291a <TIM_Base_SetConfig+0x2e>
 80028f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80028f8:	d00f      	beq.n	800291a <TIM_Base_SetConfig+0x2e>
 80028fa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80028fe:	4290      	cmp	r0, r2
 8002900:	d00b      	beq.n	800291a <TIM_Base_SetConfig+0x2e>
 8002902:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002906:	4290      	cmp	r0, r2
 8002908:	d007      	beq.n	800291a <TIM_Base_SetConfig+0x2e>
 800290a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800290e:	4290      	cmp	r0, r2
 8002910:	d003      	beq.n	800291a <TIM_Base_SetConfig+0x2e>
 8002912:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002916:	4290      	cmp	r0, r2
 8002918:	d103      	bne.n	8002922 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800291e:	684a      	ldr	r2, [r1, #4]
 8002920:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002922:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <TIM_Base_SetConfig+0xd4>)
 8002924:	4290      	cmp	r0, r2
 8002926:	d01e      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 8002928:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800292c:	d01b      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 800292e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002932:	4290      	cmp	r0, r2
 8002934:	d017      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 8002936:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800293a:	4290      	cmp	r0, r2
 800293c:	d013      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 800293e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002942:	4290      	cmp	r0, r2
 8002944:	d00f      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 8002946:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800294a:	4290      	cmp	r0, r2
 800294c:	d00b      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 800294e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002952:	4290      	cmp	r0, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 8002956:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x7a>
 800295e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002962:	4290      	cmp	r0, r2
 8002964:	d103      	bne.n	800296e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	68ca      	ldr	r2, [r1, #12]
 800296c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002972:	694a      	ldr	r2, [r1, #20]
 8002974:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002976:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	688b      	ldr	r3, [r1, #8]
 800297a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800297c:	680b      	ldr	r3, [r1, #0]
 800297e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <TIM_Base_SetConfig+0xd4>)
 8002982:	4298      	cmp	r0, r3
 8002984:	d00f      	beq.n	80029a6 <TIM_Base_SetConfig+0xba>
 8002986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800298a:	4298      	cmp	r0, r3
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0xba>
 800298e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8002992:	4298      	cmp	r0, r3
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0xba>
 8002996:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800299a:	4298      	cmp	r0, r3
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0xba>
 800299e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029a2:	4298      	cmp	r0, r3
 80029a4:	d101      	bne.n	80029aa <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80029a6:	690b      	ldr	r3, [r1, #16]
 80029a8:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80029aa:	2301      	movs	r3, #1
 80029ac:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ae:	6903      	ldr	r3, [r0, #16]
 80029b0:	f013 0f01 	tst.w	r3, #1
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029b6:	6903      	ldr	r3, [r0, #16]
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6103      	str	r3, [r0, #16]
}
 80029be:	4770      	bx	lr
 80029c0:	40012c00 	.word	0x40012c00

080029c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029c4:	b360      	cbz	r0, 8002a20 <HAL_TIM_Base_Init+0x5c>
{
 80029c6:	b510      	push	{r4, lr}
 80029c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80029ce:	b313      	cbz	r3, 8002a16 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d6:	4621      	mov	r1, r4
 80029d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80029dc:	f7ff ff86 	bl	80028ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80029ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80029ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80029f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80029f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80029fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002a02:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002a06:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002a0a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
}
 8002a14:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	f7fd ffe9 	bl	80009f0 <HAL_TIM_Base_MspInit>
 8002a1e:	e7d7      	b.n	80029d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
}
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002a24:	b360      	cbz	r0, 8002a80 <HAL_TIM_OC_Init+0x5c>
{
 8002a26:	b510      	push	{r4, lr}
 8002a28:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002a2e:	b313      	cbz	r3, 8002a76 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a36:	4621      	mov	r1, r4
 8002a38:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a3c:	f7ff ff56 	bl	80028ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002a4a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002a4e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002a52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002a56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002a62:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002a66:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002a6a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002a6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
}
 8002a74:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a76:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002a7a:	f7ff ff33 	bl	80028e4 <HAL_TIM_OC_MspInit>
 8002a7e:	e7d7      	b.n	8002a30 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
}
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002a84:	b360      	cbz	r0, 8002ae0 <HAL_TIM_PWM_Init+0x5c>
{
 8002a86:	b510      	push	{r4, lr}
 8002a88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002a8e:	b313      	cbz	r3, 8002ad6 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a96:	4621      	mov	r1, r4
 8002a98:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a9c:	f7ff ff26 	bl	80028ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002aaa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002aae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002ab2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002ab6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002ac2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002ac6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002aca:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002ace:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002ad2:	2000      	movs	r0, #0
}
 8002ad4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002ada:	f7ff ff04 	bl	80028e6 <HAL_TIM_PWM_MspInit>
 8002ade:	e7d7      	b.n	8002a90 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002ae0:	2001      	movs	r0, #1
}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002ae4:	b350      	cbz	r0, 8002b3c <HAL_TIM_OnePulse_Init+0x58>
{
 8002ae6:	b538      	push	{r3, r4, r5, lr}
 8002ae8:	460d      	mov	r5, r1
 8002aea:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002aec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002af0:	b1fb      	cbz	r3, 8002b32 <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af8:	4621      	mov	r1, r4
 8002afa:	f851 0b04 	ldr.w	r0, [r1], #4
 8002afe:	f7ff fef5 	bl	80028ec <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f023 0308 	bic.w	r3, r3, #8
 8002b0a:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002b0c:	6822      	ldr	r2, [r4, #0]
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	432b      	orrs	r3, r5
 8002b12:	6013      	str	r3, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002b2e:	2000      	movs	r0, #0
}
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b32:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002b36:	f7ff fed7 	bl	80028e8 <HAL_TIM_OnePulse_MspInit>
 8002b3a:	e7da      	b.n	8002af2 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8002b3c:	2001      	movs	r0, #1
}
 8002b3e:	4770      	bx	lr

08002b40 <TIM_OC2_SetConfig>:
{
 8002b40:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002b42:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b44:	6a02      	ldr	r2, [r0, #32]
 8002b46:	f022 0210 	bic.w	r2, r2, #16
 8002b4a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b4c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b4e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b50:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002b54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	680d      	ldr	r5, [r1, #0]
 8002b5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002b5e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b62:	688d      	ldr	r5, [r1, #8]
 8002b64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b68:	4d17      	ldr	r5, [pc, #92]	@ (8002bc8 <TIM_OC2_SetConfig+0x88>)
 8002b6a:	42a8      	cmp	r0, r5
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC2_SetConfig+0x36>
 8002b6e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002b72:	42a8      	cmp	r0, r5
 8002b74:	d106      	bne.n	8002b84 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b7a:	68cd      	ldr	r5, [r1, #12]
 8002b7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	4d10      	ldr	r5, [pc, #64]	@ (8002bc8 <TIM_OC2_SetConfig+0x88>)
 8002b86:	42a8      	cmp	r0, r5
 8002b88:	d00f      	beq.n	8002baa <TIM_OC2_SetConfig+0x6a>
 8002b8a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002b8e:	42a8      	cmp	r0, r5
 8002b90:	d00b      	beq.n	8002baa <TIM_OC2_SetConfig+0x6a>
 8002b92:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002b96:	42a8      	cmp	r0, r5
 8002b98:	d007      	beq.n	8002baa <TIM_OC2_SetConfig+0x6a>
 8002b9a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b9e:	42a8      	cmp	r0, r5
 8002ba0:	d003      	beq.n	8002baa <TIM_OC2_SetConfig+0x6a>
 8002ba2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002ba6:	42a8      	cmp	r0, r5
 8002ba8:	d107      	bne.n	8002bba <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002baa:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bae:	694c      	ldr	r4, [r1, #20]
 8002bb0:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb4:	698c      	ldr	r4, [r1, #24]
 8002bb6:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002bba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bbc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bbe:	684a      	ldr	r2, [r1, #4]
 8002bc0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002bc2:	6203      	str	r3, [r0, #32]
}
 8002bc4:	bc30      	pop	{r4, r5}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00

08002bcc <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002bcc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d036      	beq.n	8002c42 <HAL_TIM_OC_ConfigChannel+0x76>
{
 8002bd4:	b510      	push	{r4, lr}
 8002bd6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002bde:	2a14      	cmp	r2, #20
 8002be0:	d82a      	bhi.n	8002c38 <HAL_TIM_OC_ConfigChannel+0x6c>
 8002be2:	e8df f002 	tbb	[pc, r2]
 8002be6:	290b      	.short	0x290b
 8002be8:	29102929 	.word	0x29102929
 8002bec:	29152929 	.word	0x29152929
 8002bf0:	291a2929 	.word	0x291a2929
 8002bf4:	291f2929 	.word	0x291f2929
 8002bf8:	2929      	.short	0x2929
 8002bfa:	24          	.byte	0x24
 8002bfb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f7ff fcc9 	bl	8002594 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2000      	movs	r0, #0
      break;
 8002c04:	e019      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	f7ff ff9a 	bl	8002b40 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2000      	movs	r0, #0
      break;
 8002c0e:	e014      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c10:	6800      	ldr	r0, [r0, #0]
 8002c12:	f7ff fd0d 	bl	8002630 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2000      	movs	r0, #0
      break;
 8002c18:	e00f      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c1a:	6800      	ldr	r0, [r0, #0]
 8002c1c:	f7ff fd4e 	bl	80026bc <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2000      	movs	r0, #0
      break;
 8002c22:	e00a      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c24:	6800      	ldr	r0, [r0, #0]
 8002c26:	f7ff fd7f 	bl	8002728 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2000      	movs	r0, #0
      break;
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c2e:	6800      	ldr	r0, [r0, #0]
 8002c30:	f7ff fdae 	bl	8002790 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2000      	movs	r0, #0
      break;
 8002c36:	e000      	b.n	8002c3a <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8002c38:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002c40:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002c42:	2002      	movs	r0, #2
}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_PWM_ConfigChannel>:
{
 8002c46:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002c48:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	f000 8095 	beq.w	8002d7c <HAL_TIM_PWM_ConfigChannel+0x136>
 8002c52:	4604      	mov	r4, r0
 8002c54:	460d      	mov	r5, r1
 8002c56:	2301      	movs	r3, #1
 8002c58:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002c5c:	2a14      	cmp	r2, #20
 8002c5e:	f200 8088 	bhi.w	8002d72 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002c62:	e8df f002 	tbb	[pc, r2]
 8002c66:	860b      	.short	0x860b
 8002c68:	861f8686 	.word	0x861f8686
 8002c6c:	86348686 	.word	0x86348686
 8002c70:	86488686 	.word	0x86488686
 8002c74:	865d8686 	.word	0x865d8686
 8002c78:	8686      	.short	0x8686
 8002c7a:	71          	.byte	0x71
 8002c7b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f7ff fc89 	bl	8002594 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	6993      	ldr	r3, [r2, #24]
 8002c86:	f043 0308 	orr.w	r3, r3, #8
 8002c8a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c8c:	6822      	ldr	r2, [r4, #0]
 8002c8e:	6993      	ldr	r3, [r2, #24]
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	6993      	ldr	r3, [r2, #24]
 8002c9a:	6929      	ldr	r1, [r5, #16]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2000      	movs	r0, #0
      break;
 8002ca2:	e067      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ca4:	6800      	ldr	r0, [r0, #0]
 8002ca6:	f7ff ff4b 	bl	8002b40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	6993      	ldr	r3, [r2, #24]
 8002cae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	6993      	ldr	r3, [r2, #24]
 8002cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cbc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	6993      	ldr	r3, [r2, #24]
 8002cc2:	6929      	ldr	r1, [r5, #16]
 8002cc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cc8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2000      	movs	r0, #0
      break;
 8002ccc:	e052      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cce:	6800      	ldr	r0, [r0, #0]
 8002cd0:	f7ff fcae 	bl	8002630 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	69d3      	ldr	r3, [r2, #28]
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	69d3      	ldr	r3, [r2, #28]
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	69d3      	ldr	r3, [r2, #28]
 8002cec:	6929      	ldr	r1, [r5, #16]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2000      	movs	r0, #0
      break;
 8002cf4:	e03e      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cf6:	6800      	ldr	r0, [r0, #0]
 8002cf8:	f7ff fce0 	bl	80026bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfc:	6822      	ldr	r2, [r4, #0]
 8002cfe:	69d3      	ldr	r3, [r2, #28]
 8002d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d04:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	69d3      	ldr	r3, [r2, #28]
 8002d0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	69d3      	ldr	r3, [r2, #28]
 8002d14:	6929      	ldr	r1, [r5, #16]
 8002d16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d1a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2000      	movs	r0, #0
      break;
 8002d1e:	e029      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d20:	6800      	ldr	r0, [r0, #0]
 8002d22:	f7ff fd01 	bl	8002728 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d26:	6822      	ldr	r2, [r4, #0]
 8002d28:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d3e:	6929      	ldr	r1, [r5, #16]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2000      	movs	r0, #0
      break;
 8002d46:	e015      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d48:	6800      	ldr	r0, [r0, #0]
 8002d4a:	f7ff fd21 	bl	8002790 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d56:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d60:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002d66:	6929      	ldr	r1, [r5, #16]
 8002d68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d6c:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2000      	movs	r0, #0
      break;
 8002d70:	e000      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002d72:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002d74:	2300      	movs	r3, #0
 8002d76:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	e7fc      	b.n	8002d7a <HAL_TIM_PWM_ConfigChannel+0x134>

08002d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d80:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d82:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d84:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	6082      	str	r2, [r0, #8]
}
 8002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002d9c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d076      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xf6>
{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002da8:	2301      	movs	r3, #1
 8002daa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002dae:	2302      	movs	r3, #2
 8002db0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002db4:	6802      	ldr	r2, [r0, #0]
 8002db6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db8:	4b37      	ldr	r3, [pc, #220]	@ (8002e98 <HAL_TIM_ConfigClockSource+0xfc>)
 8002dba:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002dbc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002dbe:	680b      	ldr	r3, [r1, #0]
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d04c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xc2>
 8002dc4:	d823      	bhi.n	8002e0e <HAL_TIM_ConfigClockSource+0x72>
 8002dc6:	2b40      	cmp	r3, #64	@ 0x40
 8002dc8:	d054      	beq.n	8002e74 <HAL_TIM_ConfigClockSource+0xd8>
 8002dca:	d811      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x54>
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0x3c>
 8002dd0:	d80a      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x4c>
 8002dd2:	b10b      	cbz	r3, 8002dd8 <HAL_TIM_ConfigClockSource+0x3c>
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d105      	bne.n	8002de4 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	f7ff fd35 	bl	800284a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2000      	movs	r0, #0
      break;
 8002de2:	e028      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
 8002de6:	e026      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002de8:	2b30      	cmp	r3, #48	@ 0x30
 8002dea:	d0f5      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0x3c>
      status = HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e022      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002df0:	2b50      	cmp	r3, #80	@ 0x50
 8002df2:	d10a      	bne.n	8002e0a <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df4:	68ca      	ldr	r2, [r1, #12]
 8002df6:	6849      	ldr	r1, [r1, #4]
 8002df8:	6820      	ldr	r0, [r4, #0]
 8002dfa:	f7ff fcff 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dfe:	2150      	movs	r1, #80	@ 0x50
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	f7ff fd22 	bl	800284a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2000      	movs	r0, #0
      break;
 8002e08:	e015      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e013      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e12:	d03a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xee>
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e18:	d014      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0xa8>
 8002e1a:	2b70      	cmp	r3, #112	@ 0x70
 8002e1c:	d137      	bne.n	8002e8e <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8002e1e:	68cb      	ldr	r3, [r1, #12]
 8002e20:	684a      	ldr	r2, [r1, #4]
 8002e22:	6889      	ldr	r1, [r1, #8]
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	f7ff ffab 	bl	8002d80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e32:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e36:	2301      	movs	r3, #1
 8002e38:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002e42:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	68cb      	ldr	r3, [r1, #12]
 8002e46:	684a      	ldr	r2, [r1, #4]
 8002e48:	6889      	ldr	r1, [r1, #8]
 8002e4a:	6820      	ldr	r0, [r4, #0]
 8002e4c:	f7ff ff98 	bl	8002d80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	6893      	ldr	r3, [r2, #8]
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e58:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2000      	movs	r0, #0
      break;
 8002e5c:	e7eb      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5e:	68ca      	ldr	r2, [r1, #12]
 8002e60:	6849      	ldr	r1, [r1, #4]
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	f7ff fcdd 	bl	8002822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e68:	2160      	movs	r1, #96	@ 0x60
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	f7ff fced 	bl	800284a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2000      	movs	r0, #0
      break;
 8002e72:	e7e0      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e74:	68ca      	ldr	r2, [r1, #12]
 8002e76:	6849      	ldr	r1, [r1, #4]
 8002e78:	6820      	ldr	r0, [r4, #0]
 8002e7a:	f7ff fcbf 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e7e:	2140      	movs	r1, #64	@ 0x40
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	f7ff fce2 	bl	800284a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002e86:	2000      	movs	r0, #0
      break;
 8002e88:	e7d5      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e7d3      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002e8e:	2001      	movs	r0, #1
 8002e90:	e7d1      	b.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8002e92:	2002      	movs	r0, #2
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	ffce0088 	.word	0xffce0088

08002e9c <TIM_SlaveTimer_SetConfig>:
{
 8002e9c:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002e9e:	6804      	ldr	r4, [r0, #0]
 8002ea0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002ea6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002eaa:	684b      	ldr	r3, [r1, #4]
 8002eac:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb2:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002eb6:	680a      	ldr	r2, [r1, #0]
 8002eb8:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8002eba:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002ebc:	684b      	ldr	r3, [r1, #4]
 8002ebe:	2b50      	cmp	r3, #80	@ 0x50
 8002ec0:	d030      	beq.n	8002f24 <TIM_SlaveTimer_SetConfig+0x88>
 8002ec2:	d90b      	bls.n	8002edc <TIM_SlaveTimer_SetConfig+0x40>
 8002ec4:	2b60      	cmp	r3, #96	@ 0x60
 8002ec6:	d034      	beq.n	8002f32 <TIM_SlaveTimer_SetConfig+0x96>
 8002ec8:	2b70      	cmp	r3, #112	@ 0x70
 8002eca:	d143      	bne.n	8002f54 <TIM_SlaveTimer_SetConfig+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 8002ecc:	690b      	ldr	r3, [r1, #16]
 8002ece:	688a      	ldr	r2, [r1, #8]
 8002ed0:	68c9      	ldr	r1, [r1, #12]
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	f7ff ff54 	bl	8002d80 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2000      	movs	r0, #0
}
 8002eda:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8002edc:	2b40      	cmp	r3, #64	@ 0x40
 8002ede:	d00c      	beq.n	8002efa <TIM_SlaveTimer_SetConfig+0x5e>
 8002ee0:	d82e      	bhi.n	8002f40 <TIM_SlaveTimer_SetConfig+0xa4>
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d02e      	beq.n	8002f44 <TIM_SlaveTimer_SetConfig+0xa8>
 8002ee6:	d804      	bhi.n	8002ef2 <TIM_SlaveTimer_SetConfig+0x56>
 8002ee8:	b373      	cbz	r3, 8002f48 <TIM_SlaveTimer_SetConfig+0xac>
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d12e      	bne.n	8002f4c <TIM_SlaveTimer_SetConfig+0xb0>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e7f3      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
 8002ef2:	2b30      	cmp	r3, #48	@ 0x30
 8002ef4:	d12c      	bne.n	8002f50 <TIM_SlaveTimer_SetConfig+0xb4>
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e7ef      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d02b      	beq.n	8002f58 <TIM_SlaveTimer_SetConfig+0xbc>
      tmpccer = htim->Instance->CCER;
 8002f00:	6803      	ldr	r3, [r0, #0]
 8002f02:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002f0c:	6802      	ldr	r2, [r0, #0]
 8002f0e:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f14:	6909      	ldr	r1, [r1, #16]
 8002f16:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002f1a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8002f1c:	6803      	ldr	r3, [r0, #0]
 8002f1e:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2000      	movs	r0, #0
      break;
 8002f22:	e7da      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f24:	690a      	ldr	r2, [r1, #16]
 8002f26:	6889      	ldr	r1, [r1, #8]
 8002f28:	6800      	ldr	r0, [r0, #0]
 8002f2a:	f7ff fc67 	bl	80027fc <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2000      	movs	r0, #0
      break;
 8002f30:	e7d3      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f32:	690a      	ldr	r2, [r1, #16]
 8002f34:	6889      	ldr	r1, [r1, #8]
 8002f36:	6800      	ldr	r0, [r0, #0]
 8002f38:	f7ff fc73 	bl	8002822 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2000      	movs	r0, #0
      break;
 8002f3e:	e7cc      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
      status = HAL_ERROR;
 8002f40:	2001      	movs	r0, #1
 8002f42:	e7ca      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
  switch (sSlaveConfig->InputTrigger)
 8002f44:	2000      	movs	r0, #0
 8002f46:	e7c8      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e7c6      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
      status = HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7c4      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
 8002f50:	2001      	movs	r0, #1
 8002f52:	e7c2      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7c0      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>
        return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	e7be      	b.n	8002eda <TIM_SlaveTimer_SetConfig+0x3e>

08002f5c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002f5c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d022      	beq.n	8002faa <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002f74:	f7ff ff92 	bl	8002e9c <TIM_SlaveTimer_SetConfig>
 8002f78:	b980      	cbnz	r0, 8002f9c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	68d3      	ldr	r3, [r2, #12]
 8002f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f82:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002f84:	6822      	ldr	r2, [r4, #0]
 8002f86:	68d3      	ldr	r3, [r2, #12]
 8002f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f8c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002f94:	2300      	movs	r3, #0
 8002f96:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002f9a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002fa8:	e7f7      	b.n	8002f9a <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8002faa:	2002      	movs	r0, #2
}
 8002fac:	4770      	bx	lr

08002fae <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fae:	f001 011f 	and.w	r1, r1, #31
 8002fb2:	f04f 0c01 	mov.w	ip, #1
 8002fb6:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fba:	6a03      	ldr	r3, [r0, #32]
 8002fbc:	ea23 030c 	bic.w	r3, r3, ip
 8002fc0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fc2:	6a03      	ldr	r3, [r0, #32]
 8002fc4:	408a      	lsls	r2, r1
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	6203      	str	r3, [r0, #32]
}
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_PWM_Start>:
{
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd0:	2910      	cmp	r1, #16
 8002fd2:	d83c      	bhi.n	800304e <HAL_TIM_PWM_Start+0x82>
 8002fd4:	e8df f001 	tbb	[pc, r1]
 8002fd8:	3b3b3b09 	.word	0x3b3b3b09
 8002fdc:	3b3b3b1f 	.word	0x3b3b3b1f
 8002fe0:	3b3b3b26 	.word	0x3b3b3b26
 8002fe4:	3b3b3b2d 	.word	0x3b3b3b2d
 8002fe8:	34          	.byte	0x34
 8002fe9:	00          	.byte	0x00
 8002fea:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	bf18      	it	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 8092 	bne.w	8003120 <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffc:	2910      	cmp	r1, #16
 8002ffe:	d87d      	bhi.n	80030fc <HAL_TIM_PWM_Start+0x130>
 8003000:	e8df f001 	tbb	[pc, r1]
 8003004:	7c7c7c2c 	.word	0x7c7c7c2c
 8003008:	7c7c7c6c 	.word	0x7c7c7c6c
 800300c:	7c7c7c70 	.word	0x7c7c7c70
 8003010:	7c7c7c74 	.word	0x7c7c7c74
 8003014:	78          	.byte	0x78
 8003015:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003016:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800301a:	b2db      	uxtb	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	bf18      	it	ne
 8003020:	2301      	movne	r3, #1
 8003022:	e7e8      	b.n	8002ff6 <HAL_TIM_PWM_Start+0x2a>
 8003024:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	bf18      	it	ne
 800302e:	2301      	movne	r3, #1
 8003030:	e7e1      	b.n	8002ff6 <HAL_TIM_PWM_Start+0x2a>
 8003032:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	bf18      	it	ne
 800303c:	2301      	movne	r3, #1
 800303e:	e7da      	b.n	8002ff6 <HAL_TIM_PWM_Start+0x2a>
 8003040:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	bf18      	it	ne
 800304a:	2301      	movne	r3, #1
 800304c:	e7d3      	b.n	8002ff6 <HAL_TIM_PWM_Start+0x2a>
 800304e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	bf18      	it	ne
 8003058:	2301      	movne	r3, #1
 800305a:	e7cc      	b.n	8002ff6 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800305c:	2302      	movs	r3, #2
 800305e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003062:	2201      	movs	r2, #1
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	f7ff ffa2 	bl	8002fae <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <HAL_TIM_PWM_Start+0x160>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <HAL_TIM_PWM_Start+0xc6>
 8003072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <HAL_TIM_PWM_Start+0xc6>
 800307a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_TIM_PWM_Start+0xc6>
 8003082:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <HAL_TIM_PWM_Start+0xc6>
 800308a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800308e:	4293      	cmp	r3, r2
 8003090:	d103      	bne.n	800309a <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8003092:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003098:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	4a23      	ldr	r2, [pc, #140]	@ (800312c <HAL_TIM_PWM_Start+0x160>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d030      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a6:	d02d      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030a8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d029      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d025      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80030bc:	4293      	cmp	r3, r2
 80030be:	d021      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030c0:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d01d      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
 80030c8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d019      	beq.n	8003104 <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
 80030da:	e022      	b.n	8003122 <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030dc:	2302      	movs	r3, #2
 80030de:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80030e2:	e7be      	b.n	8003062 <HAL_TIM_PWM_Start+0x96>
 80030e4:	2302      	movs	r3, #2
 80030e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80030ea:	e7ba      	b.n	8003062 <HAL_TIM_PWM_Start+0x96>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80030f2:	e7b6      	b.n	8003062 <HAL_TIM_PWM_Start+0x96>
 80030f4:	2302      	movs	r3, #2
 80030f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030fa:	e7b2      	b.n	8003062 <HAL_TIM_PWM_Start+0x96>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003102:	e7ae      	b.n	8003062 <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_TIM_PWM_Start+0x164>)
 8003108:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310a:	2a06      	cmp	r2, #6
 800310c:	d00a      	beq.n	8003124 <HAL_TIM_PWM_Start+0x158>
 800310e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8003112:	d009      	beq.n	8003128 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800311c:	2000      	movs	r0, #0
 800311e:	e000      	b.n	8003122 <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003124:	2000      	movs	r0, #0
 8003126:	e7fc      	b.n	8003122 <HAL_TIM_PWM_Start+0x156>
 8003128:	2000      	movs	r0, #0
 800312a:	e7fa      	b.n	8003122 <HAL_TIM_PWM_Start+0x156>
 800312c:	40012c00 	.word	0x40012c00
 8003130:	00010007 	.word	0x00010007

08003134 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003134:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003138:	2a01      	cmp	r2, #1
 800313a:	d042      	beq.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 800313c:	b430      	push	{r4, r5}
 800313e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003140:	2201      	movs	r2, #1
 8003142:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003146:	2202      	movs	r2, #2
 8003148:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800314c:	6800      	ldr	r0, [r0, #0]
 800314e:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003152:	4d1d      	ldr	r5, [pc, #116]	@ (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8003154:	42a8      	cmp	r0, r5
 8003156:	d003      	beq.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8003158:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800315c:	42a8      	cmp	r0, r5
 800315e:	d103      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003160:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003164:	684d      	ldr	r5, [r1, #4]
 8003166:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003168:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800316c:	680d      	ldr	r5, [r1, #0]
 800316e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003170:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4814      	ldr	r0, [pc, #80]	@ (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8003176:	4282      	cmp	r2, r0
 8003178:	d016      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800317a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800317e:	d013      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003180:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003184:	4282      	cmp	r2, r0
 8003186:	d00f      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003188:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800318c:	4282      	cmp	r2, r0
 800318e:	d00b      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003190:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003194:	4282      	cmp	r2, r0
 8003196:	d007      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8003198:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 800319c:	4282      	cmp	r2, r0
 800319e:	d003      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80031a0:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 80031a4:	4282      	cmp	r2, r0
 80031a6:	d104      	bne.n	80031b2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ac:	6889      	ldr	r1, [r1, #8]
 80031ae:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031b0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031b8:	2000      	movs	r0, #0
 80031ba:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80031be:	bc30      	pop	{r4, r5}
 80031c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80031c2:	2002      	movs	r0, #2
}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00

080031cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031cc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	e852 3f00 	ldrex	r3, [r2]
 80031d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	e842 3100 	strex	r1, r3, [r2]
 80031da:	2900      	cmp	r1, #0
 80031dc:	d1f6      	bne.n	80031cc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	f102 0308 	add.w	r3, r2, #8
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	3208      	adds	r2, #8
 80031f2:	e842 3100 	strex	r1, r3, [r2]
 80031f6:	2900      	cmp	r1, #0
 80031f8:	d1f1      	bne.n	80031de <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d006      	beq.n	800320e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	2320      	movs	r3, #32
 8003202:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	2300      	movs	r3, #0
 8003208:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800320a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800320c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	e852 3f00 	ldrex	r3, [r2]
 8003214:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	e842 3100 	strex	r1, r3, [r2]
 800321c:	2900      	cmp	r1, #0
 800321e:	d1f6      	bne.n	800320e <UART_EndRxTransfer+0x42>
 8003220:	e7ee      	b.n	8003200 <UART_EndRxTransfer+0x34>

08003222 <HAL_UART_TxCpltCallback>:
}
 8003222:	4770      	bx	lr

08003224 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003224:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003226:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	e852 3f00 	ldrex	r3, [r2]
 800322c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	e842 3100 	strex	r1, r3, [r2]
 8003234:	2900      	cmp	r1, #0
 8003236:	d1f6      	bne.n	8003226 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003238:	2320      	movs	r3, #32
 800323a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003242:	f7ff ffee 	bl	8003222 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003246:	bd08      	pop	{r3, pc}

08003248 <HAL_UART_ErrorCallback>:
}
 8003248:	4770      	bx	lr

0800324a <UART_DMAAbortOnError>:
{
 800324a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800324c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8003254:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8003258:	f7ff fff6 	bl	8003248 <HAL_UART_ErrorCallback>
}
 800325c:	bd08      	pop	{r3, pc}

0800325e <HAL_UARTEx_RxEventCallback>:
}
 800325e:	4770      	bx	lr

08003260 <HAL_UART_IRQHandler>:
{
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003264:	6802      	ldr	r2, [r0, #0]
 8003266:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003268:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800326a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800326c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8003270:	ea13 0f0c 	tst.w	r3, ip
 8003274:	d10d      	bne.n	8003292 <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003276:	f013 0f20 	tst.w	r3, #32
 800327a:	d010      	beq.n	800329e <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800327c:	f010 0f20 	tst.w	r0, #32
 8003280:	d102      	bne.n	8003288 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003282:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8003286:	d00a      	beq.n	800329e <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8003288:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800328a:	b393      	cbz	r3, 80032f2 <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 800328c:	4620      	mov	r0, r4
 800328e:	4798      	blx	r3
      return;
 8003290:	e02f      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003292:	4db4      	ldr	r5, [pc, #720]	@ (8003564 <HAL_UART_IRQHandler+0x304>)
 8003294:	400d      	ands	r5, r1
 8003296:	d12d      	bne.n	80032f4 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003298:	4eb3      	ldr	r6, [pc, #716]	@ (8003568 <HAL_UART_IRQHandler+0x308>)
 800329a:	4230      	tst	r0, r6
 800329c:	d12a      	bne.n	80032f4 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 80032a0:	2d01      	cmp	r5, #1
 80032a2:	f000 80c0 	beq.w	8003426 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032a6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80032aa:	d003      	beq.n	80032b4 <HAL_UART_IRQHandler+0x54>
 80032ac:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80032b0:	f040 815e 	bne.w	8003570 <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80032b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032b8:	d007      	beq.n	80032ca <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80032ba:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80032be:	f040 815e 	bne.w	800357e <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80032c2:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 80032c6:	f040 815a 	bne.w	800357e <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032ca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80032ce:	d003      	beq.n	80032d8 <HAL_UART_IRQHandler+0x78>
 80032d0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80032d4:	f040 815a 	bne.w	800358c <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80032d8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_IRQHandler+0x86>
 80032de:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 80032e2:	f040 8157 	bne.w	8003594 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80032e6:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_IRQHandler+0x92>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f2c0 8155 	blt.w	800359c <HAL_UART_IRQHandler+0x33c>
}
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f4:	f013 0f01 	tst.w	r3, #1
 80032f8:	d009      	beq.n	800330e <HAL_UART_IRQHandler+0xae>
 80032fa:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80032fe:	d006      	beq.n	800330e <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003300:	2601      	movs	r6, #1
 8003302:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003304:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003308:	4332      	orrs	r2, r6
 800330a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330e:	f013 0f02 	tst.w	r3, #2
 8003312:	d00b      	beq.n	800332c <HAL_UART_IRQHandler+0xcc>
 8003314:	f011 0f01 	tst.w	r1, #1
 8003318:	d008      	beq.n	800332c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	2602      	movs	r6, #2
 800331e:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003320:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003324:	f042 0204 	orr.w	r2, r2, #4
 8003328:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800332c:	f013 0f04 	tst.w	r3, #4
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0xea>
 8003332:	f011 0f01 	tst.w	r1, #1
 8003336:	d008      	beq.n	800334a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	2604      	movs	r6, #4
 800333c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800333e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003342:	f042 0202 	orr.w	r2, r2, #2
 8003346:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800334a:	f013 0f08 	tst.w	r3, #8
 800334e:	d00b      	beq.n	8003368 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003350:	f010 0f20 	tst.w	r0, #32
 8003354:	d100      	bne.n	8003358 <HAL_UART_IRQHandler+0xf8>
 8003356:	b13d      	cbz	r5, 8003368 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	2508      	movs	r5, #8
 800335c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800335e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003362:	432a      	orrs	r2, r5
 8003364:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003368:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800336c:	d00c      	beq.n	8003388 <HAL_UART_IRQHandler+0x128>
 800336e:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8003372:	d009      	beq.n	8003388 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800337a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800337c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8003380:	f042 0220 	orr.w	r2, r2, #32
 8003384:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003388:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800338c:	2a00      	cmp	r2, #0
 800338e:	d0b0      	beq.n	80032f2 <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003390:	f013 0f20 	tst.w	r3, #32
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003396:	f010 0f20 	tst.w	r0, #32
 800339a:	d102      	bne.n	80033a2 <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800339c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 80033a0:	d003      	beq.n	80033aa <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 80033a2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80033a4:	b10b      	cbz	r3, 80033aa <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 80033a6:	4620      	mov	r0, r4
 80033a8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80033aa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80033b6:	d102      	bne.n	80033be <HAL_UART_IRQHandler+0x15e>
 80033b8:	f012 0f28 	tst.w	r2, #40	@ 0x28
 80033bc:	d02c      	beq.n	8003418 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff ff04 	bl	80031cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80033cc:	d020      	beq.n	8003410 <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	f102 0308 	add.w	r3, r2, #8
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	3208      	adds	r2, #8
 80033de:	e842 3100 	strex	r1, r3, [r2]
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d1f3      	bne.n	80033ce <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 80033e6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80033ea:	b16b      	cbz	r3, 8003408 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ec:	4a5f      	ldr	r2, [pc, #380]	@ (800356c <HAL_UART_IRQHandler+0x30c>)
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80033f4:	f7fd fd88 	bl	8000f08 <HAL_DMA_Abort_IT>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	f43f af7a 	beq.w	80032f2 <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8003402:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003404:	4798      	blx	r3
 8003406:	e774      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8003408:	4620      	mov	r0, r4
 800340a:	f7ff ff1d 	bl	8003248 <HAL_UART_ErrorCallback>
 800340e:	e770      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff ff19 	bl	8003248 <HAL_UART_ErrorCallback>
 8003416:	e76c      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff ff15 	bl	8003248 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8003424:	e765      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003426:	f013 0f10 	tst.w	r3, #16
 800342a:	f43f af3c 	beq.w	80032a6 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800342e:	f010 0f10 	tst.w	r0, #16
 8003432:	f43f af38 	beq.w	80032a6 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003436:	2310      	movs	r3, #16
 8003438:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003442:	d053      	beq.n	80034ec <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003444:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8003448:	6813      	ldr	r3, [r2, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800344e:	2b00      	cmp	r3, #0
 8003450:	f43f af4f 	beq.w	80032f2 <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003454:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8003458:	4299      	cmp	r1, r3
 800345a:	f67f af4a 	bls.w	80032f2 <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800345e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f013 0f20 	tst.w	r3, #32
 800346a:	d132      	bne.n	80034d2 <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	e852 3f00 	ldrex	r3, [r2]
 8003472:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	e842 3100 	strex	r1, r3, [r2]
 800347a:	2900      	cmp	r1, #0
 800347c:	d1f6      	bne.n	800346c <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	f102 0308 	add.w	r3, r2, #8
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	3208      	adds	r2, #8
 800348e:	e842 3100 	strex	r1, r3, [r2]
 8003492:	2900      	cmp	r1, #0
 8003494:	d1f3      	bne.n	800347e <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	f102 0308 	add.w	r3, r2, #8
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	3208      	adds	r2, #8
 80034a6:	e842 3100 	strex	r1, r3, [r2]
 80034aa:	2900      	cmp	r1, #0
 80034ac:	d1f3      	bne.n	8003496 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 80034ae:	2320      	movs	r3, #32
 80034b0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	2300      	movs	r3, #0
 80034b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	e852 3f00 	ldrex	r3, [r2]
 80034be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	e842 3100 	strex	r1, r3, [r2]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d1f6      	bne.n	80034b8 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80034ce:	f7fd fce5 	bl	8000e9c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d2:	2302      	movs	r3, #2
 80034d4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80034da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	1ac9      	subs	r1, r1, r3
 80034e2:	b289      	uxth	r1, r1
 80034e4:	4620      	mov	r0, r4
 80034e6:	f7ff feba 	bl	800325e <HAL_UARTEx_RxEventCallback>
      return;
 80034ea:	e702      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80034f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ac9      	subs	r1, r1, r3
 80034f8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80034fa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	f43f aef6 	beq.w	80032f2 <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 8003506:	2900      	cmp	r1, #0
 8003508:	f43f aef3 	beq.w	80032f2 <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800350c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	e852 3f00 	ldrex	r3, [r2]
 8003512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	e842 3000 	strex	r0, r3, [r2]
 800351a:	2800      	cmp	r0, #0
 800351c:	d1f6      	bne.n	800350c <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800351e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	f102 0308 	add.w	r3, r2, #8
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	3208      	adds	r2, #8
 8003532:	e842 3000 	strex	r0, r3, [r2]
 8003536:	2800      	cmp	r0, #0
 8003538:	d1f1      	bne.n	800351e <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800353a:	2320      	movs	r3, #32
 800353c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003540:	2300      	movs	r3, #0
 8003542:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003544:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003546:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	e852 3f00 	ldrex	r3, [r2]
 800354c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	e842 3000 	strex	r0, r3, [r2]
 8003554:	2800      	cmp	r0, #0
 8003556:	d1f6      	bne.n	8003546 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003558:	2302      	movs	r3, #2
 800355a:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff fe7e 	bl	800325e <HAL_UARTEx_RxEventCallback>
      return;
 8003562:	e6c6      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
 8003564:	10000001 	.word	0x10000001
 8003568:	04000120 	.word	0x04000120
 800356c:	0800324b 	.word	0x0800324b
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003570:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003574:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003576:	4620      	mov	r0, r4
 8003578:	f000 ff20 	bl	80043bc <HAL_UARTEx_WakeupCallback>
    return;
 800357c:	e6b9      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800357e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003580:	2b00      	cmp	r3, #0
 8003582:	f43f aeb6 	beq.w	80032f2 <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8003586:	4620      	mov	r0, r4
 8003588:	4798      	blx	r3
    return;
 800358a:	e6b2      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff fe49 	bl	8003224 <UART_EndTransmit_IT>
    return;
 8003592:	e6ae      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003594:	4620      	mov	r0, r4
 8003596:	f000 ff13 	bl	80043c0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800359a:	e6aa      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800359c:	4620      	mov	r0, r4
 800359e:	f000 ff0e 	bl	80043be <HAL_UARTEx_RxFifoFullCallback>
    return;
 80035a2:	e6a6      	b.n	80032f2 <HAL_UART_IRQHandler+0x92>

080035a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035a4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80035a6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035aa:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80035ae:	2a22      	cmp	r2, #34	@ 0x22
 80035b0:	d005      	beq.n	80035be <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035b2:	6802      	ldr	r2, [r0, #0]
 80035b4:	6993      	ldr	r3, [r2, #24]
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	6193      	str	r3, [r2, #24]
  }
}
 80035bc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80035c6:	400b      	ands	r3, r1
 80035c8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80035ca:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80035cc:	3301      	adds	r3, #1
 80035ce:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80035d0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80035de:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e9      	bne.n	80035bc <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035e8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	e852 3f00 	ldrex	r3, [r2]
 80035ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	e842 3100 	strex	r1, r3, [r2]
 80035f6:	2900      	cmp	r1, #0
 80035f8:	d1f6      	bne.n	80035e8 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	f102 0308 	add.w	r3, r2, #8
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	3208      	adds	r2, #8
 800360a:	e842 3100 	strex	r1, r3, [r2]
 800360e:	2900      	cmp	r1, #0
 8003610:	d1f3      	bne.n	80035fa <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8003612:	2320      	movs	r3, #32
 8003614:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361c:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800361e:	6803      	ldr	r3, [r0, #0]
 8003620:	4a16      	ldr	r2, [pc, #88]	@ (800367c <UART_RxISR_8BIT+0xd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00c      	beq.n	8003640 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800362c:	d008      	beq.n	8003640 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800362e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	e852 3f00 	ldrex	r3, [r2]
 8003634:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	e842 3100 	strex	r1, r3, [r2]
 800363c:	2900      	cmp	r1, #0
 800363e:	d1f6      	bne.n	800362e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003640:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d116      	bne.n	8003674 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	2300      	movs	r3, #0
 8003648:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	e852 3f00 	ldrex	r3, [r2]
 8003650:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	e842 3100 	strex	r1, r3, [r2]
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f6      	bne.n	800364a <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800365c:	6803      	ldr	r3, [r0, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	f012 0f10 	tst.w	r2, #16
 8003664:	d001      	beq.n	800366a <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003666:	2210      	movs	r2, #16
 8003668:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800366a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800366e:	f7ff fdf6 	bl	800325e <HAL_UARTEx_RxEventCallback>
 8003672:	e7a3      	b.n	80035bc <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8003674:	f7fc ffe0 	bl	8000638 <HAL_UART_RxCpltCallback>
 8003678:	e7a0      	b.n	80035bc <UART_RxISR_8BIT+0x18>
 800367a:	bf00      	nop
 800367c:	40008000 	.word	0x40008000

08003680 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003680:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003682:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003686:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800368a:	2b22      	cmp	r3, #34	@ 0x22
 800368c:	d005      	beq.n	800369a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800368e:	6802      	ldr	r2, [r0, #0]
 8003690:	6993      	ldr	r3, [r2, #24]
 8003692:	f043 0308 	orr.w	r3, r3, #8
 8003696:	6193      	str	r3, [r2, #24]
  }
}
 8003698:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800369e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80036a0:	4013      	ands	r3, r2
 80036a2:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80036a4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80036a6:	3302      	adds	r3, #2
 80036a8:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80036aa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80036b8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ea      	bne.n	8003698 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	e852 3f00 	ldrex	r3, [r2]
 80036c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	e842 3100 	strex	r1, r3, [r2]
 80036d0:	2900      	cmp	r1, #0
 80036d2:	d1f6      	bne.n	80036c2 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	f102 0308 	add.w	r3, r2, #8
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	3208      	adds	r2, #8
 80036e4:	e842 3100 	strex	r1, r3, [r2]
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d1f3      	bne.n	80036d4 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80036ec:	2320      	movs	r3, #32
 80036ee:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f6:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036f8:	6803      	ldr	r3, [r0, #0]
 80036fa:	4a16      	ldr	r2, [pc, #88]	@ (8003754 <UART_RxISR_16BIT+0xd4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00c      	beq.n	800371a <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003706:	d008      	beq.n	800371a <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003708:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	e852 3f00 	ldrex	r3, [r2]
 800370e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	e842 3100 	strex	r1, r3, [r2]
 8003716:	2900      	cmp	r1, #0
 8003718:	d1f6      	bne.n	8003708 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d116      	bne.n	800374e <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003720:	2300      	movs	r3, #0
 8003722:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003724:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	e852 3f00 	ldrex	r3, [r2]
 800372a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	e842 3100 	strex	r1, r3, [r2]
 8003732:	2900      	cmp	r1, #0
 8003734:	d1f6      	bne.n	8003724 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003736:	6803      	ldr	r3, [r0, #0]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	f012 0f10 	tst.w	r2, #16
 800373e:	d001      	beq.n	8003744 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003740:	2210      	movs	r2, #16
 8003742:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003744:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8003748:	f7ff fd89 	bl	800325e <HAL_UARTEx_RxEventCallback>
 800374c:	e7a4      	b.n	8003698 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800374e:	f7fc ff73 	bl	8000638 <HAL_UART_RxCpltCallback>
 8003752:	e7a1      	b.n	8003698 <UART_RxISR_16BIT+0x18>
 8003754:	40008000 	.word	0x40008000

08003758 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800375c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003760:	6803      	ldr	r3, [r0, #0]
 8003762:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003764:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003768:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800376c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8003770:	2a22      	cmp	r2, #34	@ 0x22
 8003772:	d005      	beq.n	8003780 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	619a      	str	r2, [r3, #24]
  }
}
 800377c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003780:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8003782:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003786:	e008      	b.n	800379a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003788:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800378c:	2b00      	cmp	r3, #0
 800378e:	d14c      	bne.n	800382a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8003790:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04e      	beq.n	8003838 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800379a:	2f00      	cmp	r7, #0
 800379c:	f000 809a 	beq.w	80038d4 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80037a0:	f015 0f20 	tst.w	r5, #32
 80037a4:	f000 8096 	beq.w	80038d4 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037ac:	b2f3      	uxtb	r3, r6
 80037ae:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80037b0:	400b      	ands	r3, r1
 80037b2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80037b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037b6:	3301      	adds	r3, #1
 80037b8:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80037ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037cc:	f015 0f07 	tst.w	r5, #7
 80037d0:	d0de      	beq.n	8003790 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037d2:	f015 0f01 	tst.w	r5, #1
 80037d6:	d009      	beq.n	80037ec <UART_RxISR_8BIT_FIFOEN+0x94>
 80037d8:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80037dc:	d006      	beq.n	80037ec <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037de:	2201      	movs	r2, #1
 80037e0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ec:	f015 0f02 	tst.w	r5, #2
 80037f0:	d00b      	beq.n	800380a <UART_RxISR_8BIT_FIFOEN+0xb2>
 80037f2:	f018 0f01 	tst.w	r8, #1
 80037f6:	d008      	beq.n	800380a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	2202      	movs	r2, #2
 80037fc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800380a:	f015 0f04 	tst.w	r5, #4
 800380e:	d0bb      	beq.n	8003788 <UART_RxISR_8BIT_FIFOEN+0x30>
 8003810:	f018 0f01 	tst.w	r8, #1
 8003814:	d0b8      	beq.n	8003788 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	2204      	movs	r2, #4
 800381a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800381c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8003828:	e7ae      	b.n	8003788 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fd0c 	bl	8003248 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8003836:	e7ab      	b.n	8003790 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003838:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	e852 3f00 	ldrex	r3, [r2]
 800383e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	e842 3100 	strex	r1, r3, [r2]
 8003846:	2900      	cmp	r1, #0
 8003848:	d1f6      	bne.n	8003838 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800384a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	f102 0308 	add.w	r3, r2, #8
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003858:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	3208      	adds	r2, #8
 800385e:	e842 3100 	strex	r1, r3, [r2]
 8003862:	2900      	cmp	r1, #0
 8003864:	d1f1      	bne.n	800384a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	2320      	movs	r3, #32
 8003868:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003870:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	4a29      	ldr	r2, [pc, #164]	@ (800391c <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003880:	d106      	bne.n	8003890 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003882:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d00d      	beq.n	80038a4 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8003888:	4620      	mov	r0, r4
 800388a:	f7fc fed5 	bl	8000638 <HAL_UART_RxCpltCallback>
 800388e:	e784      	b.n	800379a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003890:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	e852 3f00 	ldrex	r3, [r2]
 8003896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	e842 3100 	strex	r1, r3, [r2]
 800389e:	2900      	cmp	r1, #0
 80038a0:	d1f6      	bne.n	8003890 <UART_RxISR_8BIT_FIFOEN+0x138>
 80038a2:	e7ee      	b.n	8003882 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	2300      	movs	r3, #0
 80038a6:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	e852 3f00 	ldrex	r3, [r2]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	e842 3100 	strex	r1, r3, [r2]
 80038b6:	2900      	cmp	r1, #0
 80038b8:	d1f6      	bne.n	80038a8 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	f012 0f10 	tst.w	r2, #16
 80038c2:	d001      	beq.n	80038c8 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038c4:	2210      	movs	r2, #16
 80038c6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fcc6 	bl	800325e <HAL_UARTEx_RxEventCallback>
 80038d2:	e762      	b.n	800379a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80038d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80038d8:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f43f af4e 	beq.w	800377c <UART_RxISR_8BIT_FIFOEN+0x24>
 80038e0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f67f af49 	bls.w	800377c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80038ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	f102 0308 	add.w	r3, r2, #8
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	3208      	adds	r2, #8
 80038fa:	e842 3100 	strex	r1, r3, [r2]
 80038fe:	2900      	cmp	r1, #0
 8003900:	d1f3      	bne.n	80038ea <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8003902:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8003904:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003906:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	e852 3f00 	ldrex	r3, [r2]
 800390c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	e842 3100 	strex	r1, r3, [r2]
 8003914:	2900      	cmp	r1, #0
 8003916:	d1f6      	bne.n	8003906 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8003918:	e730      	b.n	800377c <UART_RxISR_8BIT_FIFOEN+0x24>
 800391a:	bf00      	nop
 800391c:	40008000 	.word	0x40008000
 8003920:	080035a5 	.word	0x080035a5

08003924 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003928:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800392c:	6803      	ldr	r3, [r0, #0]
 800392e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003930:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003934:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003938:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800393c:	2a22      	cmp	r2, #34	@ 0x22
 800393e:	d005      	beq.n	800394c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	619a      	str	r2, [r3, #24]
  }
}
 8003948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800394e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003952:	e008      	b.n	8003966 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003954:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8003958:	2b00      	cmp	r3, #0
 800395a:	d14b      	bne.n	80039f4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800395c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04d      	beq.n	8003a02 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003966:	2f00      	cmp	r7, #0
 8003968:	f000 8099 	beq.w	8003a9e <UART_RxISR_16BIT_FIFOEN+0x17a>
 800396c:	f015 0f20 	tst.w	r5, #32
 8003970:	f000 8095 	beq.w	8003a9e <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003978:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800397a:	4033      	ands	r3, r6
 800397c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800397e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003980:	3302      	adds	r3, #2
 8003982:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8003984:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003996:	f015 0f07 	tst.w	r5, #7
 800399a:	d0df      	beq.n	800395c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800399c:	f015 0f01 	tst.w	r5, #1
 80039a0:	d009      	beq.n	80039b6 <UART_RxISR_16BIT_FIFOEN+0x92>
 80039a2:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80039a6:	d006      	beq.n	80039b6 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039a8:	2201      	movs	r2, #1
 80039aa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039b6:	f015 0f02 	tst.w	r5, #2
 80039ba:	d00b      	beq.n	80039d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80039bc:	f018 0f01 	tst.w	r8, #1
 80039c0:	d008      	beq.n	80039d4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	2202      	movs	r2, #2
 80039c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d4:	f015 0f04 	tst.w	r5, #4
 80039d8:	d0bc      	beq.n	8003954 <UART_RxISR_16BIT_FIFOEN+0x30>
 80039da:	f018 0f01 	tst.w	r8, #1
 80039de:	d0b9      	beq.n	8003954 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80039f2:	e7af      	b.n	8003954 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7ff fc27 	bl	8003248 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8003a00:	e7ac      	b.n	800395c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a02:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	e852 3f00 	ldrex	r3, [r2]
 8003a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	e842 3100 	strex	r1, r3, [r2]
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d1f6      	bne.n	8003a02 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	f102 0308 	add.w	r3, r2, #8
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	3208      	adds	r2, #8
 8003a28:	e842 3100 	strex	r1, r3, [r2]
 8003a2c:	2900      	cmp	r1, #0
 8003a2e:	d1f1      	bne.n	8003a14 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8003a30:	2320      	movs	r3, #32
 8003a32:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3a:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ae4 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003a4a:	d106      	bne.n	8003a5a <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00d      	beq.n	8003a6e <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8003a52:	4620      	mov	r0, r4
 8003a54:	f7fc fdf0 	bl	8000638 <HAL_UART_RxCpltCallback>
 8003a58:	e785      	b.n	8003966 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	e852 3f00 	ldrex	r3, [r2]
 8003a60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	e842 3100 	strex	r1, r3, [r2]
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d1f6      	bne.n	8003a5a <UART_RxISR_16BIT_FIFOEN+0x136>
 8003a6c:	e7ee      	b.n	8003a4c <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	e852 3f00 	ldrex	r3, [r2]
 8003a78:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	e842 3100 	strex	r1, r3, [r2]
 8003a80:	2900      	cmp	r1, #0
 8003a82:	d1f6      	bne.n	8003a72 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	f012 0f10 	tst.w	r2, #16
 8003a8c:	d001      	beq.n	8003a92 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a8e:	2210      	movs	r2, #16
 8003a90:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a92:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff fbe1 	bl	800325e <HAL_UARTEx_RxEventCallback>
 8003a9c:	e763      	b.n	8003966 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8003a9e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003aa2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f43f af4f 	beq.w	8003948 <UART_RxISR_16BIT_FIFOEN+0x24>
 8003aaa:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f67f af4a 	bls.w	8003948 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ab4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	f102 0308 	add.w	r3, r2, #8
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	e842 3100 	strex	r1, r3, [r2]
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d1f3      	bne.n	8003ab4 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8003ace:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ad0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	e852 3f00 	ldrex	r3, [r2]
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	e842 3100 	strex	r1, r3, [r2]
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	d1f6      	bne.n	8003ad0 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8003ae2:	e731      	b.n	8003948 <UART_RxISR_16BIT_FIFOEN+0x24>
 8003ae4:	40008000 	.word	0x40008000
 8003ae8:	08003681 	.word	0x08003681

08003aec <UART_SetConfig>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af0:	6883      	ldr	r3, [r0, #8]
 8003af2:	6902      	ldr	r2, [r0, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	6942      	ldr	r2, [r0, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	69c2      	ldr	r2, [r0, #28]
 8003afc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afe:	6801      	ldr	r1, [r0, #0]
 8003b00:	6808      	ldr	r0, [r1, #0]
 8003b02:	4a98      	ldr	r2, [pc, #608]	@ (8003d64 <UART_SetConfig+0x278>)
 8003b04:	4002      	ands	r2, r0
 8003b06:	431a      	orrs	r2, r3
 8003b08:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	6853      	ldr	r3, [r2, #4]
 8003b0e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b12:	68e1      	ldr	r1, [r4, #12]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b18:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	4b92      	ldr	r3, [pc, #584]	@ (8003d68 <UART_SetConfig+0x27c>)
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8003b22:	6a23      	ldr	r3, [r4, #32]
 8003b24:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b26:	6893      	ldr	r3, [r2, #8]
 8003b28:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b2c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b38:	f023 030f 	bic.w	r3, r3, #15
 8003b3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	4a89      	ldr	r2, [pc, #548]	@ (8003d6c <UART_SetConfig+0x280>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d026      	beq.n	8003b98 <UART_SetConfig+0xac>
 8003b4a:	4a89      	ldr	r2, [pc, #548]	@ (8003d70 <UART_SetConfig+0x284>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d037      	beq.n	8003bc0 <UART_SetConfig+0xd4>
 8003b50:	4a88      	ldr	r2, [pc, #544]	@ (8003d74 <UART_SetConfig+0x288>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d04d      	beq.n	8003bf2 <UART_SetConfig+0x106>
 8003b56:	4a88      	ldr	r2, [pc, #544]	@ (8003d78 <UART_SetConfig+0x28c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d05d      	beq.n	8003c18 <UART_SetConfig+0x12c>
 8003b5c:	4a87      	ldr	r2, [pc, #540]	@ (8003d7c <UART_SetConfig+0x290>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d06c      	beq.n	8003c3c <UART_SetConfig+0x150>
 8003b62:	4a81      	ldr	r2, [pc, #516]	@ (8003d68 <UART_SetConfig+0x27c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d07e      	beq.n	8003c66 <UART_SetConfig+0x17a>
 8003b68:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b6a:	497f      	ldr	r1, [pc, #508]	@ (8003d68 <UART_SetConfig+0x27c>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	f000 80b3 	beq.w	8003cd8 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b72:	69e0      	ldr	r0, [r4, #28]
 8003b74:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003b78:	f000 8108 	beq.w	8003d8c <UART_SetConfig+0x2a0>
    switch (clocksource)
 8003b7c:	2a08      	cmp	r2, #8
 8003b7e:	f200 8173 	bhi.w	8003e68 <UART_SetConfig+0x37c>
 8003b82:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003b86:	0136      	.short	0x0136
 8003b88:	01340158 	.word	0x01340158
 8003b8c:	015b0171 	.word	0x015b0171
 8003b90:	01710171 	.word	0x01710171
 8003b94:	015e0171 	.word	0x015e0171
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b98:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8003b9c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003ba0:	f002 0203 	and.w	r2, r2, #3
 8003ba4:	2a03      	cmp	r2, #3
 8003ba6:	d809      	bhi.n	8003bbc <UART_SetConfig+0xd0>
 8003ba8:	e8df f002 	tbb	[pc, r2]
 8003bac:	06720402 	.word	0x06720402
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	e7da      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	e7d8      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bb8:	2208      	movs	r2, #8
 8003bba:	e7d6      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	e7d4      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bc0:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8003bc4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003bc8:	f002 020c 	and.w	r2, r2, #12
 8003bcc:	2a0c      	cmp	r2, #12
 8003bce:	d80e      	bhi.n	8003bee <UART_SetConfig+0x102>
 8003bd0:	e8df f002 	tbb	[pc, r2]
 8003bd4:	0d0d0d07 	.word	0x0d0d0d07
 8003bd8:	0d0d0d09 	.word	0x0d0d0d09
 8003bdc:	0d0d0d60 	.word	0x0d0d0d60
 8003be0:	0b          	.byte	0x0b
 8003be1:	00          	.byte	0x00
 8003be2:	2200      	movs	r2, #0
 8003be4:	e7c1      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003be6:	2204      	movs	r2, #4
 8003be8:	e7bf      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bea:	2208      	movs	r2, #8
 8003bec:	e7bd      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bee:	2210      	movs	r2, #16
 8003bf0:	e7bb      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003bf2:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8003bf6:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003bfa:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8003bfe:	2a20      	cmp	r2, #32
 8003c00:	d04a      	beq.n	8003c98 <UART_SetConfig+0x1ac>
 8003c02:	d805      	bhi.n	8003c10 <UART_SetConfig+0x124>
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d049      	beq.n	8003c9c <UART_SetConfig+0x1b0>
 8003c08:	2a10      	cmp	r2, #16
 8003c0a:	d149      	bne.n	8003ca0 <UART_SetConfig+0x1b4>
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	e7ac      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c10:	2a30      	cmp	r2, #48	@ 0x30
 8003c12:	d147      	bne.n	8003ca4 <UART_SetConfig+0x1b8>
 8003c14:	2208      	movs	r2, #8
 8003c16:	e7a8      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c18:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 8003c1c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003c20:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8003c24:	2a80      	cmp	r2, #128	@ 0x80
 8003c26:	d03f      	beq.n	8003ca8 <UART_SetConfig+0x1bc>
 8003c28:	d804      	bhi.n	8003c34 <UART_SetConfig+0x148>
 8003c2a:	b3fa      	cbz	r2, 8003cac <UART_SetConfig+0x1c0>
 8003c2c:	2a40      	cmp	r2, #64	@ 0x40
 8003c2e:	d13f      	bne.n	8003cb0 <UART_SetConfig+0x1c4>
 8003c30:	2204      	movs	r2, #4
 8003c32:	e79a      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c34:	2ac0      	cmp	r2, #192	@ 0xc0
 8003c36:	d13d      	bne.n	8003cb4 <UART_SetConfig+0x1c8>
 8003c38:	2208      	movs	r2, #8
 8003c3a:	e796      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c3c:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8003c40:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003c44:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003c48:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8003c4c:	d034      	beq.n	8003cb8 <UART_SetConfig+0x1cc>
 8003c4e:	d805      	bhi.n	8003c5c <UART_SetConfig+0x170>
 8003c50:	b3a2      	cbz	r2, 8003cbc <UART_SetConfig+0x1d0>
 8003c52:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8003c56:	d133      	bne.n	8003cc0 <UART_SetConfig+0x1d4>
 8003c58:	2204      	movs	r2, #4
 8003c5a:	e786      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c5c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003c60:	d130      	bne.n	8003cc4 <UART_SetConfig+0x1d8>
 8003c62:	2208      	movs	r2, #8
 8003c64:	e781      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c66:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 8003c6a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003c6e:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8003c72:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8003c76:	d027      	beq.n	8003cc8 <UART_SetConfig+0x1dc>
 8003c78:	d805      	bhi.n	8003c86 <UART_SetConfig+0x19a>
 8003c7a:	b33a      	cbz	r2, 8003ccc <UART_SetConfig+0x1e0>
 8003c7c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003c80:	d126      	bne.n	8003cd0 <UART_SetConfig+0x1e4>
 8003c82:	2204      	movs	r2, #4
 8003c84:	e771      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c86:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8003c8a:	d123      	bne.n	8003cd4 <UART_SetConfig+0x1e8>
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	e76c      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c90:	2202      	movs	r2, #2
 8003c92:	e76a      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c94:	2202      	movs	r2, #2
 8003c96:	e768      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c98:	2202      	movs	r2, #2
 8003c9a:	e766      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	e764      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	e762      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	e760      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003ca8:	2202      	movs	r2, #2
 8003caa:	e75e      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cac:	2200      	movs	r2, #0
 8003cae:	e75c      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	e75a      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	e758      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cb8:	2202      	movs	r2, #2
 8003cba:	e756      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	e754      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	e752      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	e750      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cc8:	2202      	movs	r2, #2
 8003cca:	e74e      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	e74c      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	e74a      	b.n	8003b6a <UART_SetConfig+0x7e>
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	e748      	b.n	8003b6a <UART_SetConfig+0x7e>
    switch (clocksource)
 8003cd8:	2a08      	cmp	r2, #8
 8003cda:	f200 80b5 	bhi.w	8003e48 <UART_SetConfig+0x35c>
 8003cde:	e8df f002 	tbb	[pc, r2]
 8003ce2:	3808      	.short	0x3808
 8003ce4:	b33bb33e 	.word	0xb33bb33e
 8003ce8:	b3b3      	.short	0xb3b3
 8003cea:	05          	.byte	0x05
 8003ceb:	00          	.byte	0x00
 8003cec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003cf0:	e004      	b.n	8003cfc <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7fe f873 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	f000 80a8 	beq.w	8003e4c <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cfc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cfe:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <UART_SetConfig+0x294>)
 8003d00:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003d04:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d08:	6865      	ldr	r5, [r4, #4]
 8003d0a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8003d0e:	4299      	cmp	r1, r3
 8003d10:	f200 809e 	bhi.w	8003e50 <UART_SetConfig+0x364>
 8003d14:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003d18:	f200 809c 	bhi.w	8003e54 <UART_SetConfig+0x368>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	4633      	mov	r3, r6
 8003d20:	4631      	mov	r1, r6
 8003d22:	f7fc fa8f 	bl	8000244 <__aeabi_uldivmod>
 8003d26:	0209      	lsls	r1, r1, #8
 8003d28:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003d2c:	0200      	lsls	r0, r0, #8
 8003d2e:	086b      	lsrs	r3, r5, #1
 8003d30:	18c0      	adds	r0, r0, r3
 8003d32:	462a      	mov	r2, r5
 8003d34:	4633      	mov	r3, r6
 8003d36:	f141 0100 	adc.w	r1, r1, #0
 8003d3a:	f7fc fa83 	bl	8000244 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d3e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8003d42:	4b10      	ldr	r3, [pc, #64]	@ (8003d84 <UART_SetConfig+0x298>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	f200 8087 	bhi.w	8003e58 <UART_SetConfig+0x36c>
          huart->Instance->BRR = usartdiv;
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	60d8      	str	r0, [r3, #12]
 8003d4e:	4630      	mov	r0, r6
 8003d50:	e068      	b.n	8003e24 <UART_SetConfig+0x338>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d52:	f7fe f853 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
        break;
 8003d56:	e7ce      	b.n	8003cf6 <UART_SetConfig+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d58:	f7fd faf4 	bl	8001344 <HAL_RCC_GetSysClockFreq>
        break;
 8003d5c:	e7cb      	b.n	8003cf6 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8003d5e:	480a      	ldr	r0, [pc, #40]	@ (8003d88 <UART_SetConfig+0x29c>)
 8003d60:	e7cc      	b.n	8003cfc <UART_SetConfig+0x210>
 8003d62:	bf00      	nop
 8003d64:	cfff69f3 	.word	0xcfff69f3
 8003d68:	40008000 	.word	0x40008000
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	40004400 	.word	0x40004400
 8003d74:	40004800 	.word	0x40004800
 8003d78:	40004c00 	.word	0x40004c00
 8003d7c:	40005000 	.word	0x40005000
 8003d80:	08004fec 	.word	0x08004fec
 8003d84:	000ffcff 	.word	0x000ffcff
 8003d88:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8003d8c:	2a08      	cmp	r2, #8
 8003d8e:	d865      	bhi.n	8003e5c <UART_SetConfig+0x370>
 8003d90:	e8df f002 	tbb	[pc, r2]
 8003d94:	64052707 	.word	0x64052707
 8003d98:	6464642a 	.word	0x6464642a
 8003d9c:	0b          	.byte	0x0b
 8003d9d:	00          	.byte	0x00
 8003d9e:	4835      	ldr	r0, [pc, #212]	@ (8003e74 <UART_SetConfig+0x388>)
 8003da0:	e003      	b.n	8003daa <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da2:	f7fe f81b 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d05a      	beq.n	8003e60 <UART_SetConfig+0x374>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003daa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003dac:	4b32      	ldr	r3, [pc, #200]	@ (8003e78 <UART_SetConfig+0x38c>)
 8003dae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003db2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003db6:	6862      	ldr	r2, [r4, #4]
 8003db8:	0853      	lsrs	r3, r2, #1
 8003dba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003dbe:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc2:	f1a3 0110 	sub.w	r1, r3, #16
 8003dc6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	d84a      	bhi.n	8003e64 <UART_SetConfig+0x378>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003dd8:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8003dda:	6822      	ldr	r2, [r4, #0]
 8003ddc:	60d3      	str	r3, [r2, #12]
 8003dde:	2000      	movs	r0, #0
 8003de0:	e020      	b.n	8003e24 <UART_SetConfig+0x338>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de2:	f7fe f80b 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
        break;
 8003de6:	e7de      	b.n	8003da6 <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetSysClockFreq();
 8003de8:	f7fd faac 	bl	8001344 <HAL_RCC_GetSysClockFreq>
        break;
 8003dec:	e7db      	b.n	8003da6 <UART_SetConfig+0x2ba>
    switch (clocksource)
 8003dee:	4821      	ldr	r0, [pc, #132]	@ (8003e74 <UART_SetConfig+0x388>)
 8003df0:	e003      	b.n	8003dfa <UART_SetConfig+0x30e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fd fff3 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d038      	beq.n	8003e6c <UART_SetConfig+0x380>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <UART_SetConfig+0x38c>)
 8003dfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e02:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e06:	6863      	ldr	r3, [r4, #4]
 8003e08:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e0c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	f1a0 0210 	sub.w	r2, r0, #16
 8003e14:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d829      	bhi.n	8003e70 <UART_SetConfig+0x384>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	b280      	uxth	r0, r0
 8003e20:	60d8      	str	r0, [r3, #12]
 8003e22:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e2a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e32:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e36:	f7fd ffe1 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
        break;
 8003e3a:	e7dc      	b.n	8003df6 <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3c:	f7fd fa82 	bl	8001344 <HAL_RCC_GetSysClockFreq>
        break;
 8003e40:	e7d9      	b.n	8003df6 <UART_SetConfig+0x30a>
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003e46:	e7d8      	b.n	8003dfa <UART_SetConfig+0x30e>
    switch (clocksource)
 8003e48:	2001      	movs	r0, #1
 8003e4a:	e7eb      	b.n	8003e24 <UART_SetConfig+0x338>
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	e7e9      	b.n	8003e24 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003e50:	2001      	movs	r0, #1
 8003e52:	e7e7      	b.n	8003e24 <UART_SetConfig+0x338>
 8003e54:	2001      	movs	r0, #1
 8003e56:	e7e5      	b.n	8003e24 <UART_SetConfig+0x338>
          ret = HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
 8003e5a:	e7e3      	b.n	8003e24 <UART_SetConfig+0x338>
    switch (clocksource)
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e7e1      	b.n	8003e24 <UART_SetConfig+0x338>
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7df      	b.n	8003e24 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003e64:	2001      	movs	r0, #1
 8003e66:	e7dd      	b.n	8003e24 <UART_SetConfig+0x338>
    switch (clocksource)
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7db      	b.n	8003e24 <UART_SetConfig+0x338>
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e7d9      	b.n	8003e24 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003e70:	2001      	movs	r0, #1
 8003e72:	e7d7      	b.n	8003e24 <UART_SetConfig+0x338>
 8003e74:	00f42400 	.word	0x00f42400
 8003e78:	08004fec 	.word	0x08004fec

08003e7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003e7e:	f013 0f08 	tst.w	r3, #8
 8003e82:	d006      	beq.n	8003e92 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	6853      	ldr	r3, [r2, #4]
 8003e88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e8c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e92:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003e94:	f013 0f01 	tst.w	r3, #1
 8003e98:	d006      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e9a:	6802      	ldr	r2, [r0, #0]
 8003e9c:	6853      	ldr	r3, [r2, #4]
 8003e9e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ea2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003eaa:	f013 0f02 	tst.w	r3, #2
 8003eae:	d006      	beq.n	8003ebe <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb0:	6802      	ldr	r2, [r0, #0]
 8003eb2:	6853      	ldr	r3, [r2, #4]
 8003eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ebe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003ec0:	f013 0f04 	tst.w	r3, #4
 8003ec4:	d006      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec6:	6802      	ldr	r2, [r0, #0]
 8003ec8:	6853      	ldr	r3, [r2, #4]
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ece:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003ed6:	f013 0f10 	tst.w	r3, #16
 8003eda:	d006      	beq.n	8003eea <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003edc:	6802      	ldr	r2, [r0, #0]
 8003ede:	6893      	ldr	r3, [r2, #8]
 8003ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ee4:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003eec:	f013 0f20 	tst.w	r3, #32
 8003ef0:	d006      	beq.n	8003f00 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef2:	6802      	ldr	r2, [r0, #0]
 8003ef4:	6893      	ldr	r3, [r2, #8]
 8003ef6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003efa:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f00:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f02:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f08:	6802      	ldr	r2, [r0, #0]
 8003f0a:	6853      	ldr	r3, [r2, #4]
 8003f0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f10:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f16:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1c:	d00b      	beq.n	8003f36 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003f20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f24:	d006      	beq.n	8003f34 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f26:	6802      	ldr	r2, [r0, #0]
 8003f28:	6853      	ldr	r3, [r2, #4]
 8003f2a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003f2e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6053      	str	r3, [r2, #4]
}
 8003f34:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f36:	6802      	ldr	r2, [r0, #0]
 8003f38:	6853      	ldr	r3, [r2, #4]
 8003f3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f3e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6053      	str	r3, [r2, #4]
 8003f44:	e7eb      	b.n	8003f1e <UART_AdvFeatureConfig+0xa2>

08003f46 <UART_WaitOnFlagUntilTimeout>:
{
 8003f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	460e      	mov	r6, r1
 8003f4e:	4617      	mov	r7, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	69dc      	ldr	r4, [r3, #28]
 8003f5a:	ea36 0404 	bics.w	r4, r6, r4
 8003f5e:	bf0c      	ite	eq
 8003f60:	2401      	moveq	r4, #1
 8003f62:	2400      	movne	r4, #0
 8003f64:	42bc      	cmp	r4, r7
 8003f66:	d136      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003f6c:	d0f3      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fc ff13 	bl	8000d98 <HAL_GetTick>
 8003f72:	eba0 0009 	sub.w	r0, r0, r9
 8003f76:	4540      	cmp	r0, r8
 8003f78:	d830      	bhi.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x96>
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	d02f      	beq.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f012 0f04 	tst.w	r2, #4
 8003f88:	d0e5      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x10>
 8003f8a:	2e80      	cmp	r6, #128	@ 0x80
 8003f8c:	d0e3      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x10>
 8003f8e:	2e40      	cmp	r6, #64	@ 0x40
 8003f90:	d0e1      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	f012 0f08 	tst.w	r2, #8
 8003f98:	d111      	bne.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003fa0:	d0d9      	beq.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fa6:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f7ff f90f 	bl	80031cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
 8003fbc:	e00c      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fbe:	2408      	movs	r4, #8
 8003fc0:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f7ff f902 	bl	80031cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc8:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	e000      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 8003fd6:	2000      	movs	r0, #0
}
 8003fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003fdc:	2003      	movs	r0, #3
 8003fde:	e7fb      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x92>
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	e7f9      	b.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x92>

08003fe4 <HAL_UART_Transmit>:
{
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003fec:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d15a      	bne.n	80040aa <HAL_UART_Transmit+0xc6>
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003ffa:	2900      	cmp	r1, #0
 8003ffc:	d059      	beq.n	80040b2 <HAL_UART_Transmit+0xce>
 8003ffe:	b90a      	cbnz	r2, 8004004 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8004000:	2001      	movs	r0, #1
 8004002:	e053      	b.n	80040ac <HAL_UART_Transmit+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400a:	2321      	movs	r3, #33	@ 0x21
 800400c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8004010:	f7fc fec2 	bl	8000d98 <HAL_GetTick>
 8004014:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004016:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 800401a:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d002      	beq.n	800402c <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8004026:	f04f 0800 	mov.w	r8, #0
 800402a:	e016      	b.n	800405a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	b343      	cbz	r3, 8004082 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 8004030:	f04f 0800 	mov.w	r8, #0
 8004034:	e011      	b.n	800405a <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8004036:	2320      	movs	r3, #32
 8004038:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800403c:	2003      	movs	r0, #3
 800403e:	e035      	b.n	80040ac <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004040:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004044:	6822      	ldr	r2, [r4, #0]
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800404c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004050:	b292      	uxth	r2, r2
 8004052:	3a01      	subs	r2, #1
 8004054:	b292      	uxth	r2, r2
 8004056:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800405a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800405e:	b29b      	uxth	r3, r3
 8004060:	b193      	cbz	r3, 8004088 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	9600      	str	r6, [sp, #0]
 8004064:	463b      	mov	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	2180      	movs	r1, #128	@ 0x80
 800406a:	4620      	mov	r0, r4
 800406c:	f7ff ff6b 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8004070:	2800      	cmp	r0, #0
 8004072:	d1e0      	bne.n	8004036 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8004074:	2d00      	cmp	r5, #0
 8004076:	d0e3      	beq.n	8004040 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004078:	f815 2b01 	ldrb.w	r2, [r5], #1
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004080:	e7e4      	b.n	800404c <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8004082:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004084:	2500      	movs	r5, #0
 8004086:	e7e8      	b.n	800405a <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004088:	9600      	str	r6, [sp, #0]
 800408a:	463b      	mov	r3, r7
 800408c:	2200      	movs	r2, #0
 800408e:	2140      	movs	r1, #64	@ 0x40
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff ff58 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8004096:	b918      	cbnz	r0, 80040a0 <HAL_UART_Transmit+0xbc>
    huart->gState = HAL_UART_STATE_READY;
 8004098:	2320      	movs	r3, #32
 800409a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800409e:	e005      	b.n	80040ac <HAL_UART_Transmit+0xc8>
      huart->gState = HAL_UART_STATE_READY;
 80040a0:	2320      	movs	r3, #32
 80040a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80040a6:	2003      	movs	r0, #3
 80040a8:	e000      	b.n	80040ac <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 80040aa:	2002      	movs	r0, #2
}
 80040ac:	b002      	add	sp, #8
 80040ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
 80040b4:	e7fa      	b.n	80040ac <HAL_UART_Transmit+0xc8>

080040b6 <UART_CheckIdleState>:
{
 80040b6:	b530      	push	{r4, r5, lr}
 80040b8:	b083      	sub	sp, #12
 80040ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80040c2:	f7fc fe69 	bl	8000d98 <HAL_GetTick>
 80040c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	f012 0f08 	tst.w	r2, #8
 80040d0:	d110      	bne.n	80040f4 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f013 0f04 	tst.w	r3, #4
 80040da:	d128      	bne.n	800412e <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	2320      	movs	r3, #32
 80040de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040e2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e6:	2000      	movs	r0, #0
 80040e8:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ea:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80040ec:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80040f0:	b003      	add	sp, #12
 80040f2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4603      	mov	r3, r0
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff ff1f 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0e2      	beq.n	80040d2 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800410c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	e852 3f00 	ldrex	r3, [r2]
 8004112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	e842 3100 	strex	r1, r3, [r2]
 800411a:	2900      	cmp	r1, #0
 800411c:	d1f6      	bne.n	800410c <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 800411e:	2320      	movs	r3, #32
 8004120:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 8004124:	2300      	movs	r3, #0
 8004126:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800412a:	2003      	movs	r0, #3
 800412c:	e7e0      	b.n	80040f0 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800412e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	462b      	mov	r3, r5
 8004136:	2200      	movs	r2, #0
 8004138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800413c:	4620      	mov	r0, r4
 800413e:	f7ff ff02 	bl	8003f46 <UART_WaitOnFlagUntilTimeout>
 8004142:	2800      	cmp	r0, #0
 8004144:	d0ca      	beq.n	80040dc <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004146:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	e852 3f00 	ldrex	r3, [r2]
 800414c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	e842 3100 	strex	r1, r3, [r2]
 8004154:	2900      	cmp	r1, #0
 8004156:	d1f6      	bne.n	8004146 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	f102 0308 	add.w	r3, r2, #8
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	3208      	adds	r2, #8
 8004168:	e842 3100 	strex	r1, r3, [r2]
 800416c:	2900      	cmp	r1, #0
 800416e:	d1f3      	bne.n	8004158 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8004170:	2320      	movs	r3, #32
 8004172:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 8004176:	2300      	movs	r3, #0
 8004178:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 800417c:	2003      	movs	r0, #3
 800417e:	e7b7      	b.n	80040f0 <UART_CheckIdleState+0x3a>

08004180 <HAL_UART_Init>:
  if (huart == NULL)
 8004180:	b378      	cbz	r0, 80041e2 <HAL_UART_Init+0x62>
{
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800418a:	b30b      	cbz	r3, 80041d0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	2324      	movs	r3, #36	@ 0x24
 800418e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800419e:	b9e3      	cbnz	r3, 80041da <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a0:	4620      	mov	r0, r4
 80041a2:	f7ff fca3 	bl	8003aec <UART_SetConfig>
 80041a6:	2801      	cmp	r0, #1
 80041a8:	d011      	beq.n	80041ce <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	6853      	ldr	r3, [r2, #4]
 80041ae:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80041b2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6893      	ldr	r3, [r2, #8]
 80041b8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80041bc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7ff ff74 	bl	80040b6 <UART_CheckIdleState>
}
 80041ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80041d0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80041d4:	f7fc fc76 	bl	8000ac4 <HAL_UART_MspInit>
 80041d8:	e7d8      	b.n	800418c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80041da:	4620      	mov	r0, r4
 80041dc:	f7ff fe4e 	bl	8003e7c <UART_AdvFeatureConfig>
 80041e0:	e7de      	b.n	80041a0 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80041e2:	2001      	movs	r0, #1
}
 80041e4:	4770      	bx	lr
	...

080041e8 <UART_Start_Receive_IT>:
{
 80041e8:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80041ea:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80041ec:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80041f0:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 80041f8:	6883      	ldr	r3, [r0, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fe:	d006      	beq.n	800420e <UART_Start_Receive_IT+0x26>
 8004200:	b9a3      	cbnz	r3, 800422c <UART_Start_Receive_IT+0x44>
 8004202:	6903      	ldr	r3, [r0, #16]
 8004204:	b973      	cbnz	r3, 8004224 <UART_Start_Receive_IT+0x3c>
 8004206:	23ff      	movs	r3, #255	@ 0xff
 8004208:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800420c:	e014      	b.n	8004238 <UART_Start_Receive_IT+0x50>
 800420e:	6903      	ldr	r3, [r0, #16]
 8004210:	b923      	cbnz	r3, 800421c <UART_Start_Receive_IT+0x34>
 8004212:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8004216:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800421a:	e00d      	b.n	8004238 <UART_Start_Receive_IT+0x50>
 800421c:	23ff      	movs	r3, #255	@ 0xff
 800421e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8004222:	e009      	b.n	8004238 <UART_Start_Receive_IT+0x50>
 8004224:	237f      	movs	r3, #127	@ 0x7f
 8004226:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800422a:	e005      	b.n	8004238 <UART_Start_Receive_IT+0x50>
 800422c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004230:	d02e      	beq.n	8004290 <UART_Start_Receive_IT+0xa8>
 8004232:	2300      	movs	r3, #0
 8004234:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	2300      	movs	r3, #0
 800423a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800423e:	2322      	movs	r3, #34	@ 0x22
 8004240:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	f101 0308 	add.w	r3, r1, #8
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	3108      	adds	r1, #8
 8004254:	e841 3400 	strex	r4, r3, [r1]
 8004258:	2c00      	cmp	r4, #0
 800425a:	d1f3      	bne.n	8004244 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800425c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800425e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004262:	d01f      	beq.n	80042a4 <UART_Start_Receive_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004264:	6883      	ldr	r3, [r0, #8]
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426a:	d043      	beq.n	80042f4 <UART_Start_Receive_IT+0x10c>
      huart->RxISR = UART_RxISR_8BIT;
 800426c:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <UART_Start_Receive_IT+0x12c>)
 800426e:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004270:	6903      	ldr	r3, [r0, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d044      	beq.n	8004300 <UART_Start_Receive_IT+0x118>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004276:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	e852 3f00 	ldrex	r3, [r2]
 800427c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	e842 3100 	strex	r1, r3, [r2]
 8004284:	2900      	cmp	r1, #0
 8004286:	d1f6      	bne.n	8004276 <UART_Start_Receive_IT+0x8e>
}
 8004288:	2000      	movs	r0, #0
 800428a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800428e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8004290:	6903      	ldr	r3, [r0, #16]
 8004292:	b91b      	cbnz	r3, 800429c <UART_Start_Receive_IT+0xb4>
 8004294:	237f      	movs	r3, #127	@ 0x7f
 8004296:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 800429a:	e7cd      	b.n	8004238 <UART_Start_Receive_IT+0x50>
 800429c:	233f      	movs	r3, #63	@ 0x3f
 800429e:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 80042a2:	e7c9      	b.n	8004238 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80042a4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d8db      	bhi.n	8004264 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	6883      	ldr	r3, [r0, #8]
 80042ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b2:	d019      	beq.n	80042e8 <UART_Start_Receive_IT+0x100>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80042b4:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <UART_Start_Receive_IT+0x130>)
 80042b6:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80042b8:	6903      	ldr	r3, [r0, #16]
 80042ba:	b143      	cbz	r3, 80042ce <UART_Start_Receive_IT+0xe6>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042bc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	e852 3f00 	ldrex	r3, [r2]
 80042c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	e842 3100 	strex	r1, r3, [r2]
 80042ca:	2900      	cmp	r1, #0
 80042cc:	d1f6      	bne.n	80042bc <UART_Start_Receive_IT+0xd4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	f102 0308 	add.w	r3, r2, #8
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	3208      	adds	r2, #8
 80042de:	e842 3100 	strex	r1, r3, [r2]
 80042e2:	2900      	cmp	r1, #0
 80042e4:	d1f3      	bne.n	80042ce <UART_Start_Receive_IT+0xe6>
 80042e6:	e7cf      	b.n	8004288 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	6903      	ldr	r3, [r0, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e2      	bne.n	80042b4 <UART_Start_Receive_IT+0xcc>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <UART_Start_Receive_IT+0x134>)
 80042f0:	6743      	str	r3, [r0, #116]	@ 0x74
 80042f2:	e7e1      	b.n	80042b8 <UART_Start_Receive_IT+0xd0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f4:	6903      	ldr	r3, [r0, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1b8      	bne.n	800426c <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80042fa:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <UART_Start_Receive_IT+0x138>)
 80042fc:	6743      	str	r3, [r0, #116]	@ 0x74
 80042fe:	e7b7      	b.n	8004270 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004300:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	e852 3f00 	ldrex	r3, [r2]
 8004306:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	e842 3100 	strex	r1, r3, [r2]
 800430e:	2900      	cmp	r1, #0
 8004310:	d1f6      	bne.n	8004300 <UART_Start_Receive_IT+0x118>
 8004312:	e7b9      	b.n	8004288 <UART_Start_Receive_IT+0xa0>
 8004314:	080035a5 	.word	0x080035a5
 8004318:	08003759 	.word	0x08003759
 800431c:	08003925 	.word	0x08003925
 8004320:	08003681 	.word	0x08003681

08004324 <HAL_UART_Receive_IT>:
{
 8004324:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004326:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800432a:	2b20      	cmp	r3, #32
 800432c:	d117      	bne.n	800435e <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800432e:	b1c1      	cbz	r1, 8004362 <HAL_UART_Receive_IT+0x3e>
 8004330:	b1ca      	cbz	r2, 8004366 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	2300      	movs	r3, #0
 8004334:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004336:	6803      	ldr	r3, [r0, #0]
 8004338:	4c0c      	ldr	r4, [pc, #48]	@ (800436c <HAL_UART_Receive_IT+0x48>)
 800433a:	42a3      	cmp	r3, r4
 800433c:	d00c      	beq.n	8004358 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8004344:	d008      	beq.n	8004358 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004346:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	e854 3f00 	ldrex	r3, [r4]
 800434c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	e844 3500 	strex	r5, r3, [r4]
 8004354:	2d00      	cmp	r5, #0
 8004356:	d1f6      	bne.n	8004346 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004358:	f7ff ff46 	bl	80041e8 <UART_Start_Receive_IT>
 800435c:	e000      	b.n	8004360 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800435e:	2002      	movs	r0, #2
}
 8004360:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004362:	2001      	movs	r0, #1
 8004364:	e7fc      	b.n	8004360 <HAL_UART_Receive_IT+0x3c>
 8004366:	2001      	movs	r0, #1
 8004368:	e7fa      	b.n	8004360 <HAL_UART_Receive_IT+0x3c>
 800436a:	bf00      	nop
 800436c:	40008000 	.word	0x40008000

08004370 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004370:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004372:	b92b      	cbnz	r3, 8004380 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004374:	2301      	movs	r3, #1
 8004376:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800437a:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 800437e:	4770      	bx	lr
{
 8004380:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004382:	6803      	ldr	r3, [r0, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800438e:	4d09      	ldr	r5, [pc, #36]	@ (80043b4 <UARTEx_SetNbDataToProcess+0x44>)
 8004390:	5c6b      	ldrb	r3, [r5, r1]
 8004392:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004394:	4c08      	ldr	r4, [pc, #32]	@ (80043b8 <UARTEx_SetNbDataToProcess+0x48>)
 8004396:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004398:	fb93 f3f1 	sdiv	r3, r3, r1
 800439c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043a0:	5cab      	ldrb	r3, [r5, r2]
 80043a2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043a4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80043aa:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80043ae:	bc30      	pop	{r4, r5}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	0800500c 	.word	0x0800500c
 80043b8:	08005004 	.word	0x08005004

080043bc <HAL_UARTEx_WakeupCallback>:
}
 80043bc:	4770      	bx	lr

080043be <HAL_UARTEx_RxFifoFullCallback>:
}
 80043be:	4770      	bx	lr

080043c0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80043c0:	4770      	bx	lr

080043c2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80043c2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d018      	beq.n	80043fc <HAL_UARTEx_DisableFifoMode+0x3a>
 80043ca:	2301      	movs	r3, #1
 80043cc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80043d0:	2324      	movs	r3, #36	@ 0x24
 80043d2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	f021 0101 	bic.w	r1, r1, #1
 80043e0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043e2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043ea:	6801      	ldr	r1, [r0, #0]
 80043ec:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80043ee:	2220      	movs	r2, #32
 80043f0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80043f4:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80043f8:	4618      	mov	r0, r3
 80043fa:	4770      	bx	lr
  __HAL_LOCK(huart);
 80043fc:	2002      	movs	r0, #2
}
 80043fe:	4770      	bx	lr

08004400 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004400:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004402:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004406:	2b01      	cmp	r3, #1
 8004408:	d01d      	beq.n	8004446 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800440a:	4604      	mov	r4, r0
 800440c:	2301      	movs	r3, #1
 800440e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	2324      	movs	r3, #36	@ 0x24
 8004414:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004418:	6803      	ldr	r3, [r0, #0]
 800441a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004424:	6802      	ldr	r2, [r0, #0]
 8004426:	6893      	ldr	r3, [r2, #8]
 8004428:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800442c:	4319      	orrs	r1, r3
 800442e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004430:	f7ff ff9e 	bl	8004370 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004438:	2320      	movs	r3, #32
 800443a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800443e:	2000      	movs	r0, #0
 8004440:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004444:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004446:	2002      	movs	r0, #2
 8004448:	e7fc      	b.n	8004444 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800444a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800444a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800444c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004450:	2b01      	cmp	r3, #1
 8004452:	d01d      	beq.n	8004490 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004454:	4604      	mov	r4, r0
 8004456:	2301      	movs	r3, #1
 8004458:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	2324      	movs	r3, #36	@ 0x24
 800445e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004462:	6803      	ldr	r3, [r0, #0]
 8004464:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800446e:	6802      	ldr	r2, [r0, #0]
 8004470:	6893      	ldr	r3, [r2, #8]
 8004472:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8004476:	4319      	orrs	r1, r3
 8004478:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800447a:	f7ff ff79 	bl	8004370 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004482:	2320      	movs	r3, #32
 8004484:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004488:	2000      	movs	r0, #0
 800448a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800448e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004490:	2002      	movs	r0, #2
 8004492:	e7fc      	b.n	800448e <HAL_UARTEx_SetRxFifoThreshold+0x44>

08004494 <atoi>:
 8004494:	220a      	movs	r2, #10
 8004496:	2100      	movs	r1, #0
 8004498:	f000 b87a 	b.w	8004590 <strtol>

0800449c <_strtol_l.isra.0>:
 800449c:	2b24      	cmp	r3, #36	@ 0x24
 800449e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a2:	4686      	mov	lr, r0
 80044a4:	4690      	mov	r8, r2
 80044a6:	d801      	bhi.n	80044ac <_strtol_l.isra.0+0x10>
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d106      	bne.n	80044ba <_strtol_l.isra.0+0x1e>
 80044ac:	f000 f8a4 	bl	80045f8 <__errno>
 80044b0:	2316      	movs	r3, #22
 80044b2:	6003      	str	r3, [r0, #0]
 80044b4:	2000      	movs	r0, #0
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	460d      	mov	r5, r1
 80044bc:	4833      	ldr	r0, [pc, #204]	@ (800458c <_strtol_l.isra.0+0xf0>)
 80044be:	462a      	mov	r2, r5
 80044c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044c4:	5d06      	ldrb	r6, [r0, r4]
 80044c6:	f016 0608 	ands.w	r6, r6, #8
 80044ca:	d1f8      	bne.n	80044be <_strtol_l.isra.0+0x22>
 80044cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80044ce:	d110      	bne.n	80044f2 <_strtol_l.isra.0+0x56>
 80044d0:	782c      	ldrb	r4, [r5, #0]
 80044d2:	2601      	movs	r6, #1
 80044d4:	1c95      	adds	r5, r2, #2
 80044d6:	f033 0210 	bics.w	r2, r3, #16
 80044da:	d115      	bne.n	8004508 <_strtol_l.isra.0+0x6c>
 80044dc:	2c30      	cmp	r4, #48	@ 0x30
 80044de:	d10d      	bne.n	80044fc <_strtol_l.isra.0+0x60>
 80044e0:	782a      	ldrb	r2, [r5, #0]
 80044e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80044e6:	2a58      	cmp	r2, #88	@ 0x58
 80044e8:	d108      	bne.n	80044fc <_strtol_l.isra.0+0x60>
 80044ea:	786c      	ldrb	r4, [r5, #1]
 80044ec:	3502      	adds	r5, #2
 80044ee:	2310      	movs	r3, #16
 80044f0:	e00a      	b.n	8004508 <_strtol_l.isra.0+0x6c>
 80044f2:	2c2b      	cmp	r4, #43	@ 0x2b
 80044f4:	bf04      	itt	eq
 80044f6:	782c      	ldrbeq	r4, [r5, #0]
 80044f8:	1c95      	addeq	r5, r2, #2
 80044fa:	e7ec      	b.n	80044d6 <_strtol_l.isra.0+0x3a>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f6      	bne.n	80044ee <_strtol_l.isra.0+0x52>
 8004500:	2c30      	cmp	r4, #48	@ 0x30
 8004502:	bf14      	ite	ne
 8004504:	230a      	movne	r3, #10
 8004506:	2308      	moveq	r3, #8
 8004508:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800450c:	2200      	movs	r2, #0
 800450e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004512:	4610      	mov	r0, r2
 8004514:	fbbc f9f3 	udiv	r9, ip, r3
 8004518:	fb03 ca19 	mls	sl, r3, r9, ip
 800451c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004520:	2f09      	cmp	r7, #9
 8004522:	d80f      	bhi.n	8004544 <_strtol_l.isra.0+0xa8>
 8004524:	463c      	mov	r4, r7
 8004526:	42a3      	cmp	r3, r4
 8004528:	dd1b      	ble.n	8004562 <_strtol_l.isra.0+0xc6>
 800452a:	1c57      	adds	r7, r2, #1
 800452c:	d007      	beq.n	800453e <_strtol_l.isra.0+0xa2>
 800452e:	4581      	cmp	r9, r0
 8004530:	d314      	bcc.n	800455c <_strtol_l.isra.0+0xc0>
 8004532:	d101      	bne.n	8004538 <_strtol_l.isra.0+0x9c>
 8004534:	45a2      	cmp	sl, r4
 8004536:	db11      	blt.n	800455c <_strtol_l.isra.0+0xc0>
 8004538:	fb00 4003 	mla	r0, r0, r3, r4
 800453c:	2201      	movs	r2, #1
 800453e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004542:	e7eb      	b.n	800451c <_strtol_l.isra.0+0x80>
 8004544:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004548:	2f19      	cmp	r7, #25
 800454a:	d801      	bhi.n	8004550 <_strtol_l.isra.0+0xb4>
 800454c:	3c37      	subs	r4, #55	@ 0x37
 800454e:	e7ea      	b.n	8004526 <_strtol_l.isra.0+0x8a>
 8004550:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004554:	2f19      	cmp	r7, #25
 8004556:	d804      	bhi.n	8004562 <_strtol_l.isra.0+0xc6>
 8004558:	3c57      	subs	r4, #87	@ 0x57
 800455a:	e7e4      	b.n	8004526 <_strtol_l.isra.0+0x8a>
 800455c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004560:	e7ed      	b.n	800453e <_strtol_l.isra.0+0xa2>
 8004562:	1c53      	adds	r3, r2, #1
 8004564:	d108      	bne.n	8004578 <_strtol_l.isra.0+0xdc>
 8004566:	2322      	movs	r3, #34	@ 0x22
 8004568:	4660      	mov	r0, ip
 800456a:	f8ce 3000 	str.w	r3, [lr]
 800456e:	f1b8 0f00 	cmp.w	r8, #0
 8004572:	d0a0      	beq.n	80044b6 <_strtol_l.isra.0+0x1a>
 8004574:	1e69      	subs	r1, r5, #1
 8004576:	e006      	b.n	8004586 <_strtol_l.isra.0+0xea>
 8004578:	b106      	cbz	r6, 800457c <_strtol_l.isra.0+0xe0>
 800457a:	4240      	negs	r0, r0
 800457c:	f1b8 0f00 	cmp.w	r8, #0
 8004580:	d099      	beq.n	80044b6 <_strtol_l.isra.0+0x1a>
 8004582:	2a00      	cmp	r2, #0
 8004584:	d1f6      	bne.n	8004574 <_strtol_l.isra.0+0xd8>
 8004586:	f8c8 1000 	str.w	r1, [r8]
 800458a:	e794      	b.n	80044b6 <_strtol_l.isra.0+0x1a>
 800458c:	08005015 	.word	0x08005015

08004590 <strtol>:
 8004590:	4613      	mov	r3, r2
 8004592:	460a      	mov	r2, r1
 8004594:	4601      	mov	r1, r0
 8004596:	4802      	ldr	r0, [pc, #8]	@ (80045a0 <strtol+0x10>)
 8004598:	6800      	ldr	r0, [r0, #0]
 800459a:	f7ff bf7f 	b.w	800449c <_strtol_l.isra.0>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <siprintf>:
 80045a4:	b40e      	push	{r1, r2, r3}
 80045a6:	b510      	push	{r4, lr}
 80045a8:	b09d      	sub	sp, #116	@ 0x74
 80045aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045ae:	2400      	movs	r4, #0
 80045b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80045b2:	9002      	str	r0, [sp, #8]
 80045b4:	9006      	str	r0, [sp, #24]
 80045b6:	9107      	str	r1, [sp, #28]
 80045b8:	9104      	str	r1, [sp, #16]
 80045ba:	4809      	ldr	r0, [pc, #36]	@ (80045e0 <siprintf+0x3c>)
 80045bc:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <siprintf+0x40>)
 80045be:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c2:	9105      	str	r1, [sp, #20]
 80045c4:	a902      	add	r1, sp, #8
 80045c6:	6800      	ldr	r0, [r0, #0]
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80045cc:	f000 f994 	bl	80048f8 <_svfiprintf_r>
 80045d0:	9b02      	ldr	r3, [sp, #8]
 80045d2:	701c      	strb	r4, [r3, #0]
 80045d4:	b01d      	add	sp, #116	@ 0x74
 80045d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045da:	b003      	add	sp, #12
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c
 80045e4:	ffff0208 	.word	0xffff0208

080045e8 <memset>:
 80045e8:	4402      	add	r2, r0
 80045ea:	4603      	mov	r3, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	f803 1b01 	strb.w	r1, [r3], #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <__errno>:
 80045f8:	4b01      	ldr	r3, [pc, #4]	@ (8004600 <__errno+0x8>)
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c

08004604 <__libc_init_array>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	4d0d      	ldr	r5, [pc, #52]	@ (800463c <__libc_init_array+0x38>)
 8004608:	2600      	movs	r6, #0
 800460a:	4c0d      	ldr	r4, [pc, #52]	@ (8004640 <__libc_init_array+0x3c>)
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	42a6      	cmp	r6, r4
 8004612:	d109      	bne.n	8004628 <__libc_init_array+0x24>
 8004614:	4d0b      	ldr	r5, [pc, #44]	@ (8004644 <__libc_init_array+0x40>)
 8004616:	2600      	movs	r6, #0
 8004618:	4c0b      	ldr	r4, [pc, #44]	@ (8004648 <__libc_init_array+0x44>)
 800461a:	f000 fc75 	bl	8004f08 <_init>
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	42a6      	cmp	r6, r4
 8004624:	d105      	bne.n	8004632 <__libc_init_array+0x2e>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	f855 3b04 	ldr.w	r3, [r5], #4
 800462c:	3601      	adds	r6, #1
 800462e:	4798      	blx	r3
 8004630:	e7ee      	b.n	8004610 <__libc_init_array+0xc>
 8004632:	f855 3b04 	ldr.w	r3, [r5], #4
 8004636:	3601      	adds	r6, #1
 8004638:	4798      	blx	r3
 800463a:	e7f2      	b.n	8004622 <__libc_init_array+0x1e>
 800463c:	08005150 	.word	0x08005150
 8004640:	08005150 	.word	0x08005150
 8004644:	08005150 	.word	0x08005150
 8004648:	08005154 	.word	0x08005154

0800464c <__retarget_lock_acquire_recursive>:
 800464c:	4770      	bx	lr

0800464e <__retarget_lock_release_recursive>:
 800464e:	4770      	bx	lr

08004650 <_free_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4605      	mov	r5, r0
 8004654:	2900      	cmp	r1, #0
 8004656:	d041      	beq.n	80046dc <_free_r+0x8c>
 8004658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800465c:	1f0c      	subs	r4, r1, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	bfb8      	it	lt
 8004662:	18e4      	addlt	r4, r4, r3
 8004664:	f000 f8e0 	bl	8004828 <__malloc_lock>
 8004668:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <_free_r+0x90>)
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	b933      	cbnz	r3, 800467c <_free_r+0x2c>
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	6014      	str	r4, [r2, #0]
 8004672:	4628      	mov	r0, r5
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004678:	f000 b8dc 	b.w	8004834 <__malloc_unlock>
 800467c:	42a3      	cmp	r3, r4
 800467e:	d908      	bls.n	8004692 <_free_r+0x42>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	1821      	adds	r1, r4, r0
 8004684:	428b      	cmp	r3, r1
 8004686:	bf01      	itttt	eq
 8004688:	6819      	ldreq	r1, [r3, #0]
 800468a:	685b      	ldreq	r3, [r3, #4]
 800468c:	1809      	addeq	r1, r1, r0
 800468e:	6021      	streq	r1, [r4, #0]
 8004690:	e7ed      	b.n	800466e <_free_r+0x1e>
 8004692:	461a      	mov	r2, r3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b10b      	cbz	r3, 800469c <_free_r+0x4c>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x42>
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	1850      	adds	r0, r2, r1
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x6c>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	4401      	add	r1, r0
 80046a8:	1850      	adds	r0, r2, r1
 80046aa:	6011      	str	r1, [r2, #0]
 80046ac:	4283      	cmp	r3, r0
 80046ae:	d1e0      	bne.n	8004672 <_free_r+0x22>
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4408      	add	r0, r1
 80046b6:	6053      	str	r3, [r2, #4]
 80046b8:	6010      	str	r0, [r2, #0]
 80046ba:	e7da      	b.n	8004672 <_free_r+0x22>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x74>
 80046be:	230c      	movs	r3, #12
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	e7d6      	b.n	8004672 <_free_r+0x22>
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	1821      	adds	r1, r4, r0
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf02      	ittt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	1809      	addeq	r1, r1, r0
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	bf08      	it	eq
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6054      	str	r4, [r2, #4]
 80046da:	e7ca      	b.n	8004672 <_free_r+0x22>
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	200002f4 	.word	0x200002f4

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004724 <sbrk_aligned+0x40>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	4605      	mov	r5, r0
 80046ec:	6831      	ldr	r1, [r6, #0]
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fba8 	bl	8004e44 <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fba3 	bl	8004e44 <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d103      	bne.n	800470a <sbrk_aligned+0x26>
 8004702:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004706:	4620      	mov	r0, r4
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0f8      	beq.n	8004706 <sbrk_aligned+0x22>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4628      	mov	r0, r5
 8004718:	f000 fb94 	bl	8004e44 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1f2      	bne.n	8004706 <sbrk_aligned+0x22>
 8004720:	e7ef      	b.n	8004702 <sbrk_aligned+0x1e>
 8004722:	bf00      	nop
 8004724:	200002f0 	.word	0x200002f0

08004728 <_malloc_r>:
 8004728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472c:	1ccd      	adds	r5, r1, #3
 800472e:	4606      	mov	r6, r0
 8004730:	f025 0503 	bic.w	r5, r5, #3
 8004734:	3508      	adds	r5, #8
 8004736:	2d0c      	cmp	r5, #12
 8004738:	bf38      	it	cc
 800473a:	250c      	movcc	r5, #12
 800473c:	2d00      	cmp	r5, #0
 800473e:	db01      	blt.n	8004744 <_malloc_r+0x1c>
 8004740:	42a9      	cmp	r1, r5
 8004742:	d904      	bls.n	800474e <_malloc_r+0x26>
 8004744:	230c      	movs	r3, #12
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	2000      	movs	r0, #0
 800474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004824 <_malloc_r+0xfc>
 8004752:	f000 f869 	bl	8004828 <__malloc_lock>
 8004756:	f8d8 3000 	ldr.w	r3, [r8]
 800475a:	461c      	mov	r4, r3
 800475c:	bb44      	cbnz	r4, 80047b0 <_malloc_r+0x88>
 800475e:	4629      	mov	r1, r5
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffbf 	bl	80046e4 <sbrk_aligned>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	4604      	mov	r4, r0
 800476a:	d158      	bne.n	800481e <_malloc_r+0xf6>
 800476c:	f8d8 4000 	ldr.w	r4, [r8]
 8004770:	4627      	mov	r7, r4
 8004772:	2f00      	cmp	r7, #0
 8004774:	d143      	bne.n	80047fe <_malloc_r+0xd6>
 8004776:	2c00      	cmp	r4, #0
 8004778:	d04b      	beq.n	8004812 <_malloc_r+0xea>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4639      	mov	r1, r7
 800477e:	4630      	mov	r0, r6
 8004780:	eb04 0903 	add.w	r9, r4, r3
 8004784:	f000 fb5e 	bl	8004e44 <_sbrk_r>
 8004788:	4581      	cmp	r9, r0
 800478a:	d142      	bne.n	8004812 <_malloc_r+0xea>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	4629      	mov	r1, r5
 8004794:	f7ff ffa6 	bl	80046e4 <sbrk_aligned>
 8004798:	3001      	adds	r0, #1
 800479a:	d03a      	beq.n	8004812 <_malloc_r+0xea>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	442b      	add	r3, r5
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	f8d8 3000 	ldr.w	r3, [r8]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	bb62      	cbnz	r2, 8004804 <_malloc_r+0xdc>
 80047aa:	f8c8 7000 	str.w	r7, [r8]
 80047ae:	e00f      	b.n	80047d0 <_malloc_r+0xa8>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	1b52      	subs	r2, r2, r5
 80047b4:	d420      	bmi.n	80047f8 <_malloc_r+0xd0>
 80047b6:	2a0b      	cmp	r2, #11
 80047b8:	d917      	bls.n	80047ea <_malloc_r+0xc2>
 80047ba:	1961      	adds	r1, r4, r5
 80047bc:	42a3      	cmp	r3, r4
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	bf18      	it	ne
 80047c2:	6059      	strne	r1, [r3, #4]
 80047c4:	6863      	ldr	r3, [r4, #4]
 80047c6:	bf08      	it	eq
 80047c8:	f8c8 1000 	streq.w	r1, [r8]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4630      	mov	r0, r6
 80047d2:	f000 f82f 	bl	8004834 <__malloc_unlock>
 80047d6:	f104 000b 	add.w	r0, r4, #11
 80047da:	1d23      	adds	r3, r4, #4
 80047dc:	f020 0007 	bic.w	r0, r0, #7
 80047e0:	1ac2      	subs	r2, r0, r3
 80047e2:	bf1c      	itt	ne
 80047e4:	1a1b      	subne	r3, r3, r0
 80047e6:	50a3      	strne	r3, [r4, r2]
 80047e8:	e7af      	b.n	800474a <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	f8c8 2000 	streq.w	r2, [r8]
 80047f4:	605a      	strne	r2, [r3, #4]
 80047f6:	e7eb      	b.n	80047d0 <_malloc_r+0xa8>
 80047f8:	4623      	mov	r3, r4
 80047fa:	6864      	ldr	r4, [r4, #4]
 80047fc:	e7ae      	b.n	800475c <_malloc_r+0x34>
 80047fe:	463c      	mov	r4, r7
 8004800:	687f      	ldr	r7, [r7, #4]
 8004802:	e7b6      	b.n	8004772 <_malloc_r+0x4a>
 8004804:	461a      	mov	r2, r3
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	d1fb      	bne.n	8004804 <_malloc_r+0xdc>
 800480c:	2300      	movs	r3, #0
 800480e:	6053      	str	r3, [r2, #4]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa8>
 8004812:	230c      	movs	r3, #12
 8004814:	4630      	mov	r0, r6
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f000 f80c 	bl	8004834 <__malloc_unlock>
 800481c:	e794      	b.n	8004748 <_malloc_r+0x20>
 800481e:	6005      	str	r5, [r0, #0]
 8004820:	e7d6      	b.n	80047d0 <_malloc_r+0xa8>
 8004822:	bf00      	nop
 8004824:	200002f4 	.word	0x200002f4

08004828 <__malloc_lock>:
 8004828:	4801      	ldr	r0, [pc, #4]	@ (8004830 <__malloc_lock+0x8>)
 800482a:	f7ff bf0f 	b.w	800464c <__retarget_lock_acquire_recursive>
 800482e:	bf00      	nop
 8004830:	200002ec 	.word	0x200002ec

08004834 <__malloc_unlock>:
 8004834:	4801      	ldr	r0, [pc, #4]	@ (800483c <__malloc_unlock+0x8>)
 8004836:	f7ff bf0a 	b.w	800464e <__retarget_lock_release_recursive>
 800483a:	bf00      	nop
 800483c:	200002ec 	.word	0x200002ec

08004840 <__ssputs_r>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	461f      	mov	r7, r3
 8004846:	688e      	ldr	r6, [r1, #8]
 8004848:	4682      	mov	sl, r0
 800484a:	460c      	mov	r4, r1
 800484c:	42be      	cmp	r6, r7
 800484e:	4690      	mov	r8, r2
 8004850:	680b      	ldr	r3, [r1, #0]
 8004852:	d82d      	bhi.n	80048b0 <__ssputs_r+0x70>
 8004854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800485c:	d026      	beq.n	80048ac <__ssputs_r+0x6c>
 800485e:	6965      	ldr	r5, [r4, #20]
 8004860:	6909      	ldr	r1, [r1, #16]
 8004862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004866:	eba3 0901 	sub.w	r9, r3, r1
 800486a:	1c7b      	adds	r3, r7, #1
 800486c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004870:	444b      	add	r3, r9
 8004872:	106d      	asrs	r5, r5, #1
 8004874:	429d      	cmp	r5, r3
 8004876:	bf38      	it	cc
 8004878:	461d      	movcc	r5, r3
 800487a:	0553      	lsls	r3, r2, #21
 800487c:	d527      	bpl.n	80048ce <__ssputs_r+0x8e>
 800487e:	4629      	mov	r1, r5
 8004880:	f7ff ff52 	bl	8004728 <_malloc_r>
 8004884:	4606      	mov	r6, r0
 8004886:	b360      	cbz	r0, 80048e2 <__ssputs_r+0xa2>
 8004888:	464a      	mov	r2, r9
 800488a:	6921      	ldr	r1, [r4, #16]
 800488c:	f000 faf8 	bl	8004e80 <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	444e      	add	r6, r9
 80048a0:	6165      	str	r5, [r4, #20]
 80048a2:	eba5 0509 	sub.w	r5, r5, r9
 80048a6:	6026      	str	r6, [r4, #0]
 80048a8:	463e      	mov	r6, r7
 80048aa:	60a5      	str	r5, [r4, #8]
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d900      	bls.n	80048b2 <__ssputs_r+0x72>
 80048b0:	463e      	mov	r6, r7
 80048b2:	4632      	mov	r2, r6
 80048b4:	4641      	mov	r1, r8
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	f000 faaa 	bl	8004e10 <memmove>
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	2000      	movs	r0, #0
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	60a3      	str	r3, [r4, #8]
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	4433      	add	r3, r6
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	462a      	mov	r2, r5
 80048d0:	f000 fae3 	bl	8004e9a <_realloc_r>
 80048d4:	4606      	mov	r6, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d1e0      	bne.n	800489c <__ssputs_r+0x5c>
 80048da:	6921      	ldr	r1, [r4, #16]
 80048dc:	4650      	mov	r0, sl
 80048de:	f7ff feb7 	bl	8004650 <_free_r>
 80048e2:	230c      	movs	r3, #12
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048e8:	f8ca 3000 	str.w	r3, [sl]
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	e7e9      	b.n	80048ca <__ssputs_r+0x8a>
	...

080048f8 <_svfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	4698      	mov	r8, r3
 80048fe:	898b      	ldrh	r3, [r1, #12]
 8004900:	b09d      	sub	sp, #116	@ 0x74
 8004902:	4607      	mov	r7, r0
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	460d      	mov	r5, r1
 8004908:	4614      	mov	r4, r2
 800490a:	d510      	bpl.n	800492e <_svfiprintf_r+0x36>
 800490c:	690b      	ldr	r3, [r1, #16]
 800490e:	b973      	cbnz	r3, 800492e <_svfiprintf_r+0x36>
 8004910:	2140      	movs	r1, #64	@ 0x40
 8004912:	f7ff ff09 	bl	8004728 <_malloc_r>
 8004916:	6028      	str	r0, [r5, #0]
 8004918:	6128      	str	r0, [r5, #16]
 800491a:	b930      	cbnz	r0, 800492a <_svfiprintf_r+0x32>
 800491c:	230c      	movs	r3, #12
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004924:	b01d      	add	sp, #116	@ 0x74
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	2340      	movs	r3, #64	@ 0x40
 800492c:	616b      	str	r3, [r5, #20]
 800492e:	2300      	movs	r3, #0
 8004930:	f8cd 800c 	str.w	r8, [sp, #12]
 8004934:	f04f 0901 	mov.w	r9, #1
 8004938:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8004adc <_svfiprintf_r+0x1e4>
 800493c:	9309      	str	r3, [sp, #36]	@ 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004944:	2330      	movs	r3, #48	@ 0x30
 8004946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800494a:	4623      	mov	r3, r4
 800494c:	469a      	mov	sl, r3
 800494e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004952:	b10a      	cbz	r2, 8004958 <_svfiprintf_r+0x60>
 8004954:	2a25      	cmp	r2, #37	@ 0x25
 8004956:	d1f9      	bne.n	800494c <_svfiprintf_r+0x54>
 8004958:	ebba 0b04 	subs.w	fp, sl, r4
 800495c:	d00b      	beq.n	8004976 <_svfiprintf_r+0x7e>
 800495e:	465b      	mov	r3, fp
 8004960:	4622      	mov	r2, r4
 8004962:	4629      	mov	r1, r5
 8004964:	4638      	mov	r0, r7
 8004966:	f7ff ff6b 	bl	8004840 <__ssputs_r>
 800496a:	3001      	adds	r0, #1
 800496c:	f000 80a7 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004972:	445a      	add	r2, fp
 8004974:	9209      	str	r2, [sp, #36]	@ 0x24
 8004976:	f89a 3000 	ldrb.w	r3, [sl]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 809f 	beq.w	8004abe <_svfiprintf_r+0x1c6>
 8004980:	2300      	movs	r3, #0
 8004982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004986:	f10a 0a01 	add.w	sl, sl, #1
 800498a:	9304      	str	r3, [sp, #16]
 800498c:	9307      	str	r3, [sp, #28]
 800498e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004992:	931a      	str	r3, [sp, #104]	@ 0x68
 8004994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004998:	4654      	mov	r4, sl
 800499a:	2205      	movs	r2, #5
 800499c:	484f      	ldr	r0, [pc, #316]	@ (8004adc <_svfiprintf_r+0x1e4>)
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	f000 fa5f 	bl	8004e64 <memchr>
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	b9d8      	cbnz	r0, 80049e2 <_svfiprintf_r+0xea>
 80049aa:	06d0      	lsls	r0, r2, #27
 80049ac:	bf44      	itt	mi
 80049ae:	2320      	movmi	r3, #32
 80049b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b4:	0711      	lsls	r1, r2, #28
 80049b6:	bf44      	itt	mi
 80049b8:	232b      	movmi	r3, #43	@ 0x2b
 80049ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049be:	f89a 3000 	ldrb.w	r3, [sl]
 80049c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c4:	d015      	beq.n	80049f2 <_svfiprintf_r+0xfa>
 80049c6:	9a07      	ldr	r2, [sp, #28]
 80049c8:	4654      	mov	r4, sl
 80049ca:	2000      	movs	r0, #0
 80049cc:	f04f 0c0a 	mov.w	ip, #10
 80049d0:	4621      	mov	r1, r4
 80049d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d6:	3b30      	subs	r3, #48	@ 0x30
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d94b      	bls.n	8004a74 <_svfiprintf_r+0x17c>
 80049dc:	b1b0      	cbz	r0, 8004a0c <_svfiprintf_r+0x114>
 80049de:	9207      	str	r2, [sp, #28]
 80049e0:	e014      	b.n	8004a0c <_svfiprintf_r+0x114>
 80049e2:	eba0 0308 	sub.w	r3, r0, r8
 80049e6:	46a2      	mov	sl, r4
 80049e8:	fa09 f303 	lsl.w	r3, r9, r3
 80049ec:	4313      	orrs	r3, r2
 80049ee:	9304      	str	r3, [sp, #16]
 80049f0:	e7d2      	b.n	8004998 <_svfiprintf_r+0xa0>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	9103      	str	r1, [sp, #12]
 80049fc:	bfbb      	ittet	lt
 80049fe:	425b      	neglt	r3, r3
 8004a00:	f042 0202 	orrlt.w	r2, r2, #2
 8004a04:	9307      	strge	r3, [sp, #28]
 8004a06:	9307      	strlt	r3, [sp, #28]
 8004a08:	bfb8      	it	lt
 8004a0a:	9204      	strlt	r2, [sp, #16]
 8004a0c:	7823      	ldrb	r3, [r4, #0]
 8004a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a10:	d10a      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a12:	7863      	ldrb	r3, [r4, #1]
 8004a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a16:	d132      	bne.n	8004a7e <_svfiprintf_r+0x186>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	3402      	adds	r4, #2
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a24:	9203      	str	r2, [sp, #12]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004aec <_svfiprintf_r+0x1f4>
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	7821      	ldrb	r1, [r4, #0]
 8004a30:	4650      	mov	r0, sl
 8004a32:	f000 fa17 	bl	8004e64 <memchr>
 8004a36:	b138      	cbz	r0, 8004a48 <_svfiprintf_r+0x150>
 8004a38:	eba0 000a 	sub.w	r0, r0, sl
 8004a3c:	2240      	movs	r2, #64	@ 0x40
 8004a3e:	9b04      	ldr	r3, [sp, #16]
 8004a40:	3401      	adds	r4, #1
 8004a42:	4082      	lsls	r2, r0
 8004a44:	4313      	orrs	r3, r2
 8004a46:	9304      	str	r3, [sp, #16]
 8004a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	4824      	ldr	r0, [pc, #144]	@ (8004ae0 <_svfiprintf_r+0x1e8>)
 8004a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a54:	f000 fa06 	bl	8004e64 <memchr>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d036      	beq.n	8004aca <_svfiprintf_r+0x1d2>
 8004a5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <_svfiprintf_r+0x1ec>)
 8004a5e:	bb1b      	cbnz	r3, 8004aa8 <_svfiprintf_r+0x1b0>
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	3307      	adds	r3, #7
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	3308      	adds	r3, #8
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6e:	4433      	add	r3, r6
 8004a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a72:	e76a      	b.n	800494a <_svfiprintf_r+0x52>
 8004a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a78:	460c      	mov	r4, r1
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e7a8      	b.n	80049d0 <_svfiprintf_r+0xd8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	3401      	adds	r4, #1
 8004a82:	f04f 0c0a 	mov.w	ip, #10
 8004a86:	4619      	mov	r1, r3
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a90:	3a30      	subs	r2, #48	@ 0x30
 8004a92:	2a09      	cmp	r2, #9
 8004a94:	d903      	bls.n	8004a9e <_svfiprintf_r+0x1a6>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0c6      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9a:	9105      	str	r1, [sp, #20]
 8004a9c:	e7c4      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e7f0      	b.n	8004a8a <_svfiprintf_r+0x192>
 8004aa8:	ab03      	add	r3, sp, #12
 8004aaa:	462a      	mov	r2, r5
 8004aac:	a904      	add	r1, sp, #16
 8004aae:	4638      	mov	r0, r7
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	1c42      	adds	r2, r0, #1
 8004aba:	4606      	mov	r6, r0
 8004abc:	d1d6      	bne.n	8004a6c <_svfiprintf_r+0x174>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	065b      	lsls	r3, r3, #25
 8004ac2:	f53f af2d 	bmi.w	8004920 <_svfiprintf_r+0x28>
 8004ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac8:	e72c      	b.n	8004924 <_svfiprintf_r+0x2c>
 8004aca:	ab03      	add	r3, sp, #12
 8004acc:	462a      	mov	r2, r5
 8004ace:	a904      	add	r1, sp, #16
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4b04      	ldr	r3, [pc, #16]	@ (8004ae8 <_svfiprintf_r+0x1f0>)
 8004ad6:	f000 f87d 	bl	8004bd4 <_printf_i>
 8004ada:	e7ed      	b.n	8004ab8 <_svfiprintf_r+0x1c0>
 8004adc:	08005115 	.word	0x08005115
 8004ae0:	0800511f 	.word	0x0800511f
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	08004841 	.word	0x08004841
 8004aec:	0800511b 	.word	0x0800511b

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4616      	mov	r6, r2
 8004af6:	4698      	mov	r8, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	4607      	mov	r7, r0
 8004afc:	690b      	ldr	r3, [r1, #16]
 8004afe:	460c      	mov	r4, r1
 8004b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bfb8      	it	lt
 8004b08:	4613      	movlt	r3, r2
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b10:	b10a      	cbz	r2, 8004b16 <_printf_common+0x26>
 8004b12:	3301      	adds	r3, #1
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	6833      	ldrmi	r3, [r6, #0]
 8004b1e:	3302      	addmi	r3, #2
 8004b20:	6033      	strmi	r3, [r6, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d106      	bne.n	8004b38 <_printf_common+0x48>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc2b      	bgt.n	8004b90 <_printf_common+0xa0>
 8004b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	3b00      	subs	r3, #0
 8004b40:	bf18      	it	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	0692      	lsls	r2, r2, #26
 8004b46:	d430      	bmi.n	8004baa <_printf_common+0xba>
 8004b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c8      	blx	r9
 8004b52:	3001      	adds	r0, #1
 8004b54:	d023      	beq.n	8004b9e <_printf_common+0xae>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	341a      	adds	r4, #26
 8004b5a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	bf0a      	itet	eq
 8004b66:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8004b6a:	2500      	movne	r5, #0
 8004b6c:	6833      	ldreq	r3, [r6, #0]
 8004b6e:	f04f 0600 	mov.w	r6, #0
 8004b72:	bf08      	it	eq
 8004b74:	1aed      	subeq	r5, r5, r3
 8004b76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b7a:	bf08      	it	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bfc4      	itt	gt
 8004b84:	1a9b      	subgt	r3, r3, r2
 8004b86:	18ed      	addgt	r5, r5, r3
 8004b88:	42b5      	cmp	r5, r6
 8004b8a:	d11a      	bne.n	8004bc2 <_printf_common+0xd2>
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	e008      	b.n	8004ba2 <_printf_common+0xb2>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4652      	mov	r2, sl
 8004b94:	4641      	mov	r1, r8
 8004b96:	4638      	mov	r0, r7
 8004b98:	47c8      	blx	r9
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d103      	bne.n	8004ba6 <_printf_common+0xb6>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	e7c1      	b.n	8004b2e <_printf_common+0x3e>
 8004baa:	18e1      	adds	r1, r4, r3
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	2030      	movs	r0, #48	@ 0x30
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	4422      	add	r2, r4
 8004bb4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc0:	e7c2      	b.n	8004b48 <_printf_common+0x58>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c8      	blx	r9
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0e6      	beq.n	8004b9e <_printf_common+0xae>
 8004bd0:	3601      	adds	r6, #1
 8004bd2:	e7d9      	b.n	8004b88 <_printf_common+0x98>

08004bd4 <_printf_i>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	7e0f      	ldrb	r7, [r1, #24]
 8004bda:	4691      	mov	r9, r2
 8004bdc:	4680      	mov	r8, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	2f78      	cmp	r7, #120	@ 0x78
 8004be2:	469a      	mov	sl, r3
 8004be4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bea:	d807      	bhi.n	8004bfc <_printf_i+0x28>
 8004bec:	2f62      	cmp	r7, #98	@ 0x62
 8004bee:	d80a      	bhi.n	8004c06 <_printf_i+0x32>
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f000 80d1 	beq.w	8004d98 <_printf_i+0x1c4>
 8004bf6:	2f58      	cmp	r7, #88	@ 0x58
 8004bf8:	f000 80b8 	beq.w	8004d6c <_printf_i+0x198>
 8004bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c04:	e03a      	b.n	8004c7c <_printf_i+0xa8>
 8004c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0a:	2b15      	cmp	r3, #21
 8004c0c:	d8f6      	bhi.n	8004bfc <_printf_i+0x28>
 8004c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c14 <_printf_i+0x40>)
 8004c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c14:	08004c6d 	.word	0x08004c6d
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004bfd 	.word	0x08004bfd
 8004c20:	08004bfd 	.word	0x08004bfd
 8004c24:	08004bfd 	.word	0x08004bfd
 8004c28:	08004bfd 	.word	0x08004bfd
 8004c2c:	08004c81 	.word	0x08004c81
 8004c30:	08004bfd 	.word	0x08004bfd
 8004c34:	08004bfd 	.word	0x08004bfd
 8004c38:	08004bfd 	.word	0x08004bfd
 8004c3c:	08004bfd 	.word	0x08004bfd
 8004c40:	08004d7f 	.word	0x08004d7f
 8004c44:	08004cab 	.word	0x08004cab
 8004c48:	08004d39 	.word	0x08004d39
 8004c4c:	08004bfd 	.word	0x08004bfd
 8004c50:	08004bfd 	.word	0x08004bfd
 8004c54:	08004da1 	.word	0x08004da1
 8004c58:	08004bfd 	.word	0x08004bfd
 8004c5c:	08004cab 	.word	0x08004cab
 8004c60:	08004bfd 	.word	0x08004bfd
 8004c64:	08004bfd 	.word	0x08004bfd
 8004c68:	08004d41 	.word	0x08004d41
 8004c6c:	6833      	ldr	r3, [r6, #0]
 8004c6e:	1d1a      	adds	r2, r3, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e09c      	b.n	8004dba <_printf_i+0x1e6>
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	0606      	lsls	r6, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xbc>
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <_printf_i+0xc4>
 8004c90:	0645      	lsls	r5, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xb8>
 8004c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c98:	2d00      	cmp	r5, #0
 8004c9a:	da03      	bge.n	8004ca4 <_printf_i+0xd0>
 8004c9c:	232d      	movs	r3, #45	@ 0x2d
 8004c9e:	426d      	negs	r5, r5
 8004ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca4:	4858      	ldr	r0, [pc, #352]	@ (8004e08 <_printf_i+0x234>)
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	e011      	b.n	8004cce <_printf_i+0xfa>
 8004caa:	6821      	ldr	r1, [r4, #0]
 8004cac:	6833      	ldr	r3, [r6, #0]
 8004cae:	0608      	lsls	r0, r1, #24
 8004cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb4:	d402      	bmi.n	8004cbc <_printf_i+0xe8>
 8004cb6:	0649      	lsls	r1, r1, #25
 8004cb8:	bf48      	it	mi
 8004cba:	b2ad      	uxthmi	r5, r5
 8004cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	4851      	ldr	r0, [pc, #324]	@ (8004e08 <_printf_i+0x234>)
 8004cc2:	bf14      	ite	ne
 8004cc4:	230a      	movne	r3, #10
 8004cc6:	2308      	moveq	r3, #8
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cce:	6866      	ldr	r6, [r4, #4]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	60a6      	str	r6, [r4, #8]
 8004cd4:	db05      	blt.n	8004ce2 <_printf_i+0x10e>
 8004cd6:	6821      	ldr	r1, [r4, #0]
 8004cd8:	432e      	orrs	r6, r5
 8004cda:	f021 0104 	bic.w	r1, r1, #4
 8004cde:	6021      	str	r1, [r4, #0]
 8004ce0:	d04b      	beq.n	8004d7a <_printf_i+0x1a6>
 8004ce2:	4616      	mov	r6, r2
 8004ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8004cec:	5dc7      	ldrb	r7, [r0, r7]
 8004cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf2:	462f      	mov	r7, r5
 8004cf4:	460d      	mov	r5, r1
 8004cf6:	42bb      	cmp	r3, r7
 8004cf8:	d9f4      	bls.n	8004ce4 <_printf_i+0x110>
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d10b      	bne.n	8004d16 <_printf_i+0x142>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	07df      	lsls	r7, r3, #31
 8004d02:	d508      	bpl.n	8004d16 <_printf_i+0x142>
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	6861      	ldr	r1, [r4, #4]
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	bfde      	ittt	le
 8004d0c:	2330      	movle	r3, #48	@ 0x30
 8004d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d12:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d16:	1b92      	subs	r2, r2, r6
 8004d18:	6122      	str	r2, [r4, #16]
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	aa03      	add	r2, sp, #12
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4640      	mov	r0, r8
 8004d22:	f8cd a000 	str.w	sl, [sp]
 8004d26:	f7ff fee3 	bl	8004af0 <_printf_common>
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d14a      	bne.n	8004dc4 <_printf_i+0x1f0>
 8004d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d32:	b004      	add	sp, #16
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	2778      	movs	r7, #120	@ 0x78
 8004d42:	4832      	ldr	r0, [pc, #200]	@ (8004e0c <_printf_i+0x238>)
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4a:	061f      	lsls	r7, r3, #24
 8004d4c:	6831      	ldr	r1, [r6, #0]
 8004d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d52:	d402      	bmi.n	8004d5a <_printf_i+0x186>
 8004d54:	065f      	lsls	r7, r3, #25
 8004d56:	bf48      	it	mi
 8004d58:	b2ad      	uxthmi	r5, r5
 8004d5a:	6031      	str	r1, [r6, #0]
 8004d5c:	07d9      	lsls	r1, r3, #31
 8004d5e:	bf44      	itt	mi
 8004d60:	f043 0320 	orrmi.w	r3, r3, #32
 8004d64:	6023      	strmi	r3, [r4, #0]
 8004d66:	b11d      	cbz	r5, 8004d70 <_printf_i+0x19c>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	e7ad      	b.n	8004cc8 <_printf_i+0xf4>
 8004d6c:	4826      	ldr	r0, [pc, #152]	@ (8004e08 <_printf_i+0x234>)
 8004d6e:	e7e9      	b.n	8004d44 <_printf_i+0x170>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	f023 0320 	bic.w	r3, r3, #32
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	e7f6      	b.n	8004d68 <_printf_i+0x194>
 8004d7a:	4616      	mov	r6, r2
 8004d7c:	e7bd      	b.n	8004cfa <_printf_i+0x126>
 8004d7e:	6833      	ldr	r3, [r6, #0]
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1d18      	adds	r0, r3, #4
 8004d84:	6961      	ldr	r1, [r4, #20]
 8004d86:	6030      	str	r0, [r6, #0]
 8004d88:	062e      	lsls	r6, r5, #24
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	d501      	bpl.n	8004d92 <_printf_i+0x1be>
 8004d8e:	6019      	str	r1, [r3, #0]
 8004d90:	e002      	b.n	8004d98 <_printf_i+0x1c4>
 8004d92:	0668      	lsls	r0, r5, #25
 8004d94:	d5fb      	bpl.n	8004d8e <_printf_i+0x1ba>
 8004d96:	8019      	strh	r1, [r3, #0]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4616      	mov	r6, r2
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	e7bc      	b.n	8004d1a <_printf_i+0x146>
 8004da0:	6833      	ldr	r3, [r6, #0]
 8004da2:	2100      	movs	r1, #0
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	6032      	str	r2, [r6, #0]
 8004da8:	681e      	ldr	r6, [r3, #0]
 8004daa:	6862      	ldr	r2, [r4, #4]
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f859 	bl	8004e64 <memchr>
 8004db2:	b108      	cbz	r0, 8004db8 <_printf_i+0x1e4>
 8004db4:	1b80      	subs	r0, r0, r6
 8004db6:	6060      	str	r0, [r4, #4]
 8004db8:	6863      	ldr	r3, [r4, #4]
 8004dba:	6123      	str	r3, [r4, #16]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc2:	e7aa      	b.n	8004d1a <_printf_i+0x146>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	4649      	mov	r1, r9
 8004dca:	4640      	mov	r0, r8
 8004dcc:	47d0      	blx	sl
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d0ad      	beq.n	8004d2e <_printf_i+0x15a>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	079b      	lsls	r3, r3, #30
 8004dd6:	d413      	bmi.n	8004e00 <_printf_i+0x22c>
 8004dd8:	68e0      	ldr	r0, [r4, #12]
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	4298      	cmp	r0, r3
 8004dde:	bfb8      	it	lt
 8004de0:	4618      	movlt	r0, r3
 8004de2:	e7a6      	b.n	8004d32 <_printf_i+0x15e>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4632      	mov	r2, r6
 8004de8:	4649      	mov	r1, r9
 8004dea:	4640      	mov	r0, r8
 8004dec:	47d0      	blx	sl
 8004dee:	3001      	adds	r0, #1
 8004df0:	d09d      	beq.n	8004d2e <_printf_i+0x15a>
 8004df2:	3501      	adds	r5, #1
 8004df4:	68e3      	ldr	r3, [r4, #12]
 8004df6:	9903      	ldr	r1, [sp, #12]
 8004df8:	1a5b      	subs	r3, r3, r1
 8004dfa:	42ab      	cmp	r3, r5
 8004dfc:	dcf2      	bgt.n	8004de4 <_printf_i+0x210>
 8004dfe:	e7eb      	b.n	8004dd8 <_printf_i+0x204>
 8004e00:	2500      	movs	r5, #0
 8004e02:	f104 0619 	add.w	r6, r4, #25
 8004e06:	e7f5      	b.n	8004df4 <_printf_i+0x220>
 8004e08:	08005126 	.word	0x08005126
 8004e0c:	08005137 	.word	0x08005137

08004e10 <memmove>:
 8004e10:	4288      	cmp	r0, r1
 8004e12:	b510      	push	{r4, lr}
 8004e14:	eb01 0402 	add.w	r4, r1, r2
 8004e18:	d902      	bls.n	8004e20 <memmove+0x10>
 8004e1a:	4284      	cmp	r4, r0
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	d807      	bhi.n	8004e30 <memmove+0x20>
 8004e20:	1e43      	subs	r3, r0, #1
 8004e22:	42a1      	cmp	r1, r4
 8004e24:	d008      	beq.n	8004e38 <memmove+0x28>
 8004e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2e:	e7f8      	b.n	8004e22 <memmove+0x12>
 8004e30:	4402      	add	r2, r0
 8004e32:	4601      	mov	r1, r0
 8004e34:	428a      	cmp	r2, r1
 8004e36:	d100      	bne.n	8004e3a <memmove+0x2a>
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e42:	e7f7      	b.n	8004e34 <memmove+0x24>

08004e44 <_sbrk_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	2300      	movs	r3, #0
 8004e48:	4d05      	ldr	r5, [pc, #20]	@ (8004e60 <_sbrk_r+0x1c>)
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	f7fb fe9a 	bl	8000b88 <_sbrk>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_sbrk_r+0x1a>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_sbrk_r+0x1a>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	200002e8 	.word	0x200002e8

08004e64 <memchr>:
 8004e64:	b2c9      	uxtb	r1, r1
 8004e66:	4603      	mov	r3, r0
 8004e68:	4402      	add	r2, r0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	d101      	bne.n	8004e76 <memchr+0x12>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e003      	b.n	8004e7e <memchr+0x1a>
 8004e76:	7804      	ldrb	r4, [r0, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	428c      	cmp	r4, r1
 8004e7c:	d1f6      	bne.n	8004e6c <memchr+0x8>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <memcpy>:
 8004e80:	440a      	add	r2, r1
 8004e82:	1e43      	subs	r3, r0, #1
 8004e84:	4291      	cmp	r1, r2
 8004e86:	d100      	bne.n	8004e8a <memcpy+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e90:	4291      	cmp	r1, r2
 8004e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e96:	d1f9      	bne.n	8004e8c <memcpy+0xc>
 8004e98:	bd10      	pop	{r4, pc}

08004e9a <_realloc_r>:
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	b921      	cbnz	r1, 8004eb0 <_realloc_r+0x16>
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	f7ff bc3c 	b.w	8004728 <_malloc_r>
 8004eb0:	b92a      	cbnz	r2, 8004ebe <_realloc_r+0x24>
 8004eb2:	4625      	mov	r5, r4
 8004eb4:	f7ff fbcc 	bl	8004650 <_free_r>
 8004eb8:	4628      	mov	r0, r5
 8004eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ebe:	f000 f81a 	bl	8004ef6 <_malloc_usable_size_r>
 8004ec2:	4284      	cmp	r4, r0
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	d802      	bhi.n	8004ece <_realloc_r+0x34>
 8004ec8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ecc:	d8f4      	bhi.n	8004eb8 <_realloc_r+0x1e>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff fc29 	bl	8004728 <_malloc_r>
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	b908      	cbnz	r0, 8004ede <_realloc_r+0x44>
 8004eda:	4645      	mov	r5, r8
 8004edc:	e7ec      	b.n	8004eb8 <_realloc_r+0x1e>
 8004ede:	42b4      	cmp	r4, r6
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	bf28      	it	cs
 8004ee6:	4632      	movcs	r2, r6
 8004ee8:	f7ff ffca 	bl	8004e80 <memcpy>
 8004eec:	4629      	mov	r1, r5
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7ff fbae 	bl	8004650 <_free_r>
 8004ef4:	e7f1      	b.n	8004eda <_realloc_r+0x40>

08004ef6 <_malloc_usable_size_r>:
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	1f18      	subs	r0, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bfbc      	itt	lt
 8004f00:	580b      	ldrlt	r3, [r1, r0]
 8004f02:	18c0      	addlt	r0, r0, r3
 8004f04:	4770      	bx	lr
	...

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
