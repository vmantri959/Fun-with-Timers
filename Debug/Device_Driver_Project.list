
Device_Driver_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d0  080038d0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038d0  080038d0  000048d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038d8  080038d8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038dc  080038dc  000048dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080038e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080038ec  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080038ec  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ab7  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232d  00000000  00000000  0001baf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  0001de28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2d  00000000  00000000  0001ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298a3  00000000  00000000  0001fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017214  00000000  00000000  000492b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ddac  00000000  00000000  000604c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  0016e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000ccf4  00000000  00000000  00170bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0017d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08003824 	.word	0x08003824

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08003824 	.word	0x08003824

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	2400      	movs	r4, #0
 80005b6:	9403      	str	r4, [sp, #12]
 80005b8:	9404      	str	r4, [sp, #16]
 80005ba:	9405      	str	r4, [sp, #20]
 80005bc:	9406      	str	r4, [sp, #24]
 80005be:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c0:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_GPIO_Init+0x70>)
 80005c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c4:	f042 0204 	orr.w	r2, r2, #4
 80005c8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005cc:	f002 0204 	and.w	r2, r2, #4
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005de:	f002 0201 	and.w	r2, r2, #1
 80005e2:	9201      	str	r2, [sp, #4]
 80005e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005e8:	f042 0220 	orr.w	r2, r2, #32
 80005ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	9302      	str	r3, [sp, #8]
 80005f6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 80005f8:	4d0a      	ldr	r5, [pc, #40]	@ (8000624 <MX_GPIO_Init+0x74>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000600:	4628      	mov	r0, r5
 8000602:	f000 fc65 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF11 PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000606:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800060a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000614:	a903      	add	r1, sp, #12
 8000616:	4628      	mov	r0, r5
 8000618:	f000 fb76 	bl	8000d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800061c:	b009      	add	sp, #36	@ 0x24
 800061e:	bd30      	pop	{r4, r5, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	42021400 	.word	0x42021400

08000628 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062a:	e7fe      	b.n	800062a <Error_Handler+0x2>

0800062c <MX_UART4_Init>:
{
 800062c:	b508      	push	{r3, lr}
  huart4.Instance = UART4;
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <MX_UART4_Init+0x58>)
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <MX_UART4_Init+0x5c>)
 8000632:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8000634:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000638:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	2300      	movs	r3, #0
 800063c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800063e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000640:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000642:	220c      	movs	r2, #12
 8000644:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000650:	f002 fff8 	bl	8003644 <HAL_UART_Init>
 8000654:	b970      	cbnz	r0, 8000674 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	480a      	ldr	r0, [pc, #40]	@ (8000684 <MX_UART4_Init+0x58>)
 800065a:	f003 f86c 	bl	8003736 <HAL_UARTEx_SetTxFifoThreshold>
 800065e:	b958      	cbnz	r0, 8000678 <MX_UART4_Init+0x4c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4808      	ldr	r0, [pc, #32]	@ (8000684 <MX_UART4_Init+0x58>)
 8000664:	f003 f88c 	bl	8003780 <HAL_UARTEx_SetRxFifoThreshold>
 8000668:	b940      	cbnz	r0, 800067c <MX_UART4_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <MX_UART4_Init+0x58>)
 800066c:	f003 f844 	bl	80036f8 <HAL_UARTEx_DisableFifoMode>
 8000670:	b930      	cbnz	r0, 8000680 <MX_UART4_Init+0x54>
}
 8000672:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000674:	f7ff ffd8 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000678:	f7ff ffd6 	bl	8000628 <Error_Handler>
    Error_Handler();
 800067c:	f7ff ffd4 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000680:	f7ff ffd2 	bl	8000628 <Error_Handler>
 8000684:	20000028 	.word	0x20000028
 8000688:	40004c00 	.word	0x40004c00

0800068c <MX_TIM5_Init>:
{
 800068c:	b500      	push	{lr}
 800068e:	b091      	sub	sp, #68	@ 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000690:	2300      	movs	r3, #0
 8000692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000694:	930c      	str	r3, [sp, #48]	@ 0x30
 8000696:	930d      	str	r3, [sp, #52]	@ 0x34
 8000698:	930e      	str	r3, [sp, #56]	@ 0x38
 800069a:	930f      	str	r3, [sp, #60]	@ 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	9308      	str	r3, [sp, #32]
 800069e:	9309      	str	r3, [sp, #36]	@ 0x24
 80006a0:	930a      	str	r3, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	9304      	str	r3, [sp, #16]
 80006aa:	9305      	str	r3, [sp, #20]
 80006ac:	9306      	str	r3, [sp, #24]
 80006ae:	9307      	str	r3, [sp, #28]
  htim5.Instance = TIM5;
 80006b0:	4824      	ldr	r0, [pc, #144]	@ (8000744 <MX_TIM5_Init+0xb8>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <MX_TIM5_Init+0xbc>)
 80006b4:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 4000-1;
 80006b6:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80006ba:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 1000-1;
 80006be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006c2:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c6:	2380      	movs	r3, #128	@ 0x80
 80006c8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80006ca:	f002 f841 	bl	8002750 <HAL_TIM_Base_Init>
 80006ce:	bb68      	cbnz	r0, 800072c <MX_TIM5_Init+0xa0>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80006d0:	481c      	ldr	r0, [pc, #112]	@ (8000744 <MX_TIM5_Init+0xb8>)
 80006d2:	f002 f89d 	bl	8002810 <HAL_TIM_PWM_Init>
 80006d6:	bb58      	cbnz	r0, 8000730 <MX_TIM5_Init+0xa4>
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 80006d8:	2108      	movs	r1, #8
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <MX_TIM5_Init+0xb8>)
 80006dc:	f002 f8c8 	bl	8002870 <HAL_TIM_OnePulse_Init>
 80006e0:	bb40      	cbnz	r0, 8000734 <MX_TIM5_Init+0xa8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80006e2:	2306      	movs	r3, #6
 80006e4:	930b      	str	r3, [sp, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80006ea:	a90b      	add	r1, sp, #44	@ 0x2c
 80006ec:	4815      	ldr	r0, [pc, #84]	@ (8000744 <MX_TIM5_Init+0xb8>)
 80006ee:	f002 fafb 	bl	8002ce8 <HAL_TIM_SlaveConfigSynchro>
 80006f2:	bb08      	cbnz	r0, 8000738 <MX_TIM5_Init+0xac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f8:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006fa:	a908      	add	r1, sp, #32
 80006fc:	4811      	ldr	r0, [pc, #68]	@ (8000744 <MX_TIM5_Init+0xb8>)
 80006fe:	f002 fbdf 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	b9d8      	cbnz	r0, 800073c <MX_TIM5_Init+0xb0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000704:	2360      	movs	r3, #96	@ 0x60
 8000706:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 500;
 8000708:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800070c:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800070e:	2302      	movs	r3, #2
 8000710:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000712:	2200      	movs	r2, #0
 8000714:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000716:	a901      	add	r1, sp, #4
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <MX_TIM5_Init+0xb8>)
 800071a:	f002 f95a 	bl	80029d2 <HAL_TIM_PWM_ConfigChannel>
 800071e:	b978      	cbnz	r0, 8000740 <MX_TIM5_Init+0xb4>
  HAL_TIM_MspPostInit(&htim5);
 8000720:	4808      	ldr	r0, [pc, #32]	@ (8000744 <MX_TIM5_Init+0xb8>)
 8000722:	f000 f907 	bl	8000934 <HAL_TIM_MspPostInit>
}
 8000726:	b011      	add	sp, #68	@ 0x44
 8000728:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800072c:	f7ff ff7c 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000730:	f7ff ff7a 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000734:	f7ff ff78 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000738:	f7ff ff76 	bl	8000628 <Error_Handler>
    Error_Handler();
 800073c:	f7ff ff74 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000740:	f7ff ff72 	bl	8000628 <Error_Handler>
 8000744:	200000bc 	.word	0x200000bc
 8000748:	40000c00 	.word	0x40000c00

0800074c <MX_TIM2_Init>:
{
 800074c:	b500      	push	{lr}
 800074e:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	930a      	str	r3, [sp, #40]	@ 0x28
 8000754:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000756:	930c      	str	r3, [sp, #48]	@ 0x30
 8000758:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	9307      	str	r3, [sp, #28]
 800075c:	9308      	str	r3, [sp, #32]
 800075e:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	9302      	str	r3, [sp, #8]
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	9304      	str	r3, [sp, #16]
 800076a:	9305      	str	r3, [sp, #20]
 800076c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800076e:	4823      	ldr	r0, [pc, #140]	@ (80007fc <MX_TIM2_Init+0xb0>)
 8000770:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000774:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 4000-1;
 8000776:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800077a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000-1;
 800077e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000782:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000788:	f001 ffe2 	bl	8002750 <HAL_TIM_Base_Init>
 800078c:	bb60      	cbnz	r0, 80007e8 <MX_TIM2_Init+0x9c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000794:	a90a      	add	r1, sp, #40	@ 0x28
 8000796:	4819      	ldr	r0, [pc, #100]	@ (80007fc <MX_TIM2_Init+0xb0>)
 8000798:	f002 f9c6 	bl	8002b28 <HAL_TIM_ConfigClockSource>
 800079c:	bb30      	cbnz	r0, 80007ec <MX_TIM2_Init+0xa0>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800079e:	4817      	ldr	r0, [pc, #92]	@ (80007fc <MX_TIM2_Init+0xb0>)
 80007a0:	f002 f806 	bl	80027b0 <HAL_TIM_OC_Init>
 80007a4:	bb20      	cbnz	r0, 80007f0 <MX_TIM2_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ae:	a907      	add	r1, sp, #28
 80007b0:	4812      	ldr	r0, [pc, #72]	@ (80007fc <MX_TIM2_Init+0xb0>)
 80007b2:	f002 fb85 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	b9e8      	cbnz	r0, 80007f4 <MX_TIM2_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007b8:	2330      	movs	r3, #48	@ 0x30
 80007ba:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 3000;
 80007bc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80007c0:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2200      	movs	r2, #0
 80007c4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c8:	4669      	mov	r1, sp
 80007ca:	480c      	ldr	r0, [pc, #48]	@ (80007fc <MX_TIM2_Init+0xb0>)
 80007cc:	f002 f8c4 	bl	8002958 <HAL_TIM_OC_ConfigChannel>
 80007d0:	b990      	cbnz	r0, 80007f8 <MX_TIM2_Init+0xac>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80007d2:	480a      	ldr	r0, [pc, #40]	@ (80007fc <MX_TIM2_Init+0xb0>)
 80007d4:	6802      	ldr	r2, [r0, #0]
 80007d6:	6993      	ldr	r3, [r2, #24]
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim2);
 80007de:	f000 f8a9 	bl	8000934 <HAL_TIM_MspPostInit>
}
 80007e2:	b00f      	add	sp, #60	@ 0x3c
 80007e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007e8:	f7ff ff1e 	bl	8000628 <Error_Handler>
    Error_Handler();
 80007ec:	f7ff ff1c 	bl	8000628 <Error_Handler>
    Error_Handler();
 80007f0:	f7ff ff1a 	bl	8000628 <Error_Handler>
    Error_Handler();
 80007f4:	f7ff ff18 	bl	8000628 <Error_Handler>
    Error_Handler();
 80007f8:	f7ff ff16 	bl	8000628 <Error_Handler>
 80007fc:	20000108 	.word	0x20000108

08000800 <SystemClock_Config>:
{
 8000800:	b500      	push	{lr}
 8000802:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000804:	2248      	movs	r2, #72	@ 0x48
 8000806:	2100      	movs	r1, #0
 8000808:	a806      	add	r0, sp, #24
 800080a:	f002 ffde 	bl	80037ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080e:	2300      	movs	r3, #0
 8000810:	9301      	str	r3, [sp, #4]
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	9303      	str	r3, [sp, #12]
 8000816:	9304      	str	r3, [sp, #16]
 8000818:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800081a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800081e:	f000 fb7f 	bl	8000f20 <HAL_PWREx_ControlVoltageScaling>
 8000822:	b9d0      	cbnz	r0, 800085a <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000824:	2310      	movs	r3, #16
 8000826:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800082c:	2300      	movs	r3, #0
 800082e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000830:	2260      	movs	r2, #96	@ 0x60
 8000832:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	a806      	add	r0, sp, #24
 8000838:	f000 fcbe 	bl	80011b8 <HAL_RCC_OscConfig>
 800083c:	b978      	cbnz	r0, 800085e <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000842:	2100      	movs	r1, #0
 8000844:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	a801      	add	r0, sp, #4
 800084e:	f001 f88d 	bl	800196c <HAL_RCC_ClockConfig>
 8000852:	b930      	cbnz	r0, 8000862 <SystemClock_Config+0x62>
}
 8000854:	b019      	add	sp, #100	@ 0x64
 8000856:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800085a:	f7ff fee5 	bl	8000628 <Error_Handler>
    Error_Handler();
 800085e:	f7ff fee3 	bl	8000628 <Error_Handler>
    Error_Handler();
 8000862:	f7ff fee1 	bl	8000628 <Error_Handler>
	...

08000868 <main>:
{
 8000868:	b508      	push	{r3, lr}
  HAL_Init();
 800086a:	f000 f9bf 	bl	8000bec <HAL_Init>
  SystemClock_Config();
 800086e:	f7ff ffc7 	bl	8000800 <SystemClock_Config>
  MX_GPIO_Init();
 8000872:	f7ff fe9d 	bl	80005b0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000876:	f7ff fed9 	bl	800062c <MX_UART4_Init>
  MX_TIM5_Init();
 800087a:	f7ff ff07 	bl	800068c <MX_TIM5_Init>
  MX_TIM2_Init();
 800087e:	f7ff ff65 	bl	800074c <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);        // Start TIM5 PWM output
 8000882:	2100      	movs	r1, #0
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <main+0x38>)
 8000886:	f002 fa67 	bl	8002d58 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);                      // Start TIM1 (master base timer)
 800088a:	4806      	ldr	r0, [pc, #24]	@ (80008a4 <main+0x3c>)
 800088c:	f001 feae 	bl	80025ec <HAL_TIM_Base_Start>
	  HAL_UART_Transmit(&huart4, hello_world, strlen(hello_world), HAL_MAX_DELAY);
 8000890:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000894:	2212      	movs	r2, #18
 8000896:	4904      	ldr	r1, [pc, #16]	@ (80008a8 <main+0x40>)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <main+0x44>)
 800089a:	f002 fe05 	bl	80034a8 <HAL_UART_Transmit>
  while (1)
 800089e:	e7f7      	b.n	8000890 <main+0x28>
 80008a0:	200000bc 	.word	0x200000bc
 80008a4:	20000108 	.word	0x20000108
 80008a8:	0800383c 	.word	0x0800383c
 80008ac:	20000028 	.word	0x20000028

080008b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b500      	push	{lr}
 80008b2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_MspInit+0x34>)
 80008b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008b8:	f042 0201 	orr.w	r2, r2, #1
 80008bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80008be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80008c0:	f002 0201 	and.w	r2, r2, #1
 80008c4:	9200      	str	r2, [sp, #0]
 80008c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80008ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008da:	f000 fb07 	bl	8000eec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	b003      	add	sp, #12
 80008e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80008ea:	6803      	ldr	r3, [r0, #0]
 80008ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008f0:	d004      	beq.n	80008fc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80008f2:	4a0e      	ldr	r2, [pc, #56]	@ (800092c <HAL_TIM_Base_MspInit+0x44>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d00d      	beq.n	8000914 <HAL_TIM_Base_MspInit+0x2c>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 80008f8:	b002      	add	sp, #8
 80008fa:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000902:	f042 0201 	orr.w	r2, r2, #1
 8000906:	659a      	str	r2, [r3, #88]	@ 0x58
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	9b00      	ldr	r3, [sp, #0]
 8000912:	e7f1      	b.n	80008f8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_TIM_Base_MspInit+0x48>)
 8000916:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000918:	f042 0208 	orr.w	r2, r2, #8
 800091c:	659a      	str	r2, [r3, #88]	@ 0x58
 800091e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	9b01      	ldr	r3, [sp, #4]
}
 8000928:	e7e6      	b.n	80008f8 <HAL_TIM_Base_MspInit+0x10>
 800092a:	bf00      	nop
 800092c:	40000c00 	.word	0x40000c00
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000934:	b500      	push	{lr}
 8000936:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2300      	movs	r3, #0
 800093a:	9303      	str	r3, [sp, #12]
 800093c:	9304      	str	r3, [sp, #16]
 800093e:	9305      	str	r3, [sp, #20]
 8000940:	9306      	str	r3, [sp, #24]
 8000942:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800094a:	d005      	beq.n	8000958 <HAL_TIM_MspPostInit+0x24>

    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 800094c:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <HAL_TIM_MspPostInit+0x7c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d019      	beq.n	8000986 <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000952:	b009      	add	sp, #36	@ 0x24
 8000954:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800095c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000972:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000978:	2301      	movs	r3, #1
 800097a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	a903      	add	r1, sp, #12
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <HAL_TIM_MspPostInit+0x80>)
 8000980:	f000 f9c2 	bl	8000d08 <HAL_GPIO_Init>
 8000984:	e7e5      	b.n	8000952 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <HAL_TIM_MspPostInit+0x84>)
 8000988:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800098a:	f042 0201 	orr.w	r2, r2, #1
 800098e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	9302      	str	r3, [sp, #8]
 8000998:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80009a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	a903      	add	r1, sp, #12
 80009a6:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <HAL_TIM_MspPostInit+0x80>)
 80009a8:	f000 f9ae 	bl	8000d08 <HAL_GPIO_Init>
}
 80009ac:	e7d1      	b.n	8000952 <HAL_TIM_MspPostInit+0x1e>
 80009ae:	bf00      	nop
 80009b0:	40000c00 	.word	0x40000c00
 80009b4:	42020000 	.word	0x42020000
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b510      	push	{r4, lr}
 80009be:	b0ac      	sub	sp, #176	@ 0xb0
 80009c0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2100      	movs	r1, #0
 80009c4:	9127      	str	r1, [sp, #156]	@ 0x9c
 80009c6:	9128      	str	r1, [sp, #160]	@ 0xa0
 80009c8:	9129      	str	r1, [sp, #164]	@ 0xa4
 80009ca:	912a      	str	r1, [sp, #168]	@ 0xa8
 80009cc:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ce:	2294      	movs	r2, #148	@ 0x94
 80009d0:	a802      	add	r0, sp, #8
 80009d2:	f002 fefa 	bl	80037ca <memset>
  if(huart->Instance==UART4)
 80009d6:	6822      	ldr	r2, [r4, #0]
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0x80>)
 80009da:	429a      	cmp	r2, r3
 80009dc:	d001      	beq.n	80009e2 <HAL_UART_MspInit+0x26>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80009de:	b02c      	add	sp, #176	@ 0xb0
 80009e0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80009e2:	2308      	movs	r3, #8
 80009e4:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	eb0d 0003 	add.w	r0, sp, r3
 80009ea:	f001 f9ef 	bl	8001dcc <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	bb08      	cbnz	r0, 8000a34 <HAL_UART_MspInit+0x78>
    __HAL_RCC_UART4_CLK_ENABLE();
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <HAL_UART_MspInit+0x84>)
 80009f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009f4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80009f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80009fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009fc:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 8000a00:	9200      	str	r2, [sp, #0]
 8000a02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a06:	f042 0204 	orr.w	r2, r2, #4
 8000a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000a16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a1a:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a26:	2308      	movs	r3, #8
 8000a28:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	a927      	add	r1, sp, #156	@ 0x9c
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 8000a2e:	f000 f96b 	bl	8000d08 <HAL_GPIO_Init>
}
 8000a32:	e7d4      	b.n	80009de <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000a34:	f7ff fdf8 	bl	8000628 <Error_Handler>
 8000a38:	e7da      	b.n	80009f0 <HAL_UART_MspInit+0x34>
 8000a3a:	bf00      	nop
 8000a3c:	40004c00 	.word	0x40004c00
 8000a40:	40021000 	.word	0x40021000
 8000a44:	42020800 	.word	0x42020800

08000a48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler>

08000a4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler>

08000a4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler>

08000a4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler>

08000a50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler>

08000a52 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8d9 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bd08      	pop	{r3, pc}

08000a60 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4a03      	ldr	r2, [pc, #12]	@ (8000a70 <SystemInit+0x10>)
 8000a62:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000a66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000a74:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f013 0f08 	tst.w	r3, #8
 8000a7c:	d116      	bne.n	8000aac <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a84:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000a88:	4a2b      	ldr	r2, [pc, #172]	@ (8000b38 <SystemCoreClockUpdate+0xc4>)
 8000a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a8e:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d848      	bhi.n	8000b2c <SystemCoreClockUpdate+0xb8>
 8000a9a:	e8df f003 	tbb	[pc, r3]
 8000a9e:	470c      	.short	0x470c
 8000aa0:	470f4747 	.word	0x470f4747
 8000aa4:	47134747 	.word	0x47134747
 8000aa8:	4747      	.short	0x4747
 8000aaa:	17          	.byte	0x17
 8000aab:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ab4:	e7e8      	b.n	8000a88 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000ab8:	601a      	str	r2, [r3, #0]
      break;
 8000aba:	e028      	b.n	8000b0e <SystemCoreClockUpdate+0x9a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000abe:	4a20      	ldr	r2, [pc, #128]	@ (8000b40 <SystemCoreClockUpdate+0xcc>)
 8000ac0:	601a      	str	r2, [r3, #0]
      break;
 8000ac2:	e024      	b.n	8000b0e <SystemCoreClockUpdate+0x9a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b40 <SystemCoreClockUpdate+0xcc>)
 8000ac8:	601a      	str	r2, [r3, #0]
      break;
 8000aca:	e020      	b.n	8000b0e <SystemCoreClockUpdate+0x9a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000ace:	68d9      	ldr	r1, [r3, #12]
 8000ad0:	f001 0103 	and.w	r1, r1, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ada:	3301      	adds	r3, #1

      switch (pllsource)
 8000adc:	2902      	cmp	r1, #2
 8000ade:	d004      	beq.n	8000aea <SystemCoreClockUpdate+0x76>
 8000ae0:	2903      	cmp	r1, #3
 8000ae2:	d01f      	beq.n	8000b24 <SystemCoreClockUpdate+0xb0>
        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
          break;

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000ae4:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000ae8:	e002      	b.n	8000af0 <SystemCoreClockUpdate+0x7c>
          pllvco = (HSI_VALUE / pllm);
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <SystemCoreClockUpdate+0xcc>)
 8000aec:	fbb2 f2f3 	udiv	r2, r2, r3
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000af0:	4910      	ldr	r1, [pc, #64]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000af2:	68cb      	ldr	r3, [r1, #12]
 8000af4:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000afc:	68ca      	ldr	r2, [r1, #12]
 8000afe:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8000b02:	3201      	adds	r2, #1
 8000b04:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8000b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000b0c:	6013      	str	r3, [r2, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <SystemCoreClockUpdate+0xc0>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b16:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <SystemCoreClockUpdate+0xd0>)
 8000b18:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	40cb      	lsrs	r3, r1
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	4770      	bx	lr
          pllvco = (HSE_VALUE / pllm);
 8000b24:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <SystemCoreClockUpdate+0xcc>)
 8000b26:	fbb2 f2f3 	udiv	r2, r2, r3
          break;
 8000b2a:	e7e1      	b.n	8000af0 <SystemCoreClockUpdate+0x7c>
      SystemCoreClock = msirange;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <SystemCoreClockUpdate+0xc8>)
 8000b2e:	601a      	str	r2, [r3, #0]
      break;
 8000b30:	e7ed      	b.n	8000b0e <SystemCoreClockUpdate+0x9a>
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	08003850 	.word	0x08003850
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	00f42400 	.word	0x00f42400
 8000b44:	08003898 	.word	0x08003898

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b4c:	f7ff ff88 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b52:	e003      	b.n	8000b5c <LoopCopyDataInit>

08000b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b5a:	3104      	adds	r1, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5c:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b64:	d3f6      	bcc.n	8000b54 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b68:	e002      	b.n	8000b70 <LoopFillZerobss>

08000b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6c:	f842 3b04 	str.w	r3, [r2], #4

08000b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <LoopForever+0x16>)
	cmp	r2, r3
 8000b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b74:	d3f9      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f002 fe31 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fe75 	bl	8000868 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b80:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000b84:	080038e0 	.word	0x080038e0
	ldr	r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b94:	20000158 	.word	0x20000158

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>
	...

08000b9c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b9c:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_InitTick+0x44>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b90b      	cbnz	r3, 8000ba6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000ba4:	4770      	bx	lr
{
 8000ba6:	b510      	push	{r4, lr}
 8000ba8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000baa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000be4 <HAL_InitTick+0x48>)
 8000bb4:	6810      	ldr	r0, [r2, #0]
 8000bb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bba:	f000 f891 	bl	8000ce0 <HAL_SYSTICK_Config>
 8000bbe:	b968      	cbnz	r0, 8000bdc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	2c07      	cmp	r4, #7
 8000bc2:	d901      	bls.n	8000bc8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	e00a      	b.n	8000bde <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4621      	mov	r1, r4
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 f876 	bl	8000cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <HAL_InitTick+0x4c>)
 8000bd6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e000      	b.n	8000bde <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
}
 8000bde:	bd10      	pop	{r4, pc}
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008

08000bec <HAL_Init>:
{
 8000bec:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000bee:	2004      	movs	r0, #4
 8000bf0:	f000 f854 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 8000bf4:	f7ff ff3e 	bl	8000a74 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf8:	2007      	movs	r0, #7
 8000bfa:	f7ff ffcf 	bl	8000b9c <HAL_InitTick>
 8000bfe:	b110      	cbz	r0, 8000c06 <HAL_Init+0x1a>
    status = HAL_ERROR;
 8000c00:	2401      	movs	r4, #1
}
 8000c02:	4620      	mov	r0, r4
 8000c04:	bd10      	pop	{r4, pc}
 8000c06:	4604      	mov	r4, r0
    HAL_MspInit();
 8000c08:	f7ff fe52 	bl	80008b0 <HAL_MspInit>
 8000c0c:	e7f9      	b.n	8000c02 <HAL_Init+0x16>
	...

08000c10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b03      	ldr	r3, [pc, #12]	@ (8000c20 <HAL_IncTick+0x10>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <HAL_IncTick+0x14>)
 8000c16:	6811      	ldr	r1, [r2, #0]
 8000c18:	440b      	add	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000004 	.word	0x20000004
 8000c24:	20000154 	.word	0x20000154

08000c28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c28:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <HAL_GetTick+0x8>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000154 	.word	0x20000154

08000c34 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000c34:	2800      	cmp	r0, #0
 8000c36:	db08      	blt.n	8000c4a <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	0149      	lsls	r1, r1, #5
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000c40:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000c44:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000c48:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	f000 000f 	and.w	r0, r0, #15
 8000c4e:	0149      	lsls	r1, r1, #5
 8000c50:	b2c9      	uxtb	r1, r1
 8000c52:	4b01      	ldr	r3, [pc, #4]	@ (8000c58 <__NVIC_SetPriority+0x24>)
 8000c54:	5419      	strb	r1, [r3, r0]
  }
}
 8000c56:	4770      	bx	lr
 8000c58:	e000ed14 	.word	0xe000ed14

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c62:	f1c0 0c07 	rsb	ip, r0, #7
 8000c66:	f1bc 0f03 	cmp.w	ip, #3
 8000c6a:	bf28      	it	cs
 8000c6c:	f04f 0c03 	movcs.w	ip, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c70:	1cc3      	adds	r3, r0, #3
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d90f      	bls.n	8000c96 <NVIC_EncodePriority+0x3a>
 8000c76:	1f03      	subs	r3, r0, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000c7c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000c80:	ea21 0100 	bic.w	r1, r1, r0
 8000c84:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c86:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c8a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000c8e:	ea41 0002 	orr.w	r0, r1, r2
 8000c92:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	2300      	movs	r3, #0
 8000c98:	e7ee      	b.n	8000c78 <NVIC_EncodePriority+0x1c>
	...

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	0200      	lsls	r0, r0, #8
 8000caa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000cb8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_NVIC_SetPriority+0x1c>)
 8000cc6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000ccc:	f7ff ffc6 	bl	8000c5c <NVIC_EncodePriority>
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f7ff ffae 	bl	8000c34 <__NVIC_SetPriority>
}
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce6:	d20b      	bcs.n	8000d00 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000cec:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <HAL_SYSTICK_Config+0x24>)
 8000cf0:	21e0      	movs	r1, #224	@ 0xe0
 8000cf2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d00:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 8000d0a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d0c:	e065      	b.n	8000dda <HAL_GPIO_Init+0xd2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d10:	005e      	lsls	r6, r3, #1
 8000d12:	2403      	movs	r4, #3
 8000d14:	40b4      	lsls	r4, r6
 8000d16:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	68cc      	ldr	r4, [r1, #12]
 8000d1c:	40b4      	lsls	r4, r6
 8000d1e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000d20:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d22:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d24:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d28:	684c      	ldr	r4, [r1, #4]
 8000d2a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000d2e:	409c      	lsls	r4, r3
 8000d30:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000d32:	6044      	str	r4, [r0, #4]
 8000d34:	e062      	b.n	8000dfc <HAL_GPIO_Init+0xf4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d36:	08dd      	lsrs	r5, r3, #3
 8000d38:	3508      	adds	r5, #8
 8000d3a:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000d3e:	f003 0c07 	and.w	ip, r3, #7
 8000d42:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d46:	f04f 0e0f 	mov.w	lr, #15
 8000d4a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8000d4e:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d52:	690c      	ldr	r4, [r1, #16]
 8000d54:	fa04 f40c 	lsl.w	r4, r4, ip
 8000d58:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8000d60:	e063      	b.n	8000e2a <HAL_GPIO_Init+0x122>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d62:	2406      	movs	r4, #6
 8000d64:	e000      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000d66:	2400      	movs	r4, #0
 8000d68:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d6c:	432c      	orrs	r4, r5
        EXTI->EXTICR[position >> 2U] = temp;
 8000d6e:	4d56      	ldr	r5, [pc, #344]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000d70:	f10c 0c18 	add.w	ip, ip, #24
 8000d74:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d78:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000d7a:	43d4      	mvns	r4, r2
 8000d7c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d80:	684f      	ldr	r7, [r1, #4]
 8000d82:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8000d86:	d001      	beq.n	8000d8c <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 8000d88:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000d8c:	4d4e      	ldr	r5, [pc, #312]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000d8e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8000d90:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000d92:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d96:	684f      	ldr	r7, [r1, #4]
 8000d98:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8000d9c:	d001      	beq.n	8000da2 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000d9e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000da2:	4d49      	ldr	r5, [pc, #292]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000da4:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000da6:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 8000daa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dae:	684f      	ldr	r7, [r1, #4]
 8000db0:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000db4:	d001      	beq.n	8000dba <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8000db6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8000dba:	4d43      	ldr	r5, [pc, #268]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000dbc:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        temp = EXTI->IMR1;
 8000dc0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8000dc4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dc6:	684e      	ldr	r6, [r1, #4]
 8000dc8:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000dcc:	d001      	beq.n	8000dd2 <HAL_GPIO_Init+0xca>
        {
          temp |= iocurrent;
 8000dce:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8000dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000dd4:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 8000dd8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dda:	680a      	ldr	r2, [r1, #0]
 8000ddc:	fa32 f403 	lsrs.w	r4, r2, r3
 8000de0:	d071      	beq.n	8000ec6 <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000de2:	f04f 0c01 	mov.w	ip, #1
 8000de6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0U)
 8000dea:	ea1c 0202 	ands.w	r2, ip, r2
 8000dee:	d0f3      	beq.n	8000dd8 <HAL_GPIO_Init+0xd0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	684c      	ldr	r4, [r1, #4]
 8000df2:	f004 0403 	and.w	r4, r4, #3
 8000df6:	3c01      	subs	r4, #1
 8000df8:	2c01      	cmp	r4, #1
 8000dfa:	d988      	bls.n	8000d0e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	684c      	ldr	r4, [r1, #4]
 8000dfe:	f004 0403 	and.w	r4, r4, #3
 8000e02:	2c03      	cmp	r4, #3
 8000e04:	d00c      	beq.n	8000e20 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 8000e06:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e08:	005d      	lsls	r5, r3, #1
 8000e0a:	f04f 0c03 	mov.w	ip, #3
 8000e0e:	fa0c fc05 	lsl.w	ip, ip, r5
 8000e12:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e16:	688c      	ldr	r4, [r1, #8]
 8000e18:	40ac      	lsls	r4, r5
 8000e1a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8000e1e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	684c      	ldr	r4, [r1, #4]
 8000e22:	f004 0403 	and.w	r4, r4, #3
 8000e26:	2c02      	cmp	r4, #2
 8000e28:	d085      	beq.n	8000d36 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8000e2a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e2c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e30:	f04f 0c03 	mov.w	ip, #3
 8000e34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000e38:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e3c:	684c      	ldr	r4, [r1, #4]
 8000e3e:	f004 0403 	and.w	r4, r4, #3
 8000e42:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e46:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000e4a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4c:	684c      	ldr	r4, [r1, #4]
 8000e4e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8000e52:	d0c1      	beq.n	8000dd8 <HAL_GPIO_Init+0xd0>
        temp = EXTI->EXTICR[position >> 2U];
 8000e54:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8000e58:	f10c 0518 	add.w	r5, ip, #24
 8000e5c:	4c1a      	ldr	r4, [pc, #104]	@ (8000ec8 <HAL_GPIO_Init+0x1c0>)
 8000e5e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000e62:	f003 0e03 	and.w	lr, r3, #3
 8000e66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8000e6a:	240f      	movs	r4, #15
 8000e6c:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e70:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000e74:	4c15      	ldr	r4, [pc, #84]	@ (8000ecc <HAL_GPIO_Init+0x1c4>)
 8000e76:	42a0      	cmp	r0, r4
 8000e78:	f43f af75 	beq.w	8000d66 <HAL_GPIO_Init+0x5e>
 8000e7c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e80:	42a0      	cmp	r0, r4
 8000e82:	d016      	beq.n	8000eb2 <HAL_GPIO_Init+0x1aa>
 8000e84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e88:	42a0      	cmp	r0, r4
 8000e8a:	d014      	beq.n	8000eb6 <HAL_GPIO_Init+0x1ae>
 8000e8c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e90:	42a0      	cmp	r0, r4
 8000e92:	d012      	beq.n	8000eba <HAL_GPIO_Init+0x1b2>
 8000e94:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000e98:	42a0      	cmp	r0, r4
 8000e9a:	d010      	beq.n	8000ebe <HAL_GPIO_Init+0x1b6>
 8000e9c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000ea0:	42a0      	cmp	r0, r4
 8000ea2:	d00e      	beq.n	8000ec2 <HAL_GPIO_Init+0x1ba>
 8000ea4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000ea8:	42a0      	cmp	r0, r4
 8000eaa:	f43f af5a 	beq.w	8000d62 <HAL_GPIO_Init+0x5a>
 8000eae:	2407      	movs	r4, #7
 8000eb0:	e75a      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	e758      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000eb6:	2402      	movs	r4, #2
 8000eb8:	e756      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000eba:	2403      	movs	r4, #3
 8000ebc:	e754      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000ebe:	2404      	movs	r4, #4
 8000ec0:	e752      	b.n	8000d68 <HAL_GPIO_Init+0x60>
 8000ec2:	2405      	movs	r4, #5
 8000ec4:	e750      	b.n	8000d68 <HAL_GPIO_Init+0x60>
  }
}
 8000ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec8:	4002f400 	.word	0x4002f400
 8000ecc:	42020000 	.word	0x42020000

08000ed0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	b10a      	cbz	r2, 8000ed6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed2:	6181      	str	r1, [r0, #24]
 8000ed4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8000edc:	4b02      	ldr	r3, [pc, #8]	@ (8000ee8 <HAL_PWREx_GetVoltageRange+0xc>)
 8000ede:	6818      	ldr	r0, [r3, #0]
}
 8000ee0:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40007000 	.word	0x40007000

08000eec <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000eec:	4a02      	ldr	r2, [pc, #8]	@ (8000ef8 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8000eee:	6893      	ldr	r3, [r2, #8]
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef4:	6093      	str	r3, [r2, #8]
}
 8000ef6:	4770      	bx	lr
 8000ef8:	40007000 	.word	0x40007000

08000efc <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <HAL_PWREx_SMPS_GetEffectiveMode+0x20>)
 8000efe:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000f00:	f413 5080 	ands.w	r0, r3, #4096	@ 0x1000
 8000f04:	d106      	bne.n	8000f14 <HAL_PWREx_SMPS_GetEffectiveMode+0x18>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000f06:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8000f0a:	d000      	beq.n	8000f0e <HAL_PWREx_SMPS_GetEffectiveMode+0x12>
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 8000f0c:	4770      	bx	lr
    mode = PWR_SMPS_LOW_POWER;
 8000f0e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f12:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 8000f14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  return mode;
 8000f18:	e7f8      	b.n	8000f0c <HAL_PWREx_SMPS_GetEffectiveMode+0x10>
 8000f1a:	bf00      	nop
 8000f1c:	40007000 	.word	0x40007000

08000f20 <HAL_PWREx_ControlVoltageScaling>:
{
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4605      	mov	r5, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8000f26:	681c      	ldr	r4, [r3, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000f28:	f7ff ffe8 	bl	8000efc <HAL_PWREx_SMPS_GetEffectiveMode>
 8000f2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8000f30:	d02d      	beq.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f32:	f404 64c0 	and.w	r4, r4, #1536	@ 0x600
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8000f3e:	d128      	bne.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x72>
  if (vos_old == VoltageScaling)
 8000f40:	42ac      	cmp	r4, r5
 8000f42:	d028      	beq.n	8000f96 <HAL_PWREx_ControlVoltageScaling+0x76>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f44:	4a16      	ldr	r2, [pc, #88]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f4c:	432b      	orrs	r3, r5
 8000f4e:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	09db      	lsrs	r3, r3, #7
 8000f5e:	2232      	movs	r2, #50	@ 0x32
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6e:	e000      	b.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0x52>
    wait_loop_index--;
 8000f70:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8000f74:	6952      	ldr	r2, [r2, #20]
 8000f76:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000f7a:	d001      	beq.n	8000f80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f7      	bne.n	8000f70 <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000f88:	d107      	bne.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
}
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e7fc      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1
 8000f94:	e7fa      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_OK;
 8000f96:	2000      	movs	r0, #0
 8000f98:	e7f8      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x6c>
    return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	e7f6      	b.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0x6c>
 8000f9e:	bf00      	nop
 8000fa0:	40007000 	.word	0x40007000
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	0a7c5ac5 	.word	0x0a7c5ac5
 8000fac:	cccccccd 	.word	0xcccccccd

08000fb0 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fbe:	3301      	adds	r3, #1

  switch (pllsource)
 8000fc0:	2a02      	cmp	r2, #2
 8000fc2:	d005      	beq.n	8000fd0 <RCC_GetSysClockFreqFromPLLSource+0x20>
 8000fc4:	2a03      	cmp	r2, #3
 8000fc6:	d015      	beq.n	8000ff4 <RCC_GetSysClockFreqFromPLLSource+0x44>
 8000fc8:	2a01      	cmp	r2, #1
 8000fca:	d01d      	beq.n	8001008 <RCC_GetSysClockFreqFromPLLSource+0x58>
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e008      	b.n	8000fe2 <RCC_GetSysClockFreqFromPLLSource+0x32>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fd0:	4818      	ldr	r0, [pc, #96]	@ (8001034 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8000fd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8000fde:	fb03 f000 	mul.w	r0, r3, r0
      /* unexpected */
      pllvco = 0;
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000fea:	3301      	adds	r3, #1
 8000fec:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 8000fee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff2:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ff4:	480f      	ldr	r0, [pc, #60]	@ (8001034 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8000ff6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001002:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8001006:	e7ec      	b.n	8000fe2 <RCC_GetSysClockFreqFromPLLSource+0x32>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f013 0f08 	tst.w	r3, #8
 8001010:	d108      	bne.n	8001024 <RCC_GetSysClockFreqFromPLLSource+0x74>
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001018:	f3c3 2303 	ubfx	r3, r3, #8, #4
        pllvco = MSIRangeTable[msirange];
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800101e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        break;
 8001022:	e7de      	b.n	8000fe2 <RCC_GetSysClockFreqFromPLLSource+0x32>
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001024:	4b02      	ldr	r3, [pc, #8]	@ (8001030 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800102c:	e7f6      	b.n	800101c <RCC_GetSysClockFreqFromPLLSource+0x6c>
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	00f42400 	.word	0x00f42400
 8001038:	08003850 	.word	0x08003850

0800103c <RCC_SetFlashLatencyFromMSIRange>:
{
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800104a:	d00c      	beq.n	8001066 <RCC_SetFlashLatencyFromMSIRange+0x2a>
    vos = HAL_PWREx_GetVoltageRange();
 800104c:	f7ff ff46 	bl	8000edc <HAL_PWREx_GetVoltageRange>
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001050:	b1d0      	cbz	r0, 8001088 <RCC_SetFlashLatencyFromMSIRange+0x4c>
 8001052:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001056:	d017      	beq.n	8001088 <RCC_SetFlashLatencyFromMSIRange+0x4c>
    if (msirange > RCC_MSIRANGE_8)
 8001058:	2c80      	cmp	r4, #128	@ 0x80
 800105a:	d82c      	bhi.n	80010b6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      if (msirange == RCC_MSIRANGE_8)
 800105c:	d02d      	beq.n	80010ba <RCC_SetFlashLatencyFromMSIRange+0x7e>
      else if (msirange == RCC_MSIRANGE_7)
 800105e:	2c70      	cmp	r4, #112	@ 0x70
 8001060:	d02d      	beq.n	80010be <RCC_SetFlashLatencyFromMSIRange+0x82>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001062:	2100      	movs	r1, #0
 8001064:	e017      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4d18      	ldr	r5, [pc, #96]	@ (80010c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001068:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001070:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800107a:	f7ff ff2f 	bl	8000edc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001084:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001086:	e7e3      	b.n	8001050 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if (msirange > RCC_MSIRANGE_8)
 8001088:	2c80      	cmp	r4, #128	@ 0x80
 800108a:	d903      	bls.n	8001094 <RCC_SetFlashLatencyFromMSIRange+0x58>
      if (msirange > RCC_MSIRANGE_10)
 800108c:	2ca0      	cmp	r4, #160	@ 0xa0
 800108e:	d910      	bls.n	80010b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001090:	2102      	movs	r1, #2
 8001092:	e000      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001094:	2100      	movs	r1, #0
  __HAL_FLASH_SET_LATENCY(latency);
 8001096:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <RCC_SetFlashLatencyFromMSIRange+0x90>)
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f023 030f 	bic.w	r3, r3, #15
 800109e:	430b      	orrs	r3, r1
 80010a0:	6013      	str	r3, [r2, #0]
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	428b      	cmp	r3, r1
 80010aa:	d10a      	bne.n	80010c2 <RCC_SetFlashLatencyFromMSIRange+0x86>
  return HAL_OK;
 80010ac:	2000      	movs	r0, #0
}
 80010ae:	b003      	add	sp, #12
 80010b0:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 80010b2:	2101      	movs	r1, #1
 80010b4:	e7ef      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      latency = FLASH_LATENCY_3; /* 3WS */
 80010b6:	2103      	movs	r1, #3
 80010b8:	e7ed      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80010ba:	2102      	movs	r1, #2
 80010bc:	e7eb      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80010be:	2101      	movs	r1, #1
 80010c0:	e7e9      	b.n	8001096 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    return HAL_ERROR;
 80010c2:	2001      	movs	r0, #1
 80010c4:	e7f3      	b.n	80010ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d0:	4a2e      	ldr	r2, [pc, #184]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 80010d2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010d4:	68d2      	ldr	r2, [r2, #12]
 80010d6:	f002 0203 	and.w	r2, r2, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80010da:	f013 030c 	ands.w	r3, r3, #12
 80010de:	d009      	beq.n	80010f4 <HAL_RCC_GetSysClockFreq+0x24>
 80010e0:	2b0c      	cmp	r3, #12
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_GetSysClockFreq+0x20>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d04d      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0xb4>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d04d      	beq.n	8001188 <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80010ec:	2000      	movs	r0, #0
 80010ee:	e00f      	b.n	8001110 <HAL_RCC_GetSysClockFreq+0x40>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80010f0:	2a01      	cmp	r2, #1
 80010f2:	d1f7      	bne.n	80010e4 <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80010f4:	4a25      	ldr	r2, [pc, #148]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	f012 0f08 	tst.w	r2, #8
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001100:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 8001104:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8001108:	4921      	ldr	r1, [pc, #132]	@ (8001190 <HAL_RCC_GetSysClockFreq+0xc0>)
 800110a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800110e:	b113      	cbz	r3, 8001116 <HAL_RCC_GetSysClockFreq+0x46>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d006      	beq.n	8001122 <HAL_RCC_GetSysClockFreq+0x52>
 8001114:	2000      	movs	r0, #0
}
 8001116:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001118:	4a1c      	ldr	r2, [pc, #112]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001120:	e7f2      	b.n	8001108 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001130:	3301      	adds	r3, #1
    switch (pllsource)
 8001132:	2a02      	cmp	r2, #2
 8001134:	d00a      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0x7c>
 8001136:	2a03      	cmp	r2, #3
 8001138:	d01a      	beq.n	8001170 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800113a:	fbb0 f0f3 	udiv	r0, r0, r3
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001146:	fb03 f000 	mul.w	r0, r3, r0
        break;
 800114a:	e008      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800114c:	4811      	ldr	r0, [pc, #68]	@ (8001194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800114e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800115a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800116a:	fbb0 f0f3 	udiv	r0, r0, r3
 800116e:	4770      	bx	lr
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001170:	4808      	ldr	r0, [pc, #32]	@ (8001194 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001172:	fbb0 f0f3 	udiv	r0, r0, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800117e:	fb03 f000 	mul.w	r0, r3, r0
        break;
 8001182:	e7ec      	b.n	800115e <HAL_RCC_GetSysClockFreq+0x8e>
    sysclockfreq = HSI_VALUE;
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001186:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800118a:	4770      	bx	lr
 800118c:	40021000 	.word	0x40021000
 8001190:	08003850 	.word	0x08003850
 8001194:	00f42400 	.word	0x00f42400

08001198 <HAL_RCC_GetHCLKFreq>:
{
 8001198:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800119a:	f7ff ff99 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <HAL_RCC_GetHCLKFreq+0x18>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011a6:	4a03      	ldr	r2, [pc, #12]	@ (80011b4 <HAL_RCC_GetHCLKFreq+0x1c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80011aa:	40d8      	lsrs	r0, r3
 80011ac:	bd08      	pop	{r3, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	08003898 	.word	0x08003898

080011b8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80011b8:	2800      	cmp	r0, #0
 80011ba:	f000 83b6 	beq.w	800192a <HAL_RCC_OscConfig+0x772>
{
 80011be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c0:	b083      	sub	sp, #12
 80011c2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c4:	4b9e      	ldr	r3, [pc, #632]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80011c6:	689d      	ldr	r5, [r3, #8]
 80011c8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011cc:	68de      	ldr	r6, [r3, #12]
 80011ce:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011d2:	6803      	ldr	r3, [r0, #0]
 80011d4:	f013 0f10 	tst.w	r3, #16
 80011d8:	d056      	beq.n	8001288 <HAL_RCC_OscConfig+0xd0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011da:	b30d      	cbz	r5, 8001220 <HAL_RCC_OscConfig+0x68>
 80011dc:	2d0c      	cmp	r5, #12
 80011de:	d01d      	beq.n	800121c <HAL_RCC_OscConfig+0x64>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e0:	69e3      	ldr	r3, [r4, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80bc 	beq.w	8001360 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_MSI_ENABLE();
 80011e8:	4a95      	ldr	r2, [pc, #596]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011f2:	f7ff fd19 	bl	8000c28 <HAL_GetTick>
 80011f6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f8:	4b91      	ldr	r3, [pc, #580]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f013 0f02 	tst.w	r3, #2
 8001200:	f040 809b 	bne.w	800133a <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001204:	f7ff fd10 	bl	8000c28 <HAL_GetTick>
 8001208:	1bc0      	subs	r0, r0, r7
 800120a:	2802      	cmp	r0, #2
 800120c:	d9f4      	bls.n	80011f8 <HAL_RCC_OscConfig+0x40>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800120e:	4b8c      	ldr	r3, [pc, #560]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f013 0f02 	tst.w	r3, #2
 8001216:	d1ef      	bne.n	80011f8 <HAL_RCC_OscConfig+0x40>
              return HAL_TIMEOUT;
 8001218:	2003      	movs	r0, #3
 800121a:	e391      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800121c:	2e01      	cmp	r6, #1
 800121e:	d1df      	bne.n	80011e0 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001220:	4b87      	ldr	r3, [pc, #540]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f013 0f02 	tst.w	r3, #2
 8001228:	d003      	beq.n	8001232 <HAL_RCC_OscConfig+0x7a>
 800122a:	69e3      	ldr	r3, [r4, #28]
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 837e 	beq.w	800192e <HAL_RCC_OscConfig+0x776>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001232:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001234:	4b82      	ldr	r3, [pc, #520]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f013 0f08 	tst.w	r3, #8
 800123c:	d057      	beq.n	80012ee <HAL_RCC_OscConfig+0x136>
 800123e:	4b80      	ldr	r3, [pc, #512]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001246:	4298      	cmp	r0, r3
 8001248:	d858      	bhi.n	80012fc <HAL_RCC_OscConfig+0x144>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124a:	4b7d      	ldr	r3, [pc, #500]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f042 0208 	orr.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800125a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001266:	6a21      	ldr	r1, [r4, #32]
 8001268:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800126c:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800126e:	2d00      	cmp	r5, #0
 8001270:	d05c      	beq.n	800132c <HAL_RCC_OscConfig+0x174>
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001272:	f7ff ff91 	bl	8001198 <HAL_RCC_GetHCLKFreq>
 8001276:	4b73      	ldr	r3, [pc, #460]	@ (8001444 <HAL_RCC_OscConfig+0x28c>)
 8001278:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800127a:	4b73      	ldr	r3, [pc, #460]	@ (8001448 <HAL_RCC_OscConfig+0x290>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	f7ff fc8d 	bl	8000b9c <HAL_InitTick>
        if (status != HAL_OK)
 8001282:	2800      	cmp	r0, #0
 8001284:	f040 835c 	bne.w	8001940 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	f013 0f01 	tst.w	r3, #1
 800128e:	f000 808b 	beq.w	80013a8 <HAL_RCC_OscConfig+0x1f0>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001292:	2d08      	cmp	r5, #8
 8001294:	d07f      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
 8001296:	2d0c      	cmp	r5, #12
 8001298:	d07b      	beq.n	8001392 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	6863      	ldr	r3, [r4, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a0:	f000 80a7 	beq.w	80013f2 <HAL_RCC_OscConfig+0x23a>
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a8:	f000 80a9 	beq.w	80013fe <HAL_RCC_OscConfig+0x246>
 80012ac:	4b64      	ldr	r3, [pc, #400]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80012bc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a9 	beq.w	8001418 <HAL_RCC_OscConfig+0x260>
        tickstart = HAL_GetTick();
 80012c6:	f7ff fcaf 	bl	8000c28 <HAL_GetTick>
 80012ca:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80012d4:	d168      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d6:	f7ff fca7 	bl	8000c28 <HAL_GetTick>
 80012da:	1bc0      	subs	r0, r0, r7
 80012dc:	2864      	cmp	r0, #100	@ 0x64
 80012de:	d9f5      	bls.n	80012cc <HAL_RCC_OscConfig+0x114>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e0:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x114>
              return HAL_TIMEOUT;
 80012ea:	2003      	movs	r0, #3
 80012ec:	e328      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ee:	4b54      	ldr	r3, [pc, #336]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80012f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012fa:	e7a4      	b.n	8001246 <HAL_RCC_OscConfig+0x8e>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fc:	f7ff fe9e 	bl	800103c <RCC_SetFlashLatencyFromMSIRange>
 8001300:	2800      	cmp	r0, #0
 8001302:	f040 8316 	bne.w	8001932 <HAL_RCC_OscConfig+0x77a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b4e      	ldr	r3, [pc, #312]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001316:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001322:	6a21      	ldr	r1, [r4, #32]
 8001324:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e7a2      	b.n	8001272 <HAL_RCC_OscConfig+0xba>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800132e:	f7ff fe85 	bl	800103c <RCC_SetFlashLatencyFromMSIRange>
 8001332:	2800      	cmp	r0, #0
 8001334:	d09d      	beq.n	8001272 <HAL_RCC_OscConfig+0xba>
              return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	e302      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133a:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f042 0208 	orr.w	r2, r2, #8
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800134a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8001356:	6a21      	ldr	r1, [r4, #32]
 8001358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	e793      	b.n	8001288 <HAL_RCC_OscConfig+0xd0>
        __HAL_RCC_MSI_DISABLE();
 8001360:	4a37      	ldr	r2, [pc, #220]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800136a:	f7ff fc5d 	bl	8000c28 <HAL_GetTick>
 800136e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f013 0f02 	tst.w	r3, #2
 8001378:	d086      	beq.n	8001288 <HAL_RCC_OscConfig+0xd0>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137a:	f7ff fc55 	bl	8000c28 <HAL_GetTick>
 800137e:	1bc0      	subs	r0, r0, r7
 8001380:	2802      	cmp	r0, #2
 8001382:	d9f5      	bls.n	8001370 <HAL_RCC_OscConfig+0x1b8>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001384:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f013 0f02 	tst.w	r3, #2
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x1b8>
              return HAL_TIMEOUT;
 800138e:	2003      	movs	r0, #3
 8001390:	e2d6      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001392:	2e03      	cmp	r6, #3
 8001394:	d181      	bne.n	800129a <HAL_RCC_OscConfig+0xe2>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800139e:	d003      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1f0>
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 82c7 	beq.w	8001936 <HAL_RCC_OscConfig+0x77e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f013 0f02 	tst.w	r3, #2
 80013ae:	d060      	beq.n	8001472 <HAL_RCC_OscConfig+0x2ba>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80013b0:	2d04      	cmp	r5, #4
 80013b2:	d04d      	beq.n	8001450 <HAL_RCC_OscConfig+0x298>
 80013b4:	2d0c      	cmp	r5, #12
 80013b6:	d049      	beq.n	800144c <HAL_RCC_OscConfig+0x294>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b8:	68e3      	ldr	r3, [r4, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8090 	beq.w	80014e0 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013c2:	6813      	ldr	r3, [r2, #0]
 80013c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc2d 	bl	8000c28 <HAL_GetTick>
 80013ce:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80013d8:	d179      	bne.n	80014ce <HAL_RCC_OscConfig+0x316>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc25 	bl	8000c28 <HAL_GetTick>
 80013de:	1b40      	subs	r0, r0, r5
 80013e0:	2802      	cmp	r0, #2
 80013e2:	d9f5      	bls.n	80013d0 <HAL_RCC_OscConfig+0x218>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x218>
              return HAL_TIMEOUT;
 80013ee:	2003      	movs	r0, #3
 80013f0:	e2a6      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e75f      	b.n	80012be <HAL_RCC_OscConfig+0x106>
 80013fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001402:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e752      	b.n	80012be <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8001418:	f7ff fc06 	bl	8000c28 <HAL_GetTick>
 800141c:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001426:	d0bf      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1f0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fbfe 	bl	8000c28 <HAL_GetTick>
 800142c:	1bc0      	subs	r0, r0, r7
 800142e:	2864      	cmp	r0, #100	@ 0x64
 8001430:	d9f5      	bls.n	800141e <HAL_RCC_OscConfig+0x266>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_RCC_OscConfig+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x266>
              return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e27f      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 8001440:	40021000 	.word	0x40021000
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800144c:	2e02      	cmp	r6, #2
 800144e:	d1b3      	bne.n	80013b8 <HAL_RCC_OscConfig+0x200>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001450:	4ba9      	ldr	r3, [pc, #676]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001458:	d003      	beq.n	8001462 <HAL_RCC_OscConfig+0x2aa>
 800145a:	68e3      	ldr	r3, [r4, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 826c 	beq.w	800193a <HAL_RCC_OscConfig+0x782>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4aa5      	ldr	r2, [pc, #660]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001464:	6853      	ldr	r3, [r2, #4]
 8001466:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800146a:	6921      	ldr	r1, [r4, #16]
 800146c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001470:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	f013 0f08 	tst.w	r3, #8
 8001478:	d070      	beq.n	800155c <HAL_RCC_OscConfig+0x3a4>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	6963      	ldr	r3, [r4, #20]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d050      	beq.n	8001522 <HAL_RCC_OscConfig+0x36a>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001480:	69a3      	ldr	r3, [r4, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d145      	bne.n	8001512 <HAL_RCC_OscConfig+0x35a>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001486:	4a9c      	ldr	r2, [pc, #624]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001488:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800148c:	f023 0310 	bic.w	r3, r3, #16
 8001490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 8001494:	4a98      	ldr	r2, [pc, #608]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001496:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80014a2:	f7ff fbc1 	bl	8000c28 <HAL_GetTick>
 80014a6:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a8:	4b93      	ldr	r3, [pc, #588]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	d153      	bne.n	800155c <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbb8 	bl	8000c28 <HAL_GetTick>
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	2807      	cmp	r0, #7
 80014bc:	d9f4      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014be:	4b8e      	ldr	r3, [pc, #568]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c4:	f013 0f02 	tst.w	r3, #2
 80014c8:	d1ee      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2f0>
            return HAL_TIMEOUT;
 80014ca:	2003      	movs	r0, #3
 80014cc:	e238      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4a8a      	ldr	r2, [pc, #552]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014d0:	6853      	ldr	r3, [r2, #4]
 80014d2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80014d6:	6921      	ldr	r1, [r4, #16]
 80014d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80014dc:	6053      	str	r3, [r2, #4]
 80014de:	e7c8      	b.n	8001472 <HAL_RCC_OscConfig+0x2ba>
        __HAL_RCC_HSI_DISABLE();
 80014e0:	4a85      	ldr	r2, [pc, #532]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb9d 	bl	8000c28 <HAL_GetTick>
 80014ee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f0:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80014f8:	d0bb      	beq.n	8001472 <HAL_RCC_OscConfig+0x2ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fb95 	bl	8000c28 <HAL_GetTick>
 80014fe:	1b40      	subs	r0, r0, r5
 8001500:	2802      	cmp	r0, #2
 8001502:	d9f5      	bls.n	80014f0 <HAL_RCC_OscConfig+0x338>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	4b7c      	ldr	r3, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x338>
              return HAL_TIMEOUT;
 800150e:	2003      	movs	r0, #3
 8001510:	e216      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001512:	4a79      	ldr	r2, [pc, #484]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001514:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001520:	e7b8      	b.n	8001494 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_LSI_DISABLE();
 8001522:	4a75      	ldr	r2, [pc, #468]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001524:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001530:	f7ff fb7a 	bl	8000c28 <HAL_GetTick>
 8001534:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001536:	4b70      	ldr	r3, [pc, #448]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800153c:	f013 0f02 	tst.w	r3, #2
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x3a4>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001542:	f7ff fb71 	bl	8000c28 <HAL_GetTick>
 8001546:	1b40      	subs	r0, r0, r5
 8001548:	2807      	cmp	r0, #7
 800154a:	d9f4      	bls.n	8001536 <HAL_RCC_OscConfig+0x37e>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800154c:	4b6a      	ldr	r3, [pc, #424]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001552:	f013 0f02 	tst.w	r3, #2
 8001556:	d0ee      	beq.n	8001536 <HAL_RCC_OscConfig+0x37e>
            return HAL_TIMEOUT;
 8001558:	2003      	movs	r0, #3
 800155a:	e1f1      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f04 	tst.w	r3, #4
 8001562:	f000 80f0 	beq.w	8001746 <HAL_RCC_OscConfig+0x58e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001566:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800156e:	d124      	bne.n	80015ba <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001572:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001574:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001578:	659a      	str	r2, [r3, #88]	@ 0x58
 800157a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001584:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001586:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <HAL_RCC_OscConfig+0x544>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800158e:	d016      	beq.n	80015be <HAL_RCC_OscConfig+0x406>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001590:	68a3      	ldr	r3, [r4, #8]
 8001592:	f013 0f01 	tst.w	r3, #1
 8001596:	d033      	beq.n	8001600 <HAL_RCC_OscConfig+0x448>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001598:	f013 0f04 	tst.w	r3, #4
 800159c:	d028      	beq.n	80015f0 <HAL_RCC_OscConfig+0x438>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800159e:	4b56      	ldr	r3, [pc, #344]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80015a0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80015a4:	f042 0204 	orr.w	r2, r2, #4
 80015a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80015b8:	e02f      	b.n	800161a <HAL_RCC_OscConfig+0x462>
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2500      	movs	r5, #0
 80015bc:	e7e3      	b.n	8001586 <HAL_RCC_OscConfig+0x3ce>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015be:	4a4f      	ldr	r2, [pc, #316]	@ (80016fc <HAL_RCC_OscConfig+0x544>)
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb2e 	bl	8000c28 <HAL_GetTick>
 80015cc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ce:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <HAL_RCC_OscConfig+0x544>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015d6:	d1db      	bne.n	8001590 <HAL_RCC_OscConfig+0x3d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d8:	f7ff fb26 	bl	8000c28 <HAL_GetTick>
 80015dc:	1b80      	subs	r0, r0, r6
 80015de:	2802      	cmp	r0, #2
 80015e0:	d9f5      	bls.n	80015ce <HAL_RCC_OscConfig+0x416>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e2:	4b46      	ldr	r3, [pc, #280]	@ (80016fc <HAL_RCC_OscConfig+0x544>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	e1a7      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015f0:	4a41      	ldr	r2, [pc, #260]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80015f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015fe:	e00c      	b.n	800161a <HAL_RCC_OscConfig+0x462>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001600:	4b3d      	ldr	r3, [pc, #244]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001602:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800160e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161a:	68a3      	ldr	r3, [r4, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d053      	beq.n	80016c8 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 8001620:	f7ff fb02 	bl	8000c28 <HAL_GetTick>
 8001624:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162c:	f013 0f02 	tst.w	r3, #2
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0x498>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff faf9 	bl	8000c28 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	f241 3388 	movw	r3, #5000	@ 0x1388
 800163c:	4298      	cmp	r0, r3
 800163e:	d9f2      	bls.n	8001626 <HAL_RCC_OscConfig+0x46e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001640:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001646:	f013 0f02 	tst.w	r3, #2
 800164a:	d1ec      	bne.n	8001626 <HAL_RCC_OscConfig+0x46e>
            return HAL_TIMEOUT;
 800164c:	2003      	movs	r0, #3
 800164e:	e177      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001650:	68a3      	ldr	r3, [r4, #8]
 8001652:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001656:	d01b      	beq.n	8001690 <HAL_RCC_OscConfig+0x4d8>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001658:	4a27      	ldr	r2, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 800165a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800165e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001670:	d168      	bne.n	8001744 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fad9 	bl	8000c28 <HAL_GetTick>
 8001676:	1b80      	subs	r0, r0, r6
 8001678:	f241 3388 	movw	r3, #5000	@ 0x1388
 800167c:	4298      	cmp	r0, r3
 800167e:	d9f2      	bls.n	8001666 <HAL_RCC_OscConfig+0x4ae>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001686:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800168a:	d1ec      	bne.n	8001666 <HAL_RCC_OscConfig+0x4ae>
              return HAL_TIMEOUT;
 800168c:	2003      	movs	r0, #3
 800168e:	e157      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 8001692:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80016a8:	d04c      	beq.n	8001744 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff fabd 	bl	8000c28 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016b4:	4298      	cmp	r0, r3
 80016b6:	d9f2      	bls.n	800169e <HAL_RCC_OscConfig+0x4e6>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016be:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80016c2:	d0ec      	beq.n	800169e <HAL_RCC_OscConfig+0x4e6>
              return HAL_TIMEOUT;
 80016c4:	2003      	movs	r0, #3
 80016c6:	e13b      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
      tickstart = HAL_GetTick();
 80016c8:	f7ff faae 	bl	8000c28 <HAL_GetTick>
 80016cc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f013 0f02 	tst.w	r3, #2
 80016d8:	d012      	beq.n	8001700 <HAL_RCC_OscConfig+0x548>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff faa5 	bl	8000c28 <HAL_GetTick>
 80016de:	1b80      	subs	r0, r0, r6
 80016e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80016e4:	4298      	cmp	r0, r3
 80016e6:	d9f2      	bls.n	80016ce <HAL_RCC_OscConfig+0x516>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_RCC_OscConfig+0x540>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ee:	f013 0f02 	tst.w	r3, #2
 80016f2:	d0ec      	beq.n	80016ce <HAL_RCC_OscConfig+0x516>
            return HAL_TIMEOUT;
 80016f4:	2003      	movs	r0, #3
 80016f6:	e123      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001700:	4b97      	ldr	r3, [pc, #604]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800170a:	d01b      	beq.n	8001744 <HAL_RCC_OscConfig+0x58c>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800170c:	4a94      	ldr	r2, [pc, #592]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800170e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800171a:	4b91      	ldr	r3, [pc, #580]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001720:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001724:	d00e      	beq.n	8001744 <HAL_RCC_OscConfig+0x58c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fa7f 	bl	8000c28 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001730:	4298      	cmp	r0, r3
 8001732:	d9f2      	bls.n	800171a <HAL_RCC_OscConfig+0x562>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001734:	4b8a      	ldr	r3, [pc, #552]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800173e:	d0ec      	beq.n	800171a <HAL_RCC_OscConfig+0x562>
              return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
 8001742:	e0fd      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
    if (pwrclkchanged == SET)
 8001744:	bb15      	cbnz	r5, 800178c <HAL_RCC_OscConfig+0x5d4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f013 0f20 	tst.w	r3, #32
 800174c:	d041      	beq.n	80017d2 <HAL_RCC_OscConfig+0x61a>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800174e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001750:	b313      	cbz	r3, 8001798 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSI48_ENABLE();
 8001752:	4a83      	ldr	r2, [pc, #524]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001754:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001760:	f7ff fa62 	bl	8000c28 <HAL_GetTick>
 8001764:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001766:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176c:	f013 0f02 	tst.w	r3, #2
 8001770:	d12f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001772:	f7ff fa59 	bl	8000c28 <HAL_GetTick>
 8001776:	1b40      	subs	r0, r0, r5
 8001778:	2802      	cmp	r0, #2
 800177a:	d9f4      	bls.n	8001766 <HAL_RCC_OscConfig+0x5ae>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177c:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001782:	f013 0f02 	tst.w	r3, #2
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_OscConfig+0x5ae>
            return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
 800178a:	e0d9      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4a74      	ldr	r2, [pc, #464]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800178e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	e7d6      	b.n	8001746 <HAL_RCC_OscConfig+0x58e>
      __HAL_RCC_HSI48_DISABLE();
 8001798:	4a71      	ldr	r2, [pc, #452]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800179a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa3f 	bl	8000c28 <HAL_GetTick>
 80017aa:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80017ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b2:	f013 0f02 	tst.w	r3, #2
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x61a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff fa36 	bl	8000c28 <HAL_GetTick>
 80017bc:	1b40      	subs	r0, r0, r5
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9f4      	bls.n	80017ac <HAL_RCC_OscConfig+0x5f4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80017c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017c8:	f013 0f02 	tst.w	r3, #2
 80017cc:	d0ee      	beq.n	80017ac <HAL_RCC_OscConfig+0x5f4>
            return HAL_TIMEOUT;
 80017ce:	2003      	movs	r0, #3
 80017d0:	e0b6      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b2 	beq.w	800193e <HAL_RCC_OscConfig+0x786>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017da:	4a61      	ldr	r2, [pc, #388]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80017dc:	6892      	ldr	r2, [r2, #8]
 80017de:	f002 020c 	and.w	r2, r2, #12
 80017e2:	2a0c      	cmp	r2, #12
 80017e4:	d073      	beq.n	80018ce <HAL_RCC_OscConfig+0x716>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d018      	beq.n	800181c <HAL_RCC_OscConfig+0x664>
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa18 	bl	8000c28 <HAL_GetTick>
 80017f8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fa:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001802:	d05d      	beq.n	80018c0 <HAL_RCC_OscConfig+0x708>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fa10 	bl	8000c28 <HAL_GetTick>
 8001808:	1b00      	subs	r0, r0, r4
 800180a:	2802      	cmp	r0, #2
 800180c:	d9f5      	bls.n	80017fa <HAL_RCC_OscConfig+0x642>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180e:	4b54      	ldr	r3, [pc, #336]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x642>
              return HAL_TIMEOUT;
 8001818:	2003      	movs	r0, #3
 800181a:	e091      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_DISABLE();
 800181c:	4a50      	ldr	r2, [pc, #320]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001824:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001826:	f7ff f9ff 	bl	8000c28 <HAL_GetTick>
 800182a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182c:	4b4c      	ldr	r3, [pc, #304]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001834:	d00b      	beq.n	800184e <HAL_RCC_OscConfig+0x696>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f9f7 	bl	8000c28 <HAL_GetTick>
 800183a:	1b40      	subs	r0, r0, r5
 800183c:	2802      	cmp	r0, #2
 800183e:	d9f5      	bls.n	800182c <HAL_RCC_OscConfig+0x674>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x674>
              return HAL_TIMEOUT;
 800184a:	2003      	movs	r0, #3
 800184c:	e078      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4a44      	ldr	r2, [pc, #272]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 8001850:	68d3      	ldr	r3, [r2, #12]
 8001852:	4944      	ldr	r1, [pc, #272]	@ (8001964 <HAL_RCC_OscConfig+0x7ac>)
 8001854:	4019      	ands	r1, r3
 8001856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001858:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800185a:	3801      	subs	r0, #1
 800185c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001860:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001862:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001866:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001868:	0840      	lsrs	r0, r0, #1
 800186a:	3801      	subs	r0, #1
 800186c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001870:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8001872:	0840      	lsrs	r0, r0, #1
 8001874:	3801      	subs	r0, #1
 8001876:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800187a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800187c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001880:	4319      	orrs	r1, r3
 8001882:	60d1      	str	r1, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800188c:	68d3      	ldr	r3, [r2, #12]
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001892:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001894:	f7ff f9c8 	bl	8000c28 <HAL_GetTick>
 8001898:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x704>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff f9c0 	bl	8000c28 <HAL_GetTick>
 80018a8:	1b00      	subs	r0, r0, r4
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9f5      	bls.n	800189a <HAL_RCC_OscConfig+0x6e2>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x6e2>
              return HAL_TIMEOUT;
 80018b8:	2003      	movs	r0, #3
 80018ba:	e041      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
 80018be:	e03f      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018c0:	4a27      	ldr	r2, [pc, #156]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80018c2:	68d1      	ldr	r1, [r2, #12]
 80018c4:	4b28      	ldr	r3, [pc, #160]	@ (8001968 <HAL_RCC_OscConfig+0x7b0>)
 80018c6:	400b      	ands	r3, r1
 80018c8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80018ca:	2000      	movs	r0, #0
 80018cc:	e038      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d038      	beq.n	8001944 <HAL_RCC_OscConfig+0x78c>
        pll_config = RCC->PLLCFGR;
 80018d2:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_RCC_OscConfig+0x7a8>)
 80018d4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	f003 0103 	and.w	r1, r3, #3
 80018da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80018dc:	4291      	cmp	r1, r2
 80018de:	d133      	bne.n	8001948 <HAL_RCC_OscConfig+0x790>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018e6:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80018ec:	d12e      	bne.n	800194c <HAL_RCC_OscConfig+0x794>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018f2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80018f8:	d12a      	bne.n	8001950 <HAL_RCC_OscConfig+0x798>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018fe:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001904:	d126      	bne.n	8001954 <HAL_RCC_OscConfig+0x79c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001906:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800190a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800190c:	0852      	lsrs	r2, r2, #1
 800190e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001910:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001914:	d120      	bne.n	8001958 <HAL_RCC_OscConfig+0x7a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001916:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800191a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800191c:	0852      	lsrs	r2, r2, #1
 800191e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001920:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001924:	d11a      	bne.n	800195c <HAL_RCC_OscConfig+0x7a4>
  return HAL_OK;
 8001926:	2000      	movs	r0, #0
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
    return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
}
 800192c:	4770      	bx	lr
        return HAL_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	e006      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
            return HAL_ERROR;
 8001932:	2001      	movs	r0, #1
 8001934:	e004      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
 8001938:	e002      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
        return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
  return HAL_OK;
 800193e:	2000      	movs	r0, #0
}
 8001940:	b003      	add	sp, #12
 8001942:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001944:	2001      	movs	r0, #1
 8001946:	e7fb      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
          return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
 800194a:	e7f9      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 800194c:	2001      	movs	r0, #1
 800194e:	e7f7      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 8001950:	2001      	movs	r0, #1
 8001952:	e7f5      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 8001954:	2001      	movs	r0, #1
 8001956:	e7f3      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 8001958:	2001      	movs	r0, #1
 800195a:	e7f1      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 800195c:	2001      	movs	r0, #1
 800195e:	e7ef      	b.n	8001940 <HAL_RCC_OscConfig+0x788>
 8001960:	40021000 	.word	0x40021000
 8001964:	019f800c 	.word	0x019f800c
 8001968:	feeefffc 	.word	0xfeeefffc

0800196c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800196c:	2800      	cmp	r0, #0
 800196e:	f000 80e9 	beq.w	8001b44 <HAL_RCC_ClockConfig+0x1d8>
{
 8001972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001974:	460d      	mov	r5, r1
 8001976:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b76      	ldr	r3, [pc, #472]	@ (8001b54 <HAL_RCC_ClockConfig+0x1e8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	428b      	cmp	r3, r1
 8001982:	d20b      	bcs.n	800199c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001984:	4a73      	ldr	r2, [pc, #460]	@ (8001b54 <HAL_RCC_ClockConfig+0x1e8>)
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	f023 030f 	bic.w	r3, r3, #15
 800198c:	430b      	orrs	r3, r1
 800198e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001990:	6813      	ldr	r3, [r2, #0]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	428b      	cmp	r3, r1
 8001998:	f040 80d6 	bne.w	8001b48 <HAL_RCC_ClockConfig+0x1dc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	f013 0f02 	tst.w	r3, #2
 80019a2:	d00c      	beq.n	80019be <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a4:	68a2      	ldr	r2, [r4, #8]
 80019a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d905      	bls.n	80019be <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	4969      	ldr	r1, [pc, #420]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 80019b4:	688b      	ldr	r3, [r1, #8]
 80019b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ba:	431a      	orrs	r2, r3
 80019bc:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	f013 0f01 	tst.w	r3, #1
 80019c4:	d076      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d00d      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x7c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d025      	beq.n	8001a1c <HAL_RCC_ClockConfig+0xb0>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d13c      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xe2>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019d8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f013 0f02 	tst.w	r3, #2
 80019e2:	d121      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e0a6      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x8a>
        return HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
 80019f4:	e09f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019f6:	f7ff fadb 	bl	8000fb0 <RCC_GetSysClockFreqFromPLLSource>
      if (pllfreq > 80000000U)
 80019fa:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	4298      	cmp	r0, r3
 80019fe:	d92d      	bls.n	8001a5c <HAL_RCC_ClockConfig+0xf0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a00:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001a08:	d12a      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf4>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a0a:	4a53      	ldr	r2, [pc, #332]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0c:	6893      	ldr	r3, [r2, #8]
 8001a0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a18:	2780      	movs	r7, #128	@ 0x80
 8001a1a:	e024      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001a24:	f000 8092 	beq.w	8001b4c <HAL_RCC_ClockConfig+0x1e0>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a28:	f7ff fb52 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <HAL_RCC_ClockConfig+0x1f0>)
 8001a2e:	4298      	cmp	r0, r3
 8001a30:	d918      	bls.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a32:	4b49      	ldr	r3, [pc, #292]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001a3a:	d137      	bne.n	8001aac <HAL_RCC_ClockConfig+0x140>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a3c:	4a46      	ldr	r2, [pc, #280]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a4a:	2780      	movs	r7, #128	@ 0x80
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4e:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001a56:	d1e7      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xbc>
          return HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
 8001a5a:	e06c      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a5c:	2700      	movs	r7, #0
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
 8001a60:	2700      	movs	r7, #0
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
 8001a64:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4a3c      	ldr	r2, [pc, #240]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	6861      	ldr	r1, [r4, #4]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001a74:	f7ff f8d8 	bl	8000c28 <HAL_GetTick>
 8001a78:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	6862      	ldr	r2, [r4, #4]
 8001a84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a88:	d012      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x144>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f8cd 	bl	8000c28 <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d9f0      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a98:	4b2f      	ldr	r3, [pc, #188]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	6862      	ldr	r2, [r4, #4]
 8001aa2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aa6:	d0e8      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	e044      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001aac:	2700      	movs	r7, #0
 8001aae:	e7da      	b.n	8001a66 <HAL_RCC_ClockConfig+0xfa>
  if(hpre == RCC_SYSCLK_DIV2)
 8001ab0:	2f00      	cmp	r7, #0
 8001ab2:	d141      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1cc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f013 0f02 	tst.w	r3, #2
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x16a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	68a2      	ldr	r2, [r4, #8]
 8001abe:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d205      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aca:	4923      	ldr	r1, [pc, #140]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001acc:	688b      	ldr	r3, [r1, #8]
 8001ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	608a      	str	r2, [r1, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_RCC_ClockConfig+0x1e8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	d90a      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x18c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b54 <HAL_RCC_ClockConfig+0x1e8>)
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f023 030f 	bic.w	r3, r3, #15
 8001aea:	432b      	orrs	r3, r5
 8001aec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	42ab      	cmp	r3, r5
 8001af6:	d12b      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1e4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	f013 0f04 	tst.w	r3, #4
 8001afe:	d006      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	6893      	ldr	r3, [r2, #8]
 8001b04:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b08:	68e1      	ldr	r1, [r4, #12]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f013 0f08 	tst.w	r3, #8
 8001b14:	d007      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x1ba>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b18:	6893      	ldr	r3, [r2, #8]
 8001b1a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001b1e:	6921      	ldr	r1, [r4, #16]
 8001b20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b24:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b26:	f7ff fb37 	bl	8001198 <HAL_RCC_GetHCLKFreq>
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_RCC_ClockConfig+0x1f4>)
 8001b2c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCC_ClockConfig+0x1f8>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f7ff f833 	bl	8000b9c <HAL_InitTick>
}
 8001b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3a:	6893      	ldr	r3, [r2, #8]
 8001b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b40:	6093      	str	r3, [r2, #8]
 8001b42:	e7b7      	b.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
    return HAL_ERROR;
 8001b44:	2001      	movs	r0, #1
}
 8001b46:	4770      	bx	lr
      return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e7f4      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
          return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	e7f2      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
      return HAL_ERROR;
 8001b50:	2001      	movs	r0, #1
 8001b52:	e7f0      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ca>
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	04c4b400 	.word	0x04c4b400
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000008 	.word	0x20000008

08001b68 <HAL_RCC_GetPCLK1Freq>:
{
 8001b68:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6a:	f7ff fb15 	bl	8001198 <HAL_RCC_GetHCLKFreq>
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b76:	4a03      	ldr	r2, [pc, #12]	@ (8001b84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b7a:	40d8      	lsrs	r0, r3
 8001b7c:	bd08      	pop	{r3, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	08003890 	.word	0x08003890

08001b88 <HAL_RCC_GetPCLK2Freq>:
{
 8001b88:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b8a:	f7ff fb05 	bl	8001198 <HAL_RCC_GetHCLKFreq>
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b96:	4a03      	ldr	r2, [pc, #12]	@ (8001ba4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b9a:	40d8      	lsrs	r0, r3
 8001b9c:	bd08      	pop	{r3, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08003890 	.word	0x08003890

08001ba8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	4604      	mov	r4, r0
 8001bac:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8001bae:	6803      	ldr	r3, [r0, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d04f      	beq.n	8001c54 <RCCEx_PLLSAI2_Config+0xac>
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d054      	beq.n	8001c62 <RCCEx_PLLSAI2_Config+0xba>
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d159      	bne.n	8001c70 <RCCEx_PLLSAI2_Config+0xc8>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bbc:	4b30      	ldr	r3, [pc, #192]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f013 0f02 	tst.w	r3, #2
 8001bc4:	d056      	beq.n	8001c74 <RCCEx_PLLSAI2_Config+0xcc>
  }

  if (status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f82a 	bl	8000c28 <HAL_GetTick>
 8001bd4:	4605      	mov	r5, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001bde:	d009      	beq.n	8001bf4 <RCCEx_PLLSAI2_Config+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001be0:	f7ff f822 	bl	8000c28 <HAL_GetTick>
 8001be4:	1b43      	subs	r3, r0, r5
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d9f5      	bls.n	8001bd6 <RCCEx_PLLSAI2_Config+0x2e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001bf2:	d141      	bne.n	8001c78 <RCCEx_PLLSAI2_Config+0xd0>
      }
    }

    if (status == HAL_OK)
    {
      if (Divider == DIVIDER_P_UPDATE)
 8001bf4:	b986      	cbnz	r6, 8001c18 <RCCEx_PLLSAI2_Config+0x70>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001bf6:	4822      	ldr	r0, [pc, #136]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001bf8:	6943      	ldr	r3, [r0, #20]
 8001bfa:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <RCCEx_PLLSAI2_Config+0xdc>)
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	68a1      	ldr	r1, [r4, #8]
 8001c00:	68e3      	ldr	r3, [r4, #12]
 8001c02:	06db      	lsls	r3, r3, #27
 8001c04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c08:	6861      	ldr	r1, [r4, #4]
 8001c0a:	3901      	subs	r1, #1
 8001c0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001c10:	6821      	ldr	r1, [r4, #0]
 8001c12:	430b      	orrs	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	6142      	str	r2, [r0, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c18:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f801 	bl	8000c28 <HAL_GetTick>
 8001c26:	4605      	mov	r5, r0

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001c30:	d109      	bne.n	8001c46 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c32:	f7fe fff9 	bl	8000c28 <HAL_GetTick>
 8001c36:	1b43      	subs	r3, r0, r5
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d9f5      	bls.n	8001c28 <RCCEx_PLLSAI2_Config+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8001c44:	d01a      	beq.n	8001c7c <RCCEx_PLLSAI2_Config+0xd4>
      }

      if (status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8001c46:	4a0e      	ldr	r2, [pc, #56]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c48:	6953      	ldr	r3, [r2, #20]
 8001c4a:	6921      	ldr	r1, [r4, #16]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6153      	str	r3, [r2, #20]
 8001c50:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001c5c:	d1b3      	bne.n	8001bc6 <RCCEx_PLLSAI2_Config+0x1e>
        status = HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
 8001c60:	e7f7      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <RCCEx_PLLSAI2_Config+0xd8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 8001c6a:	d1ac      	bne.n	8001bc6 <RCCEx_PLLSAI2_Config+0x1e>
        status = HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	e7f0      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
  switch (pPllSai2->PLLSAI2Source)
 8001c70:	2001      	movs	r0, #1
 8001c72:	e7ee      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
        status = HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
 8001c76:	e7ec      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
          status = HAL_TIMEOUT;
 8001c78:	2003      	movs	r0, #3
 8001c7a:	e7ea      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
            status = HAL_TIMEOUT;
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	e7e8      	b.n	8001c52 <RCCEx_PLLSAI2_Config+0xaa>
 8001c80:	40021000 	.word	0x40021000
 8001c84:	07ff800c 	.word	0x07ff800c

08001c88 <RCCEx_PLLSAI1_Config>:
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 8001c8e:	6803      	ldr	r3, [r0, #0]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d052      	beq.n	8001d3a <RCCEx_PLLSAI1_Config+0xb2>
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d057      	beq.n	8001d48 <RCCEx_PLLSAI1_Config+0xc0>
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	f040 8086 	bne.w	8001daa <RCCEx_PLLSAI1_Config+0x122>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f013 0f02 	tst.w	r3, #2
 8001ca6:	f000 8082 	beq.w	8001dae <RCCEx_PLLSAI1_Config+0x126>
    __HAL_RCC_PLLSAI1_DISABLE();
 8001caa:	4a44      	ldr	r2, [pc, #272]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001cb2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ffb8 	bl	8000c28 <HAL_GetTick>
 8001cb8:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001cc2:	d009      	beq.n	8001cd8 <RCCEx_PLLSAI1_Config+0x50>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001cc4:	f7fe ffb0 	bl	8000c28 <HAL_GetTick>
 8001cc8:	1b43      	subs	r3, r0, r5
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d9f5      	bls.n	8001cba <RCCEx_PLLSAI1_Config+0x32>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001cd6:	d16c      	bne.n	8001db2 <RCCEx_PLLSAI1_Config+0x12a>
      if (Divider == DIVIDER_P_UPDATE)
 8001cd8:	2e00      	cmp	r6, #0
 8001cda:	d13c      	bne.n	8001d56 <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cdc:	4837      	ldr	r0, [pc, #220]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001cde:	6903      	ldr	r3, [r0, #16]
 8001ce0:	4a37      	ldr	r2, [pc, #220]	@ (8001dc0 <RCCEx_PLLSAI1_Config+0x138>)
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	68a1      	ldr	r1, [r4, #8]
 8001ce6:	68e3      	ldr	r3, [r4, #12]
 8001ce8:	06db      	lsls	r3, r3, #27
 8001cea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cee:	6861      	ldr	r1, [r4, #4]
 8001cf0:	3901      	subs	r1, #1
 8001cf2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001cf6:	6821      	ldr	r1, [r4, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	6102      	str	r2, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d00:	6813      	ldr	r3, [r2, #0]
 8001d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d06:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d08:	f7fe ff8e 	bl	8000c28 <HAL_GetTick>
 8001d0c:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001d16:	d109      	bne.n	8001d2c <RCCEx_PLLSAI1_Config+0xa4>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d18:	f7fe ff86 	bl	8000c28 <HAL_GetTick>
 8001d1c:	1b43      	subs	r3, r0, r5
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d9f5      	bls.n	8001d0e <RCCEx_PLLSAI1_Config+0x86>
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8001d2a:	d044      	beq.n	8001db6 <RCCEx_PLLSAI1_Config+0x12e>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8001d2c:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d2e:	6913      	ldr	r3, [r2, #16]
 8001d30:	69a1      	ldr	r1, [r4, #24]
 8001d32:	430b      	orrs	r3, r1
 8001d34:	6113      	str	r3, [r2, #16]
 8001d36:	2000      	movs	r0, #0
}
 8001d38:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001d42:	d1b2      	bne.n	8001caa <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
 8001d46:	e7f7      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 8001d50:	d1ab      	bne.n	8001caa <RCCEx_PLLSAI1_Config+0x22>
        status = HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
 8001d54:	e7f0      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
      else if (Divider == DIVIDER_Q_UPDATE)
 8001d56:	2e01      	cmp	r6, #1
 8001d58:	d013      	beq.n	8001d82 <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d5c:	6903      	ldr	r3, [r0, #16]
 8001d5e:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <RCCEx_PLLSAI1_Config+0x13c>)
 8001d60:	401a      	ands	r2, r3
 8001d62:	68a1      	ldr	r1, [r4, #8]
 8001d64:	6963      	ldr	r3, [r4, #20]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	065b      	lsls	r3, r3, #25
 8001d6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d70:	6861      	ldr	r1, [r4, #4]
 8001d72:	3901      	subs	r1, #1
 8001d74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001d78:	6821      	ldr	r1, [r4, #0]
 8001d7a:	430b      	orrs	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	6102      	str	r2, [r0, #16]
 8001d80:	e7bd      	b.n	8001cfe <RCCEx_PLLSAI1_Config+0x76>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d82:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <RCCEx_PLLSAI1_Config+0x134>)
 8001d84:	6903      	ldr	r3, [r0, #16]
 8001d86:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <RCCEx_PLLSAI1_Config+0x140>)
 8001d88:	401a      	ands	r2, r3
 8001d8a:	68a1      	ldr	r1, [r4, #8]
 8001d8c:	6923      	ldr	r3, [r4, #16]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	055b      	lsls	r3, r3, #21
 8001d94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d98:	6861      	ldr	r1, [r4, #4]
 8001d9a:	3901      	subs	r1, #1
 8001d9c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001da0:	6821      	ldr	r1, [r4, #0]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	6102      	str	r2, [r0, #16]
 8001da8:	e7a9      	b.n	8001cfe <RCCEx_PLLSAI1_Config+0x76>
  switch (pPllSai1->PLLSAI1Source)
 8001daa:	2001      	movs	r0, #1
 8001dac:	e7c4      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
        status = HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e7c2      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8001db2:	2003      	movs	r0, #3
 8001db4:	e7c0      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
            status = HAL_TIMEOUT;
 8001db6:	2003      	movs	r0, #3
 8001db8:	e7be      	b.n	8001d38 <RCCEx_PLLSAI1_Config+0xb0>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	07ff800c 	.word	0x07ff800c
 8001dc4:	f9ff800c 	.word	0xf9ff800c
 8001dc8:	ff9f800c 	.word	0xff9f800c

08001dcc <HAL_RCCEx_PeriphCLKConfig>:
{
 8001dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001dda:	d034      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001ddc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001dde:	2b40      	cmp	r3, #64	@ 0x40
 8001de0:	d013      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001de2:	d80b      	bhi.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x30>
 8001de4:	b313      	cbz	r3, 8001e2c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d105      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dea:	2100      	movs	r1, #0
 8001dec:	3020      	adds	r0, #32
 8001dee:	f7ff fedb 	bl	8001ba8 <RCCEx_PLLSAI2_Config>
 8001df2:	4606      	mov	r6, r0
        break;
 8001df4:	e01f      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001df6:	2701      	movs	r7, #1
 8001df8:	463e      	mov	r6, r7
 8001dfa:	e026      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8001dfc:	2b60      	cmp	r3, #96	@ 0x60
 8001dfe:	d01e      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001e00:	2b80      	cmp	r3, #128	@ 0x80
 8001e02:	d01e      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e04:	2701      	movs	r7, #1
 8001e06:	463e      	mov	r6, r7
 8001e08:	e01f      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e0a:	4aaf      	ldr	r2, [pc, #700]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001e0c:	68d3      	ldr	r3, [r2, #12]
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e14:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e16:	4aac      	ldr	r2, [pc, #688]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001e18:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8001e1c:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8001e20:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8001e22:	430b      	orrs	r3, r1
 8001e24:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e28:	2700      	movs	r7, #0
 8001e2a:	e00e      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	3004      	adds	r0, #4
 8001e30:	f7ff ff2a 	bl	8001c88 <RCCEx_PLLSAI1_Config>
 8001e34:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8001e36:	2e00      	cmp	r6, #0
 8001e38:	d0ed      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      status = ret;
 8001e3a:	4637      	mov	r7, r6
 8001e3c:	e005      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8001e3e:	2600      	movs	r6, #0
 8001e40:	e7e9      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001e42:	2600      	movs	r6, #0
 8001e44:	e7e7      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e46:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e48:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001e50:	d032      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai2ClockSelection)
 8001e52:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8001e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e58:	d017      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001e5a:	d80d      	bhi.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001e5c:	b32b      	cbz	r3, 8001eaa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e62:	d106      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e64:	2100      	movs	r1, #0
 8001e66:	f104 0020 	add.w	r0, r4, #32
 8001e6a:	f7ff fe9d 	bl	8001ba8 <RCCEx_PLLSAI2_Config>
 8001e6e:	4606      	mov	r6, r0
        break;
 8001e70:	e010      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai2ClockSelection)
 8001e72:	2701      	movs	r7, #1
 8001e74:	463e      	mov	r6, r7
 8001e76:	e01f      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e82:	d007      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8001e84:	2701      	movs	r7, #1
 8001e86:	463e      	mov	r6, r7
 8001e88:	e016      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e8a:	4a8f      	ldr	r2, [pc, #572]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001e8c:	68d3      	ldr	r3, [r2, #12]
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 8001e94:	b97e      	cbnz	r6, 8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e96:	4a8c      	ldr	r2, [pc, #560]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001e98:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8001e9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ea0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ea8:	e006      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	1d20      	adds	r0, r4, #4
 8001eae:	f7ff feeb 	bl	8001c88 <RCCEx_PLLSAI1_Config>
 8001eb2:	4606      	mov	r6, r0
        break;
 8001eb4:	e7ee      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      status = ret;
 8001eb6:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001ebe:	d078      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec0:	4b81      	ldr	r3, [pc, #516]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001ec8:	d14f      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001ecc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ece:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ed2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ede:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ee4:	6813      	ldr	r3, [r2, #0]
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eea:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001eec:	f7fe fe9c 	bl	8000c28 <HAL_GetTick>
 8001ef0:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef2:	4b76      	ldr	r3, [pc, #472]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001efa:	d109      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x144>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7fe fe94 	bl	8000c28 <HAL_GetTick>
 8001f00:	1b40      	subs	r0, r0, r5
 8001f02:	2802      	cmp	r0, #2
 8001f04:	d9f5      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f06:	4b71      	ldr	r3, [pc, #452]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001f0e:	d048      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    if (ret == HAL_OK)
 8001f10:	2e00      	cmp	r6, #0
 8001f12:	d149      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f14:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f1a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001f1e:	d019      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001f20:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d012      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x182>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f28:	4a67      	ldr	r2, [pc, #412]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f32:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8001f36:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8001f3a:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3e:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8001f42:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8001f46:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f4e:	f013 0f01 	tst.w	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f54:	4a5c      	ldr	r2, [pc, #368]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f56:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f5e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f68:	e01f      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1de>
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	f04f 0800 	mov.w	r8, #0
 8001f6e:	e7b8      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        tickstart = HAL_GetTick();
 8001f70:	f7fe fe5a 	bl	8000c28 <HAL_GetTick>
 8001f74:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7c:	f013 0f02 	tst.w	r3, #2
 8001f80:	d1e8      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fe51 	bl	8000c28 <HAL_GetTick>
 8001f86:	1b40      	subs	r0, r0, r5
 8001f88:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f8c:	4298      	cmp	r0, r3
 8001f8e:	d9f2      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f90:	4b4d      	ldr	r3, [pc, #308]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	f013 0f02 	tst.w	r3, #2
 8001f9a:	d1db      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
        status = ret;
 8001f9c:	2703      	movs	r7, #3
              ret = HAL_TIMEOUT;
 8001f9e:	463e      	mov	r6, r7
 8001fa0:	e003      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      status = ret;
 8001fa2:	2703      	movs	r7, #3
          ret = HAL_TIMEOUT;
 8001fa4:	463e      	mov	r6, r7
 8001fa6:	e000      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      status = ret;
 8001fa8:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 8001faa:	f1b8 0f00 	cmp.w	r8, #0
 8001fae:	f040 8084 	bne.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	f013 0f01 	tst.w	r3, #1
 8001fb8:	d008      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4a43      	ldr	r2, [pc, #268]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001fbc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fc0:	f023 0303 	bic.w	r3, r3, #3
 8001fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f013 0f02 	tst.w	r3, #2
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001fd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001fda:	f023 030c 	bic.w	r3, r3, #12
 8001fde:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	f013 0f04 	tst.w	r3, #4
 8001fec:	d008      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fee:	4a36      	ldr	r2, [pc, #216]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001ff0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001ff4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ff8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	f013 0f08 	tst.w	r3, #8
 8002006:	d008      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002008:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800200a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800200e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002012:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8002014:	430b      	orrs	r3, r1
 8002016:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	f013 0f10 	tst.w	r3, #16
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002022:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002024:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800202c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800202e:	430b      	orrs	r3, r1
 8002030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	f013 0f20 	tst.w	r3, #32
 800203a:	d008      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x282>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800203c:	4a22      	ldr	r2, [pc, #136]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800203e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002042:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002046:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002048:	430b      	orrs	r3, r1
 800204a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002054:	d008      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002058:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800205c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002060:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002062:	430b      	orrs	r3, r1
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800206e:	d008      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002070:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002072:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002076:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800207a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800207c:	430b      	orrs	r3, r1
 800207e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002088:	d008      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800208a:	4a0f      	ldr	r2, [pc, #60]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800208c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002090:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002094:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002096:	430b      	orrs	r3, r1
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80020a2:	d026      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    switch (PeriphClkInit->FdcanClockSelection)
 80020a4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80020a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020aa:	d011      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80020ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020b0:	f000 80e6 	beq.w	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 80020b4:	b18b      	cbz	r3, 80020da <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80020b6:	2701      	movs	r7, #1
 80020b8:	e01b      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4a03      	ldr	r2, [pc, #12]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020bc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80020be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020c4:	e775      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d0:	4a92      	ldr	r2, [pc, #584]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80020d2:	68d3      	ldr	r3, [r2, #12]
 80020d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020d8:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 80020da:	2e00      	cmp	r6, #0
 80020dc:	f040 80d6 	bne.w	800228c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020e0:	4a8e      	ldr	r2, [pc, #568]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80020e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80020e6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80020ea:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80020ec:	430b      	orrs	r3, r1
 80020ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020f8:	d008      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020fa:	4a88      	ldr	r2, [pc, #544]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80020fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002100:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002104:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8002106:	430b      	orrs	r3, r1
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002112:	d008      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002114:	4a81      	ldr	r2, [pc, #516]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002116:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800211a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800211e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002120:	430b      	orrs	r3, r1
 8002122:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800212c:	d008      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x374>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800212e:	4a7b      	ldr	r2, [pc, #492]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002130:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002134:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002138:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800213a:	430b      	orrs	r3, r1
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002146:	d008      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002148:	4a74      	ldr	r2, [pc, #464]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800214a:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002154:	430b      	orrs	r3, r1
 8002156:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002160:	d011      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002162:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002164:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002168:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800216c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800216e:	430b      	orrs	r3, r1
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002174:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800217a:	f000 8089 	beq.w	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800217e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002182:	f000 808a 	beq.w	800229a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800218c:	d01e      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x400>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800218e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8002190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002194:	f000 808a 	beq.w	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002198:	4a60      	ldr	r2, [pc, #384]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800219a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800219e:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80021a2:	430b      	orrs	r3, r1
 80021a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80021a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80021ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021b4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80021b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021ba:	d07f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80021bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021c0:	f000 8084 	beq.w	80022cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c8:	f000 8086 	beq.w	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80021d2:	d00f      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d4:	4a51      	ldr	r2, [pc, #324]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80021d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80021da:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80021de:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80021e0:	430b      	orrs	r3, r1
 80021e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80021e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ec:	d07a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021f2:	d07c      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x522>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80021fa:	d00e      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021fc:	4a47      	ldr	r2, [pc, #284]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80021fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002202:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002206:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800220a:	430b      	orrs	r3, r1
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002210:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002218:	d072      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x534>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002220:	d009      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002222:	4a3e      	ldr	r2, [pc, #248]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002224:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8002230:	430b      	orrs	r3, r1
 8002232:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x486>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800223e:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002240:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002244:	f023 0318 	bic.w	r3, r3, #24
 8002248:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800224c:	430b      	orrs	r3, r1
 800224e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8002258:	d00e      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800225a:	4a30      	ldr	r2, [pc, #192]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800225c:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8002260:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002264:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8002268:	430b      	orrs	r3, r1
 800226a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800226e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8002272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002276:	d04b      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x544>
}
 8002278:	4638      	mov	r0, r7
 800227a:	b002      	add	sp, #8
 800227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002280:	2100      	movs	r1, #0
 8002282:	1d20      	adds	r0, r4, #4
 8002284:	f7ff fd00 	bl	8001c88 <RCCEx_PLLSAI1_Config>
 8002288:	4606      	mov	r6, r0
        break;
 800228a:	e726      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x30e>
      status = ret;
 800228c:	4637      	mov	r7, r6
 800228e:	e730      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002290:	68d3      	ldr	r3, [r2, #12]
 8002292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002296:	60d3      	str	r3, [r2, #12]
 8002298:	e775      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800229a:	2101      	movs	r1, #1
 800229c:	1d20      	adds	r0, r4, #4
 800229e:	f7ff fcf3 	bl	8001c88 <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 80022a2:	2800      	cmp	r0, #0
 80022a4:	f43f af6f 	beq.w	8002186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
          status = ret;
 80022a8:	4607      	mov	r7, r0
 80022aa:	e76c      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022ac:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80022ae:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80022b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022ba:	e77b      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022bc:	2101      	movs	r1, #1
 80022be:	1d20      	adds	r0, r4, #4
 80022c0:	f7ff fce2 	bl	8001c88 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d081      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x400>
        status = ret;
 80022c8:	4607      	mov	r7, r0
 80022ca:	e77f      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022cc:	4a13      	ldr	r2, [pc, #76]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80022ce:	68d3      	ldr	r3, [r2, #12]
 80022d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e779      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d8:	4a10      	ldr	r2, [pc, #64]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80022da:	68d3      	ldr	r3, [r2, #12]
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e0:	60d3      	str	r3, [r2, #12]
 80022e2:	e773      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	68d3      	ldr	r3, [r2, #12]
 80022e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ea:	60d3      	str	r3, [r2, #12]
 80022ec:	e782      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	2101      	movs	r1, #1
 80022f0:	1d20      	adds	r0, r4, #4
 80022f2:	f7ff fcc9 	bl	8001c88 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 80022f6:	2800      	cmp	r0, #0
 80022f8:	f43f af7c 	beq.w	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
        status = ret;
 80022fc:	4607      	mov	r7, r0
 80022fe:	e779      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002300:	2102      	movs	r1, #2
 8002302:	1d20      	adds	r0, r4, #4
 8002304:	f7ff fcc0 	bl	8001c88 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8002308:	2800      	cmp	r0, #0
 800230a:	d086      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x44e>
        status = ret;
 800230c:	4607      	mov	r7, r0
 800230e:	e784      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x44e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	68d3      	ldr	r3, [r2, #12]
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
 8002318:	e7ae      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002320:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002322:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002324:	6a03      	ldr	r3, [r0, #32]
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800232c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800232e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002334:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002338:	680d      	ldr	r5, [r1, #0]
 800233a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800233c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002340:	688b      	ldr	r3, [r1, #8]
 8002342:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002344:	4a1c      	ldr	r2, [pc, #112]	@ (80023b8 <TIM_OC1_SetConfig+0x98>)
 8002346:	4290      	cmp	r0, r2
 8002348:	d00f      	beq.n	800236a <TIM_OC1_SetConfig+0x4a>
 800234a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800234e:	4290      	cmp	r0, r2
 8002350:	d00b      	beq.n	800236a <TIM_OC1_SetConfig+0x4a>
 8002352:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002356:	4290      	cmp	r0, r2
 8002358:	d007      	beq.n	800236a <TIM_OC1_SetConfig+0x4a>
 800235a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800235e:	4290      	cmp	r0, r2
 8002360:	d003      	beq.n	800236a <TIM_OC1_SetConfig+0x4a>
 8002362:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002366:	4290      	cmp	r0, r2
 8002368:	d105      	bne.n	8002376 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800236a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800236e:	68ca      	ldr	r2, [r1, #12]
 8002370:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002372:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002376:	4a10      	ldr	r2, [pc, #64]	@ (80023b8 <TIM_OC1_SetConfig+0x98>)
 8002378:	4290      	cmp	r0, r2
 800237a:	d00f      	beq.n	800239c <TIM_OC1_SetConfig+0x7c>
 800237c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002380:	4290      	cmp	r0, r2
 8002382:	d00b      	beq.n	800239c <TIM_OC1_SetConfig+0x7c>
 8002384:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002388:	4290      	cmp	r0, r2
 800238a:	d007      	beq.n	800239c <TIM_OC1_SetConfig+0x7c>
 800238c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002390:	4290      	cmp	r0, r2
 8002392:	d003      	beq.n	800239c <TIM_OC1_SetConfig+0x7c>
 8002394:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002398:	4290      	cmp	r0, r2
 800239a:	d105      	bne.n	80023a8 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800239c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023a0:	694a      	ldr	r2, [r1, #20]
 80023a2:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023a4:	698c      	ldr	r4, [r1, #24]
 80023a6:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023aa:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ac:	684a      	ldr	r2, [r1, #4]
 80023ae:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b0:	6203      	str	r3, [r0, #32]
}
 80023b2:	bc30      	pop	{r4, r5}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00

080023bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c0:	6a02      	ldr	r2, [r0, #32]
 80023c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023cc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80023d0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	680d      	ldr	r5, [r1, #0]
 80023d6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023dc:	688a      	ldr	r2, [r1, #8]
 80023de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023e2:	4a18      	ldr	r2, [pc, #96]	@ (8002444 <TIM_OC3_SetConfig+0x88>)
 80023e4:	4290      	cmp	r0, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_OC3_SetConfig+0x34>
 80023e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ec:	4290      	cmp	r0, r2
 80023ee:	d106      	bne.n	80023fe <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023f4:	68ca      	ldr	r2, [r1, #12]
 80023f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fe:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <TIM_OC3_SetConfig+0x88>)
 8002400:	4290      	cmp	r0, r2
 8002402:	d00f      	beq.n	8002424 <TIM_OC3_SetConfig+0x68>
 8002404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002408:	4290      	cmp	r0, r2
 800240a:	d00b      	beq.n	8002424 <TIM_OC3_SetConfig+0x68>
 800240c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002410:	4290      	cmp	r0, r2
 8002412:	d007      	beq.n	8002424 <TIM_OC3_SetConfig+0x68>
 8002414:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002418:	4290      	cmp	r0, r2
 800241a:	d003      	beq.n	8002424 <TIM_OC3_SetConfig+0x68>
 800241c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002420:	4290      	cmp	r0, r2
 8002422:	d107      	bne.n	8002434 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002424:	f424 5240 	bic.w	r2, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002428:	694c      	ldr	r4, [r1, #20]
 800242a:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800242e:	698c      	ldr	r4, [r1, #24]
 8002430:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002436:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002438:	684a      	ldr	r2, [r1, #4]
 800243a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243c:	6203      	str	r3, [r0, #32]
}
 800243e:	bc30      	pop	{r4, r5}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40012c00 	.word	0x40012c00

08002448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244c:	6a02      	ldr	r2, [r0, #32]
 800244e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002452:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002454:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002456:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002458:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800245c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	680d      	ldr	r5, [r1, #0]
 8002462:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002466:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800246a:	688d      	ldr	r5, [r1, #8]
 800246c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002470:	4d0f      	ldr	r5, [pc, #60]	@ (80024b0 <TIM_OC4_SetConfig+0x68>)
 8002472:	42a8      	cmp	r0, r5
 8002474:	d00f      	beq.n	8002496 <TIM_OC4_SetConfig+0x4e>
 8002476:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800247a:	42a8      	cmp	r0, r5
 800247c:	d00b      	beq.n	8002496 <TIM_OC4_SetConfig+0x4e>
 800247e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002482:	42a8      	cmp	r0, r5
 8002484:	d007      	beq.n	8002496 <TIM_OC4_SetConfig+0x4e>
 8002486:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800248a:	42a8      	cmp	r0, r5
 800248c:	d003      	beq.n	8002496 <TIM_OC4_SetConfig+0x4e>
 800248e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002492:	42a8      	cmp	r0, r5
 8002494:	d104      	bne.n	80024a0 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002496:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800249a:	694d      	ldr	r5, [r1, #20]
 800249c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a4:	684a      	ldr	r2, [r1, #4]
 80024a6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	6203      	str	r3, [r0, #32]
}
 80024aa:	bc30      	pop	{r4, r5}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40012c00 	.word	0x40012c00

080024b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80024b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024b6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80024b8:	6a02      	ldr	r2, [r0, #32]
 80024ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024be:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024c2:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024c4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024c8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024cc:	680d      	ldr	r5, [r1, #0]
 80024ce:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024d4:	688a      	ldr	r2, [r1, #8]
 80024d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024da:	4a0f      	ldr	r2, [pc, #60]	@ (8002518 <TIM_OC5_SetConfig+0x64>)
 80024dc:	4290      	cmp	r0, r2
 80024de:	d00f      	beq.n	8002500 <TIM_OC5_SetConfig+0x4c>
 80024e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024e4:	4290      	cmp	r0, r2
 80024e6:	d00b      	beq.n	8002500 <TIM_OC5_SetConfig+0x4c>
 80024e8:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d007      	beq.n	8002500 <TIM_OC5_SetConfig+0x4c>
 80024f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024f4:	4290      	cmp	r0, r2
 80024f6:	d003      	beq.n	8002500 <TIM_OC5_SetConfig+0x4c>
 80024f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80024fc:	4290      	cmp	r0, r2
 80024fe:	d104      	bne.n	800250a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002500:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002504:	694a      	ldr	r2, [r1, #20]
 8002506:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800250a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800250c:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800250e:	684a      	ldr	r2, [r1, #4]
 8002510:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002512:	6203      	str	r3, [r0, #32]
}
 8002514:	bc30      	pop	{r4, r5}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00

0800251c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800251c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002520:	6a02      	ldr	r2, [r0, #32]
 8002522:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002526:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002528:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800252a:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800252c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002530:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002534:	680d      	ldr	r5, [r1, #0]
 8002536:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800253a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800253e:	688d      	ldr	r5, [r1, #8]
 8002540:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002544:	4d0f      	ldr	r5, [pc, #60]	@ (8002584 <TIM_OC6_SetConfig+0x68>)
 8002546:	42a8      	cmp	r0, r5
 8002548:	d00f      	beq.n	800256a <TIM_OC6_SetConfig+0x4e>
 800254a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800254e:	42a8      	cmp	r0, r5
 8002550:	d00b      	beq.n	800256a <TIM_OC6_SetConfig+0x4e>
 8002552:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002556:	42a8      	cmp	r0, r5
 8002558:	d007      	beq.n	800256a <TIM_OC6_SetConfig+0x4e>
 800255a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800255e:	42a8      	cmp	r0, r5
 8002560:	d003      	beq.n	800256a <TIM_OC6_SetConfig+0x4e>
 8002562:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002566:	42a8      	cmp	r0, r5
 8002568:	d104      	bne.n	8002574 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800256a:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800256e:	694d      	ldr	r5, [r1, #20]
 8002570:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002574:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002576:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002578:	684a      	ldr	r2, [r1, #4]
 800257a:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257c:	6203      	str	r3, [r0, #32]
}
 800257e:	bc30      	pop	{r4, r5}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00

08002588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800258a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258c:	6a04      	ldr	r4, [r0, #32]
 800258e:	f024 0401 	bic.w	r4, r4, #1
 8002592:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002594:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002596:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800259e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80025a2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025a4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025a6:	6203      	str	r3, [r0, #32]
}
 80025a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ae:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025b0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	6a04      	ldr	r4, [r0, #32]
 80025b4:	f024 0410 	bic.w	r4, r4, #16
 80025b8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025bc:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80025c8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025cc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025ce:	6203      	str	r3, [r0, #32]
}
 80025d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80025dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e0:	430b      	orrs	r3, r1
 80025e2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025e6:	6083      	str	r3, [r0, #8]
}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80025ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d131      	bne.n	800265a <HAL_TIM_Base_Start+0x6e>
  htim->State = HAL_TIM_STATE_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	6803      	ldr	r3, [r0, #0]
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_TIM_Base_Start+0x7c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d01c      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d019      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 800260a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800260e:	4293      	cmp	r3, r2
 8002610:	d015      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 8002612:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002616:	4293      	cmp	r3, r2
 8002618:	d011      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 800261a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 8002622:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002626:	4293      	cmp	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
 800262a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800262e:	4293      	cmp	r3, r2
 8002630:	d005      	beq.n	800263e <HAL_TIM_Base_Start+0x52>
    __HAL_TIM_ENABLE(htim);
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800263a:	2000      	movs	r0, #0
 800263c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <HAL_TIM_Base_Start+0x80>)
 8002642:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	2a06      	cmp	r2, #6
 8002646:	d00a      	beq.n	800265e <HAL_TIM_Base_Start+0x72>
 8002648:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800264c:	d009      	beq.n	8002662 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002656:	2000      	movs	r0, #0
 8002658:	4770      	bx	lr
    return HAL_ERROR;
 800265a:	2001      	movs	r0, #1
 800265c:	4770      	bx	lr
  return HAL_OK;
 800265e:	2000      	movs	r0, #0
 8002660:	4770      	bx	lr
 8002662:	2000      	movs	r0, #0
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	00010007 	.word	0x00010007

08002670 <HAL_TIM_OC_MspInit>:
}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_PWM_MspInit>:
}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_OnePulse_MspInit>:
}
 8002674:	4770      	bx	lr
	...

08002678 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002678:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267a:	4a34      	ldr	r2, [pc, #208]	@ (800274c <TIM_Base_SetConfig+0xd4>)
 800267c:	4290      	cmp	r0, r2
 800267e:	d012      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002680:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002684:	d00f      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002686:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800268a:	4290      	cmp	r0, r2
 800268c:	d00b      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 800268e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002692:	4290      	cmp	r0, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 8002696:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800269a:	4290      	cmp	r0, r2
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0x2e>
 800269e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80026a2:	4290      	cmp	r0, r2
 80026a4:	d103      	bne.n	80026ae <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80026aa:	684a      	ldr	r2, [r1, #4]
 80026ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	4a27      	ldr	r2, [pc, #156]	@ (800274c <TIM_Base_SetConfig+0xd4>)
 80026b0:	4290      	cmp	r0, r2
 80026b2:	d01e      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80026b8:	d01b      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026ba:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80026be:	4290      	cmp	r0, r2
 80026c0:	d017      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d013      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d00f      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026d2:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80026d6:	4290      	cmp	r0, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026da:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80026de:	4290      	cmp	r0, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026e6:	4290      	cmp	r0, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0x7a>
 80026ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80026ee:	4290      	cmp	r0, r2
 80026f0:	d103      	bne.n	80026fa <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	68ca      	ldr	r2, [r1, #12]
 80026f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026fe:	694a      	ldr	r2, [r1, #20]
 8002700:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002702:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002704:	688b      	ldr	r3, [r1, #8]
 8002706:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002708:	680b      	ldr	r3, [r1, #0]
 800270a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <TIM_Base_SetConfig+0xd4>)
 800270e:	4298      	cmp	r0, r3
 8002710:	d00f      	beq.n	8002732 <TIM_Base_SetConfig+0xba>
 8002712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002716:	4298      	cmp	r0, r3
 8002718:	d00b      	beq.n	8002732 <TIM_Base_SetConfig+0xba>
 800271a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800271e:	4298      	cmp	r0, r3
 8002720:	d007      	beq.n	8002732 <TIM_Base_SetConfig+0xba>
 8002722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002726:	4298      	cmp	r0, r3
 8002728:	d003      	beq.n	8002732 <TIM_Base_SetConfig+0xba>
 800272a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800272e:	4298      	cmp	r0, r3
 8002730:	d101      	bne.n	8002736 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002732:	690b      	ldr	r3, [r1, #16]
 8002734:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002736:	2301      	movs	r3, #1
 8002738:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800273a:	6903      	ldr	r3, [r0, #16]
 800273c:	f013 0f01 	tst.w	r3, #1
 8002740:	d003      	beq.n	800274a <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002742:	6903      	ldr	r3, [r0, #16]
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6103      	str	r3, [r0, #16]
}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00

08002750 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002750:	b360      	cbz	r0, 80027ac <HAL_TIM_Base_Init+0x5c>
{
 8002752:	b510      	push	{r4, lr}
 8002754:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002756:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800275a:	b313      	cbz	r3, 80027a2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002762:	4621      	mov	r1, r4
 8002764:	f851 0b04 	ldr.w	r0, [r1], #4
 8002768:	f7ff ff86 	bl	8002678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276c:	2301      	movs	r3, #1
 800276e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002776:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800277a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800277e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002782:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800278e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002792:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002796:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800279a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800279e:	2000      	movs	r0, #0
}
 80027a0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027a2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027a6:	f7fe f89f 	bl	80008e8 <HAL_TIM_Base_MspInit>
 80027aa:	e7d7      	b.n	800275c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80027b0:	b360      	cbz	r0, 800280c <HAL_TIM_OC_Init+0x5c>
{
 80027b2:	b510      	push	{r4, lr}
 80027b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80027b6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80027ba:	b313      	cbz	r3, 8002802 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80027c2:	4621      	mov	r1, r4
 80027c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80027c8:	f7ff ff56 	bl	8002678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80027d6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80027da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80027de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80027e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80027ee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80027f2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80027f6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80027fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80027fe:	2000      	movs	r0, #0
}
 8002800:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002802:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002806:	f7ff ff33 	bl	8002670 <HAL_TIM_OC_MspInit>
 800280a:	e7d7      	b.n	80027bc <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
}
 800280e:	4770      	bx	lr

08002810 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002810:	b360      	cbz	r0, 800286c <HAL_TIM_PWM_Init+0x5c>
{
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800281a:	b313      	cbz	r3, 8002862 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002822:	4621      	mov	r1, r4
 8002824:	f851 0b04 	ldr.w	r0, [r1], #4
 8002828:	f7ff ff26 	bl	8002678 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	2301      	movs	r3, #1
 800282e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002832:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002836:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800283a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800283e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002842:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800284a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800284e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002852:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8002856:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800285a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800285e:	2000      	movs	r0, #0
}
 8002860:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002862:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002866:	f7ff ff04 	bl	8002672 <HAL_TIM_PWM_MspInit>
 800286a:	e7d7      	b.n	800281c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
}
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8002870:	b350      	cbz	r0, 80028c8 <HAL_TIM_OnePulse_Init+0x58>
{
 8002872:	b538      	push	{r3, r4, r5, lr}
 8002874:	460d      	mov	r5, r1
 8002876:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002878:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800287c:	b1fb      	cbz	r3, 80028be <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800287e:	2302      	movs	r3, #2
 8002880:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	4621      	mov	r1, r4
 8002886:	f851 0b04 	ldr.w	r0, [r1], #4
 800288a:	f7ff fef5 	bl	8002678 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 0308 	bic.w	r3, r3, #8
 8002896:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002898:	6822      	ldr	r2, [r4, #0]
 800289a:	6813      	ldr	r3, [r2, #0]
 800289c:	432b      	orrs	r3, r5
 800289e:	6013      	str	r3, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80028b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80028ba:	2000      	movs	r0, #0
}
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80028be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80028c2:	f7ff fed7 	bl	8002674 <HAL_TIM_OnePulse_MspInit>
 80028c6:	e7da      	b.n	800287e <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
}
 80028ca:	4770      	bx	lr

080028cc <TIM_OC2_SetConfig>:
{
 80028cc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80028ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	6a02      	ldr	r2, [r0, #32]
 80028d2:	f022 0210 	bic.w	r2, r2, #16
 80028d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80028d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80028da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028dc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80028e0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028e4:	680d      	ldr	r5, [r1, #0]
 80028e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80028ea:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ee:	688d      	ldr	r5, [r1, #8]
 80028f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028f4:	4d17      	ldr	r5, [pc, #92]	@ (8002954 <TIM_OC2_SetConfig+0x88>)
 80028f6:	42a8      	cmp	r0, r5
 80028f8:	d003      	beq.n	8002902 <TIM_OC2_SetConfig+0x36>
 80028fa:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80028fe:	42a8      	cmp	r0, r5
 8002900:	d106      	bne.n	8002910 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002906:	68cd      	ldr	r5, [r1, #12]
 8002908:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800290c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	4d10      	ldr	r5, [pc, #64]	@ (8002954 <TIM_OC2_SetConfig+0x88>)
 8002912:	42a8      	cmp	r0, r5
 8002914:	d00f      	beq.n	8002936 <TIM_OC2_SetConfig+0x6a>
 8002916:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800291a:	42a8      	cmp	r0, r5
 800291c:	d00b      	beq.n	8002936 <TIM_OC2_SetConfig+0x6a>
 800291e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8002922:	42a8      	cmp	r0, r5
 8002924:	d007      	beq.n	8002936 <TIM_OC2_SetConfig+0x6a>
 8002926:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800292a:	42a8      	cmp	r0, r5
 800292c:	d003      	beq.n	8002936 <TIM_OC2_SetConfig+0x6a>
 800292e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002932:	42a8      	cmp	r0, r5
 8002934:	d107      	bne.n	8002946 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002936:	f424 6c40 	bic.w	ip, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800293a:	694c      	ldr	r4, [r1, #20]
 800293c:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002940:	698c      	ldr	r4, [r1, #24]
 8002942:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002946:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002948:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800294a:	684a      	ldr	r2, [r1, #4]
 800294c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800294e:	6203      	str	r3, [r0, #32]
}
 8002950:	bc30      	pop	{r4, r5}
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00

08002958 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002958:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d036      	beq.n	80029ce <HAL_TIM_OC_ConfigChannel+0x76>
{
 8002960:	b510      	push	{r4, lr}
 8002962:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002964:	2301      	movs	r3, #1
 8002966:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800296a:	2a14      	cmp	r2, #20
 800296c:	d82a      	bhi.n	80029c4 <HAL_TIM_OC_ConfigChannel+0x6c>
 800296e:	e8df f002 	tbb	[pc, r2]
 8002972:	290b      	.short	0x290b
 8002974:	29102929 	.word	0x29102929
 8002978:	29152929 	.word	0x29152929
 800297c:	291a2929 	.word	0x291a2929
 8002980:	291f2929 	.word	0x291f2929
 8002984:	2929      	.short	0x2929
 8002986:	24          	.byte	0x24
 8002987:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	6800      	ldr	r0, [r0, #0]
 800298a:	f7ff fcc9 	bl	8002320 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2000      	movs	r0, #0
      break;
 8002990:	e019      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002992:	6800      	ldr	r0, [r0, #0]
 8002994:	f7ff ff9a 	bl	80028cc <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2000      	movs	r0, #0
      break;
 800299a:	e014      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800299c:	6800      	ldr	r0, [r0, #0]
 800299e:	f7ff fd0d 	bl	80023bc <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80029a2:	2000      	movs	r0, #0
      break;
 80029a4:	e00f      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	f7ff fd4e 	bl	8002448 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2000      	movs	r0, #0
      break;
 80029ae:	e00a      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029b0:	6800      	ldr	r0, [r0, #0]
 80029b2:	f7ff fd7f 	bl	80024b4 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80029b6:	2000      	movs	r0, #0
      break;
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	f7ff fdae 	bl	800251c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2000      	movs	r0, #0
      break;
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 80029c4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80029c6:	2300      	movs	r3, #0
 80029c8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80029cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80029ce:	2002      	movs	r0, #2
}
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_ConfigChannel>:
{
 80029d2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80029d4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f000 8095 	beq.w	8002b08 <HAL_TIM_PWM_ConfigChannel+0x136>
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	2301      	movs	r3, #1
 80029e4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80029e8:	2a14      	cmp	r2, #20
 80029ea:	f200 8088 	bhi.w	8002afe <HAL_TIM_PWM_ConfigChannel+0x12c>
 80029ee:	e8df f002 	tbb	[pc, r2]
 80029f2:	860b      	.short	0x860b
 80029f4:	861f8686 	.word	0x861f8686
 80029f8:	86348686 	.word	0x86348686
 80029fc:	86488686 	.word	0x86488686
 8002a00:	865d8686 	.word	0x865d8686
 8002a04:	8686      	.short	0x8686
 8002a06:	71          	.byte	0x71
 8002a07:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	f7ff fc89 	bl	8002320 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6993      	ldr	r3, [r2, #24]
 8002a12:	f043 0308 	orr.w	r3, r3, #8
 8002a16:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a18:	6822      	ldr	r2, [r4, #0]
 8002a1a:	6993      	ldr	r3, [r2, #24]
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	6993      	ldr	r3, [r2, #24]
 8002a26:	6929      	ldr	r1, [r5, #16]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2000      	movs	r0, #0
      break;
 8002a2e:	e067      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a30:	6800      	ldr	r0, [r0, #0]
 8002a32:	f7ff ff4b 	bl	80028cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	6993      	ldr	r3, [r2, #24]
 8002a3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a3e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a40:	6822      	ldr	r2, [r4, #0]
 8002a42:	6993      	ldr	r3, [r2, #24]
 8002a44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a48:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	6993      	ldr	r3, [r2, #24]
 8002a4e:	6929      	ldr	r1, [r5, #16]
 8002a50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a54:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002a56:	2000      	movs	r0, #0
      break;
 8002a58:	e052      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a5a:	6800      	ldr	r0, [r0, #0]
 8002a5c:	f7ff fcae 	bl	80023bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a60:	6822      	ldr	r2, [r4, #0]
 8002a62:	69d3      	ldr	r3, [r2, #28]
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	69d3      	ldr	r3, [r2, #28]
 8002a6e:	f023 0304 	bic.w	r3, r3, #4
 8002a72:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	69d3      	ldr	r3, [r2, #28]
 8002a78:	6929      	ldr	r1, [r5, #16]
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2000      	movs	r0, #0
      break;
 8002a80:	e03e      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a82:	6800      	ldr	r0, [r0, #0]
 8002a84:	f7ff fce0 	bl	8002448 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a88:	6822      	ldr	r2, [r4, #0]
 8002a8a:	69d3      	ldr	r3, [r2, #28]
 8002a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a90:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	69d3      	ldr	r3, [r2, #28]
 8002a96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a9a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a9c:	6822      	ldr	r2, [r4, #0]
 8002a9e:	69d3      	ldr	r3, [r2, #28]
 8002aa0:	6929      	ldr	r1, [r5, #16]
 8002aa2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aa6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2000      	movs	r0, #0
      break;
 8002aaa:	e029      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002aac:	6800      	ldr	r0, [r0, #0]
 8002aae:	f7ff fd01 	bl	80024b4 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002aca:	6929      	ldr	r1, [r5, #16]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2000      	movs	r0, #0
      break;
 8002ad2:	e015      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ad4:	6800      	ldr	r0, [r0, #0]
 8002ad6:	f7ff fd21 	bl	800251c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ade:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae2:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ae8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002aec:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002aee:	6822      	ldr	r2, [r4, #0]
 8002af0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002af2:	6929      	ldr	r1, [r5, #16]
 8002af4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002af8:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2000      	movs	r0, #0
      break;
 8002afc:	e000      	b.n	8002b00 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002afe:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002b00:	2300      	movs	r3, #0
 8002b02:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002b08:	2002      	movs	r0, #2
 8002b0a:	e7fc      	b.n	8002b06 <HAL_TIM_PWM_ConfigChannel+0x134>

08002b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b10:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b14:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	6082      	str	r2, [r0, #8]
}
 8002b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b28:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d076      	beq.n	8002c1e <HAL_TIM_ConfigClockSource+0xf6>
{
 8002b30:	b510      	push	{r4, lr}
 8002b32:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002b34:	2301      	movs	r3, #1
 8002b36:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002b40:	6802      	ldr	r2, [r0, #0]
 8002b42:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b44:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <HAL_TIM_ConfigClockSource+0xfc>)
 8002b46:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002b48:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b4a:	680b      	ldr	r3, [r1, #0]
 8002b4c:	2b60      	cmp	r3, #96	@ 0x60
 8002b4e:	d04c      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xc2>
 8002b50:	d823      	bhi.n	8002b9a <HAL_TIM_ConfigClockSource+0x72>
 8002b52:	2b40      	cmp	r3, #64	@ 0x40
 8002b54:	d054      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0xd8>
 8002b56:	d811      	bhi.n	8002b7c <HAL_TIM_ConfigClockSource+0x54>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0x3c>
 8002b5c:	d80a      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x4c>
 8002b5e:	b10b      	cbz	r3, 8002b64 <HAL_TIM_ConfigClockSource+0x3c>
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d105      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b64:	4619      	mov	r1, r3
 8002b66:	6820      	ldr	r0, [r4, #0]
 8002b68:	f7ff fd35 	bl	80025d6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2000      	movs	r0, #0
      break;
 8002b6e:	e028      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002b70:	2001      	movs	r0, #1
 8002b72:	e026      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002b74:	2b30      	cmp	r3, #48	@ 0x30
 8002b76:	d0f5      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0x3c>
      status = HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	e022      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002b7c:	2b50      	cmp	r3, #80	@ 0x50
 8002b7e:	d10a      	bne.n	8002b96 <HAL_TIM_ConfigClockSource+0x6e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b80:	68ca      	ldr	r2, [r1, #12]
 8002b82:	6849      	ldr	r1, [r1, #4]
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	f7ff fcff 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b8a:	2150      	movs	r1, #80	@ 0x50
 8002b8c:	6820      	ldr	r0, [r4, #0]
 8002b8e:	f7ff fd22 	bl	80025d6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2000      	movs	r0, #0
      break;
 8002b94:	e015      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
 8002b98:	e013      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b9e:	d03a      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xee>
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba4:	d014      	beq.n	8002bd0 <HAL_TIM_ConfigClockSource+0xa8>
 8002ba6:	2b70      	cmp	r3, #112	@ 0x70
 8002ba8:	d137      	bne.n	8002c1a <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8002baa:	68cb      	ldr	r3, [r1, #12]
 8002bac:	684a      	ldr	r2, [r1, #4]
 8002bae:	6889      	ldr	r1, [r1, #8]
 8002bb0:	6820      	ldr	r0, [r4, #0]
 8002bb2:	f7ff ffab 	bl	8002b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002bbe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002bce:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002bd0:	68cb      	ldr	r3, [r1, #12]
 8002bd2:	684a      	ldr	r2, [r1, #4]
 8002bd4:	6889      	ldr	r1, [r1, #8]
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	f7ff ff98 	bl	8002b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bdc:	6822      	ldr	r2, [r4, #0]
 8002bde:	6893      	ldr	r3, [r2, #8]
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2000      	movs	r0, #0
      break;
 8002be8:	e7eb      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bea:	68ca      	ldr	r2, [r1, #12]
 8002bec:	6849      	ldr	r1, [r1, #4]
 8002bee:	6820      	ldr	r0, [r4, #0]
 8002bf0:	f7ff fcdd 	bl	80025ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf4:	2160      	movs	r1, #96	@ 0x60
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	f7ff fced 	bl	80025d6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2000      	movs	r0, #0
      break;
 8002bfe:	e7e0      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c00:	68ca      	ldr	r2, [r1, #12]
 8002c02:	6849      	ldr	r1, [r1, #4]
 8002c04:	6820      	ldr	r0, [r4, #0]
 8002c06:	f7ff fcbf 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c0a:	2140      	movs	r1, #64	@ 0x40
 8002c0c:	6820      	ldr	r0, [r4, #0]
 8002c0e:	f7ff fce2 	bl	80025d6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2000      	movs	r0, #0
      break;
 8002c14:	e7d5      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
  switch (sClockSourceConfig->ClockSource)
 8002c16:	2000      	movs	r0, #0
 8002c18:	e7d3      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
      status = HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	e7d1      	b.n	8002bc2 <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8002c1e:	2002      	movs	r0, #2
}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	ffce0088 	.word	0xffce0088

08002c28 <TIM_SlaveTimer_SetConfig>:
{
 8002c28:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002c2a:	6804      	ldr	r4, [r0, #0]
 8002c2c:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c2e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002c32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002c36:	684b      	ldr	r3, [r1, #4]
 8002c38:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002c42:	680a      	ldr	r2, [r1, #0]
 8002c44:	431a      	orrs	r2, r3
  htim->Instance->SMCR = tmpsmcr;
 8002c46:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002c48:	684b      	ldr	r3, [r1, #4]
 8002c4a:	2b50      	cmp	r3, #80	@ 0x50
 8002c4c:	d030      	beq.n	8002cb0 <TIM_SlaveTimer_SetConfig+0x88>
 8002c4e:	d90b      	bls.n	8002c68 <TIM_SlaveTimer_SetConfig+0x40>
 8002c50:	2b60      	cmp	r3, #96	@ 0x60
 8002c52:	d034      	beq.n	8002cbe <TIM_SlaveTimer_SetConfig+0x96>
 8002c54:	2b70      	cmp	r3, #112	@ 0x70
 8002c56:	d143      	bne.n	8002ce0 <TIM_SlaveTimer_SetConfig+0xb8>
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	690b      	ldr	r3, [r1, #16]
 8002c5a:	688a      	ldr	r2, [r1, #8]
 8002c5c:	68c9      	ldr	r1, [r1, #12]
 8002c5e:	6800      	ldr	r0, [r0, #0]
 8002c60:	f7ff ff54 	bl	8002b0c <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	2000      	movs	r0, #0
}
 8002c66:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	d00c      	beq.n	8002c86 <TIM_SlaveTimer_SetConfig+0x5e>
 8002c6c:	d82e      	bhi.n	8002ccc <TIM_SlaveTimer_SetConfig+0xa4>
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d02e      	beq.n	8002cd0 <TIM_SlaveTimer_SetConfig+0xa8>
 8002c72:	d804      	bhi.n	8002c7e <TIM_SlaveTimer_SetConfig+0x56>
 8002c74:	b373      	cbz	r3, 8002cd4 <TIM_SlaveTimer_SetConfig+0xac>
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d12e      	bne.n	8002cd8 <TIM_SlaveTimer_SetConfig+0xb0>
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e7f3      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
 8002c7e:	2b30      	cmp	r3, #48	@ 0x30
 8002c80:	d12c      	bne.n	8002cdc <TIM_SlaveTimer_SetConfig+0xb4>
 8002c82:	2000      	movs	r0, #0
 8002c84:	e7ef      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c86:	680b      	ldr	r3, [r1, #0]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d02b      	beq.n	8002ce4 <TIM_SlaveTimer_SetConfig+0xbc>
      tmpccer = htim->Instance->CCER;
 8002c8c:	6803      	ldr	r3, [r0, #0]
 8002c8e:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c98:	6802      	ldr	r2, [r0, #0]
 8002c9a:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002ca0:	6909      	ldr	r1, [r1, #16]
 8002ca2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002ca6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	621c      	str	r4, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8002cac:	2000      	movs	r0, #0
      break;
 8002cae:	e7da      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb0:	690a      	ldr	r2, [r1, #16]
 8002cb2:	6889      	ldr	r1, [r1, #8]
 8002cb4:	6800      	ldr	r0, [r0, #0]
 8002cb6:	f7ff fc67 	bl	8002588 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2000      	movs	r0, #0
      break;
 8002cbc:	e7d3      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cbe:	690a      	ldr	r2, [r1, #16]
 8002cc0:	6889      	ldr	r1, [r1, #8]
 8002cc2:	6800      	ldr	r0, [r0, #0]
 8002cc4:	f7ff fc73 	bl	80025ae <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2000      	movs	r0, #0
      break;
 8002cca:	e7cc      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
      status = HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
 8002cce:	e7ca      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
  switch (sSlaveConfig->InputTrigger)
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e7c8      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e7c6      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
      status = HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	e7c4      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e7c2      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	e7c0      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>
        return HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	e7be      	b.n	8002c66 <TIM_SlaveTimer_SetConfig+0x3e>

08002ce8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8002ce8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d022      	beq.n	8002d36 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d00:	f7ff ff92 	bl	8002c28 <TIM_SlaveTimer_SetConfig>
 8002d04:	b980      	cbnz	r0, 8002d28 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	68d3      	ldr	r3, [r2, #12]
 8002d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d0e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d10:	6822      	ldr	r2, [r4, #0]
 8002d12:	68d3      	ldr	r3, [r2, #12]
 8002d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d18:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002d20:	2300      	movs	r3, #0
 8002d22:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d26:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002d34:	e7f7      	b.n	8002d26 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8002d36:	2002      	movs	r0, #2
}
 8002d38:	4770      	bx	lr

08002d3a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d3a:	f001 011f 	and.w	r1, r1, #31
 8002d3e:	f04f 0c01 	mov.w	ip, #1
 8002d42:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d46:	6a03      	ldr	r3, [r0, #32]
 8002d48:	ea23 030c 	bic.w	r3, r3, ip
 8002d4c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4e:	6a03      	ldr	r3, [r0, #32]
 8002d50:	408a      	lsls	r2, r1
 8002d52:	4313      	orrs	r3, r2
 8002d54:	6203      	str	r3, [r0, #32]
}
 8002d56:	4770      	bx	lr

08002d58 <HAL_TIM_PWM_Start>:
{
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5c:	2910      	cmp	r1, #16
 8002d5e:	d83c      	bhi.n	8002dda <HAL_TIM_PWM_Start+0x82>
 8002d60:	e8df f001 	tbb	[pc, r1]
 8002d64:	3b3b3b09 	.word	0x3b3b3b09
 8002d68:	3b3b3b1f 	.word	0x3b3b3b1f
 8002d6c:	3b3b3b26 	.word	0x3b3b3b26
 8002d70:	3b3b3b2d 	.word	0x3b3b3b2d
 8002d74:	34          	.byte	0x34
 8002d75:	00          	.byte	0x00
 8002d76:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	bf18      	it	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8092 	bne.w	8002eac <HAL_TIM_PWM_Start+0x154>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d88:	2910      	cmp	r1, #16
 8002d8a:	d87d      	bhi.n	8002e88 <HAL_TIM_PWM_Start+0x130>
 8002d8c:	e8df f001 	tbb	[pc, r1]
 8002d90:	7c7c7c2c 	.word	0x7c7c7c2c
 8002d94:	7c7c7c6c 	.word	0x7c7c7c6c
 8002d98:	7c7c7c70 	.word	0x7c7c7c70
 8002d9c:	7c7c7c74 	.word	0x7c7c7c74
 8002da0:	78          	.byte	0x78
 8002da1:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002da2:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	bf18      	it	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	e7e8      	b.n	8002d82 <HAL_TIM_PWM_Start+0x2a>
 8002db0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	bf18      	it	ne
 8002dba:	2301      	movne	r3, #1
 8002dbc:	e7e1      	b.n	8002d82 <HAL_TIM_PWM_Start+0x2a>
 8002dbe:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	bf18      	it	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	e7da      	b.n	8002d82 <HAL_TIM_PWM_Start+0x2a>
 8002dcc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	bf18      	it	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	e7d3      	b.n	8002d82 <HAL_TIM_PWM_Start+0x2a>
 8002dda:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	bf18      	it	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	e7cc      	b.n	8002d82 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de8:	2302      	movs	r3, #2
 8002dea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dee:	2201      	movs	r2, #1
 8002df0:	6820      	ldr	r0, [r4, #0]
 8002df2:	f7ff ffa2 	bl	8002d3a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb8 <HAL_TIM_PWM_Start+0x160>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00f      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xc6>
 8002dfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xc6>
 8002e06:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xc6>
 8002e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xc6>
 8002e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d103      	bne.n	8002e26 <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	4a23      	ldr	r2, [pc, #140]	@ (8002eb8 <HAL_TIM_PWM_Start+0x160>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d030      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e32:	d02d      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e34:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d029      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d025      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e44:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d021      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e4c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d01d      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
 8002e54:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d019      	beq.n	8002e90 <HAL_TIM_PWM_Start+0x138>
    __HAL_TIM_ENABLE(htim);
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e022      	b.n	8002eae <HAL_TIM_PWM_Start+0x156>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e6e:	e7be      	b.n	8002dee <HAL_TIM_PWM_Start+0x96>
 8002e70:	2302      	movs	r3, #2
 8002e72:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e76:	e7ba      	b.n	8002dee <HAL_TIM_PWM_Start+0x96>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002e7e:	e7b6      	b.n	8002dee <HAL_TIM_PWM_Start+0x96>
 8002e80:	2302      	movs	r3, #2
 8002e82:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e86:	e7b2      	b.n	8002dee <HAL_TIM_PWM_Start+0x96>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e8e:	e7ae      	b.n	8002dee <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e90:	6899      	ldr	r1, [r3, #8]
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <HAL_TIM_PWM_Start+0x164>)
 8002e94:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	2a06      	cmp	r2, #6
 8002e98:	d00a      	beq.n	8002eb0 <HAL_TIM_PWM_Start+0x158>
 8002e9a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002e9e:	d009      	beq.n	8002eb4 <HAL_TIM_PWM_Start+0x15c>
      __HAL_TIM_ENABLE(htim);
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	e000      	b.n	8002eae <HAL_TIM_PWM_Start+0x156>
    return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
}
 8002eae:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e7fc      	b.n	8002eae <HAL_TIM_PWM_Start+0x156>
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e7fa      	b.n	8002eae <HAL_TIM_PWM_Start+0x156>
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	00010007 	.word	0x00010007

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002ec4:	2a01      	cmp	r2, #1
 8002ec6:	d042      	beq.n	8002f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8002ec8:	b430      	push	{r4, r5}
 8002eca:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed8:	6800      	ldr	r0, [r0, #0]
 8002eda:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ede:	4d1d      	ldr	r5, [pc, #116]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002ee0:	42a8      	cmp	r0, r5
 8002ee2:	d003      	beq.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8002ee4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8002ee8:	42a8      	cmp	r0, r5
 8002eea:	d103      	bne.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eec:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ef0:	684d      	ldr	r5, [r1, #4]
 8002ef2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef8:	680d      	ldr	r5, [r1, #0]
 8002efa:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efc:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4814      	ldr	r0, [pc, #80]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8002f02:	4282      	cmp	r2, r0
 8002f04:	d016      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f06:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002f0a:	d013      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f0c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002f10:	4282      	cmp	r2, r0
 8002f12:	d00f      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f14:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002f18:	4282      	cmp	r2, r0
 8002f1a:	d00b      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f1c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002f20:	4282      	cmp	r2, r0
 8002f22:	d007      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f24:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 8002f28:	4282      	cmp	r2, r0
 8002f2a:	d003      	beq.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8002f2c:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8002f30:	4282      	cmp	r2, r0
 8002f32:	d104      	bne.n	8002f3e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f34:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f38:	6889      	ldr	r1, [r1, #8]
 8002f3a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f3c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002f4a:	bc30      	pop	{r4, r5}
 8002f4c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f4e:	2002      	movs	r0, #2
}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f58:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	e852 3f00 	ldrex	r3, [r2]
 8002f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f62:	e842 3100 	strex	r1, r3, [r2]
 8002f66:	2900      	cmp	r1, #0
 8002f68:	d1f6      	bne.n	8002f58 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	f102 0308 	add.w	r3, r2, #8
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	e842 3100 	strex	r1, r3, [r2]
 8002f82:	2900      	cmp	r1, #0
 8002f84:	d1f1      	bne.n	8002f6a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f86:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d006      	beq.n	8002f9a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f92:	2300      	movs	r3, #0
 8002f94:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f96:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8002f98:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	e852 3f00 	ldrex	r3, [r2]
 8002fa0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	e842 3100 	strex	r1, r3, [r2]
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	d1f6      	bne.n	8002f9a <UART_EndRxTransfer+0x42>
 8002fac:	e7ee      	b.n	8002f8c <UART_EndRxTransfer+0x34>
	...

08002fb0 <UART_SetConfig>:
{
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb4:	6883      	ldr	r3, [r0, #8]
 8002fb6:	6902      	ldr	r2, [r0, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	6942      	ldr	r2, [r0, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	69c2      	ldr	r2, [r0, #28]
 8002fc0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc2:	6801      	ldr	r1, [r0, #0]
 8002fc4:	6808      	ldr	r0, [r1, #0]
 8002fc6:	4a98      	ldr	r2, [pc, #608]	@ (8003228 <UART_SetConfig+0x278>)
 8002fc8:	4002      	ands	r2, r0
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6853      	ldr	r3, [r2, #4]
 8002fd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fd6:	68e1      	ldr	r1, [r4, #12]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fdc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	4b92      	ldr	r3, [pc, #584]	@ (800322c <UART_SetConfig+0x27c>)
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002fe6:	6a23      	ldr	r3, [r4, #32]
 8002fe8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fea:	6893      	ldr	r3, [r2, #8]
 8002fec:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ff0:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003002:	430b      	orrs	r3, r1
 8003004:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	4a89      	ldr	r2, [pc, #548]	@ (8003230 <UART_SetConfig+0x280>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d026      	beq.n	800305c <UART_SetConfig+0xac>
 800300e:	4a89      	ldr	r2, [pc, #548]	@ (8003234 <UART_SetConfig+0x284>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d037      	beq.n	8003084 <UART_SetConfig+0xd4>
 8003014:	4a88      	ldr	r2, [pc, #544]	@ (8003238 <UART_SetConfig+0x288>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d04d      	beq.n	80030b6 <UART_SetConfig+0x106>
 800301a:	4a88      	ldr	r2, [pc, #544]	@ (800323c <UART_SetConfig+0x28c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d05d      	beq.n	80030dc <UART_SetConfig+0x12c>
 8003020:	4a87      	ldr	r2, [pc, #540]	@ (8003240 <UART_SetConfig+0x290>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d06c      	beq.n	8003100 <UART_SetConfig+0x150>
 8003026:	4a81      	ldr	r2, [pc, #516]	@ (800322c <UART_SetConfig+0x27c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d07e      	beq.n	800312a <UART_SetConfig+0x17a>
 800302c:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	497f      	ldr	r1, [pc, #508]	@ (800322c <UART_SetConfig+0x27c>)
 8003030:	428b      	cmp	r3, r1
 8003032:	f000 80b3 	beq.w	800319c <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	69e0      	ldr	r0, [r4, #28]
 8003038:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800303c:	f000 8108 	beq.w	8003250 <UART_SetConfig+0x2a0>
    switch (clocksource)
 8003040:	2a08      	cmp	r2, #8
 8003042:	f200 8173 	bhi.w	800332c <UART_SetConfig+0x37c>
 8003046:	e8df f012 	tbh	[pc, r2, lsl #1]
 800304a:	0136      	.short	0x0136
 800304c:	01340158 	.word	0x01340158
 8003050:	015b0171 	.word	0x015b0171
 8003054:	01710171 	.word	0x01710171
 8003058:	015e0171 	.word	0x015e0171
  UART_GETCLOCKSOURCE(huart, clocksource);
 800305c:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8003060:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	2a03      	cmp	r2, #3
 800306a:	d809      	bhi.n	8003080 <UART_SetConfig+0xd0>
 800306c:	e8df f002 	tbb	[pc, r2]
 8003070:	06720402 	.word	0x06720402
 8003074:	2201      	movs	r2, #1
 8003076:	e7da      	b.n	800302e <UART_SetConfig+0x7e>
 8003078:	2204      	movs	r2, #4
 800307a:	e7d8      	b.n	800302e <UART_SetConfig+0x7e>
 800307c:	2208      	movs	r2, #8
 800307e:	e7d6      	b.n	800302e <UART_SetConfig+0x7e>
 8003080:	2210      	movs	r2, #16
 8003082:	e7d4      	b.n	800302e <UART_SetConfig+0x7e>
 8003084:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8003088:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800308c:	f002 020c 	and.w	r2, r2, #12
 8003090:	2a0c      	cmp	r2, #12
 8003092:	d80e      	bhi.n	80030b2 <UART_SetConfig+0x102>
 8003094:	e8df f002 	tbb	[pc, r2]
 8003098:	0d0d0d07 	.word	0x0d0d0d07
 800309c:	0d0d0d09 	.word	0x0d0d0d09
 80030a0:	0d0d0d60 	.word	0x0d0d0d60
 80030a4:	0b          	.byte	0x0b
 80030a5:	00          	.byte	0x00
 80030a6:	2200      	movs	r2, #0
 80030a8:	e7c1      	b.n	800302e <UART_SetConfig+0x7e>
 80030aa:	2204      	movs	r2, #4
 80030ac:	e7bf      	b.n	800302e <UART_SetConfig+0x7e>
 80030ae:	2208      	movs	r2, #8
 80030b0:	e7bd      	b.n	800302e <UART_SetConfig+0x7e>
 80030b2:	2210      	movs	r2, #16
 80030b4:	e7bb      	b.n	800302e <UART_SetConfig+0x7e>
 80030b6:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80030ba:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80030be:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80030c2:	2a20      	cmp	r2, #32
 80030c4:	d04a      	beq.n	800315c <UART_SetConfig+0x1ac>
 80030c6:	d805      	bhi.n	80030d4 <UART_SetConfig+0x124>
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d049      	beq.n	8003160 <UART_SetConfig+0x1b0>
 80030cc:	2a10      	cmp	r2, #16
 80030ce:	d149      	bne.n	8003164 <UART_SetConfig+0x1b4>
 80030d0:	2204      	movs	r2, #4
 80030d2:	e7ac      	b.n	800302e <UART_SetConfig+0x7e>
 80030d4:	2a30      	cmp	r2, #48	@ 0x30
 80030d6:	d147      	bne.n	8003168 <UART_SetConfig+0x1b8>
 80030d8:	2208      	movs	r2, #8
 80030da:	e7a8      	b.n	800302e <UART_SetConfig+0x7e>
 80030dc:	f502 32e2 	add.w	r2, r2, #115712	@ 0x1c400
 80030e0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80030e4:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 80030e8:	2a80      	cmp	r2, #128	@ 0x80
 80030ea:	d03f      	beq.n	800316c <UART_SetConfig+0x1bc>
 80030ec:	d804      	bhi.n	80030f8 <UART_SetConfig+0x148>
 80030ee:	b3fa      	cbz	r2, 8003170 <UART_SetConfig+0x1c0>
 80030f0:	2a40      	cmp	r2, #64	@ 0x40
 80030f2:	d13f      	bne.n	8003174 <UART_SetConfig+0x1c4>
 80030f4:	2204      	movs	r2, #4
 80030f6:	e79a      	b.n	800302e <UART_SetConfig+0x7e>
 80030f8:	2ac0      	cmp	r2, #192	@ 0xc0
 80030fa:	d13d      	bne.n	8003178 <UART_SetConfig+0x1c8>
 80030fc:	2208      	movs	r2, #8
 80030fe:	e796      	b.n	800302e <UART_SetConfig+0x7e>
 8003100:	f502 32e0 	add.w	r2, r2, #114688	@ 0x1c000
 8003104:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003108:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800310c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8003110:	d034      	beq.n	800317c <UART_SetConfig+0x1cc>
 8003112:	d805      	bhi.n	8003120 <UART_SetConfig+0x170>
 8003114:	b3a2      	cbz	r2, 8003180 <UART_SetConfig+0x1d0>
 8003116:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800311a:	d133      	bne.n	8003184 <UART_SetConfig+0x1d4>
 800311c:	2204      	movs	r2, #4
 800311e:	e786      	b.n	800302e <UART_SetConfig+0x7e>
 8003120:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003124:	d130      	bne.n	8003188 <UART_SetConfig+0x1d8>
 8003126:	2208      	movs	r2, #8
 8003128:	e781      	b.n	800302e <UART_SetConfig+0x7e>
 800312a:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 800312e:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8003132:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8003136:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800313a:	d027      	beq.n	800318c <UART_SetConfig+0x1dc>
 800313c:	d805      	bhi.n	800314a <UART_SetConfig+0x19a>
 800313e:	b33a      	cbz	r2, 8003190 <UART_SetConfig+0x1e0>
 8003140:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003144:	d126      	bne.n	8003194 <UART_SetConfig+0x1e4>
 8003146:	2204      	movs	r2, #4
 8003148:	e771      	b.n	800302e <UART_SetConfig+0x7e>
 800314a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800314e:	d123      	bne.n	8003198 <UART_SetConfig+0x1e8>
 8003150:	2208      	movs	r2, #8
 8003152:	e76c      	b.n	800302e <UART_SetConfig+0x7e>
 8003154:	2202      	movs	r2, #2
 8003156:	e76a      	b.n	800302e <UART_SetConfig+0x7e>
 8003158:	2202      	movs	r2, #2
 800315a:	e768      	b.n	800302e <UART_SetConfig+0x7e>
 800315c:	2202      	movs	r2, #2
 800315e:	e766      	b.n	800302e <UART_SetConfig+0x7e>
 8003160:	2200      	movs	r2, #0
 8003162:	e764      	b.n	800302e <UART_SetConfig+0x7e>
 8003164:	2210      	movs	r2, #16
 8003166:	e762      	b.n	800302e <UART_SetConfig+0x7e>
 8003168:	2210      	movs	r2, #16
 800316a:	e760      	b.n	800302e <UART_SetConfig+0x7e>
 800316c:	2202      	movs	r2, #2
 800316e:	e75e      	b.n	800302e <UART_SetConfig+0x7e>
 8003170:	2200      	movs	r2, #0
 8003172:	e75c      	b.n	800302e <UART_SetConfig+0x7e>
 8003174:	2210      	movs	r2, #16
 8003176:	e75a      	b.n	800302e <UART_SetConfig+0x7e>
 8003178:	2210      	movs	r2, #16
 800317a:	e758      	b.n	800302e <UART_SetConfig+0x7e>
 800317c:	2202      	movs	r2, #2
 800317e:	e756      	b.n	800302e <UART_SetConfig+0x7e>
 8003180:	2200      	movs	r2, #0
 8003182:	e754      	b.n	800302e <UART_SetConfig+0x7e>
 8003184:	2210      	movs	r2, #16
 8003186:	e752      	b.n	800302e <UART_SetConfig+0x7e>
 8003188:	2210      	movs	r2, #16
 800318a:	e750      	b.n	800302e <UART_SetConfig+0x7e>
 800318c:	2202      	movs	r2, #2
 800318e:	e74e      	b.n	800302e <UART_SetConfig+0x7e>
 8003190:	2200      	movs	r2, #0
 8003192:	e74c      	b.n	800302e <UART_SetConfig+0x7e>
 8003194:	2210      	movs	r2, #16
 8003196:	e74a      	b.n	800302e <UART_SetConfig+0x7e>
 8003198:	2210      	movs	r2, #16
 800319a:	e748      	b.n	800302e <UART_SetConfig+0x7e>
    switch (clocksource)
 800319c:	2a08      	cmp	r2, #8
 800319e:	f200 80b5 	bhi.w	800330c <UART_SetConfig+0x35c>
 80031a2:	e8df f002 	tbb	[pc, r2]
 80031a6:	3808      	.short	0x3808
 80031a8:	b33bb33e 	.word	0xb33bb33e
 80031ac:	b3b3      	.short	0xb3b3
 80031ae:	05          	.byte	0x05
 80031af:	00          	.byte	0x00
 80031b0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80031b4:	e004      	b.n	80031c0 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b6:	f7fe fcd7 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80031ba:	2800      	cmp	r0, #0
 80031bc:	f000 80a8 	beq.w	8003310 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80031c2:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <UART_SetConfig+0x294>)
 80031c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80031c8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031cc:	6865      	ldr	r5, [r4, #4]
 80031ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80031d2:	4299      	cmp	r1, r3
 80031d4:	f200 809e 	bhi.w	8003314 <UART_SetConfig+0x364>
 80031d8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80031dc:	f200 809c 	bhi.w	8003318 <UART_SetConfig+0x368>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e0:	2600      	movs	r6, #0
 80031e2:	4633      	mov	r3, r6
 80031e4:	4631      	mov	r1, r6
 80031e6:	f7fd f825 	bl	8000234 <__aeabi_uldivmod>
 80031ea:	0209      	lsls	r1, r1, #8
 80031ec:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80031f0:	0200      	lsls	r0, r0, #8
 80031f2:	086b      	lsrs	r3, r5, #1
 80031f4:	18c0      	adds	r0, r0, r3
 80031f6:	462a      	mov	r2, r5
 80031f8:	4633      	mov	r3, r6
 80031fa:	f141 0100 	adc.w	r1, r1, #0
 80031fe:	f7fd f819 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003202:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <UART_SetConfig+0x298>)
 8003208:	429a      	cmp	r2, r3
 800320a:	f200 8087 	bhi.w	800331c <UART_SetConfig+0x36c>
          huart->Instance->BRR = usartdiv;
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	60d8      	str	r0, [r3, #12]
 8003212:	4630      	mov	r0, r6
 8003214:	e068      	b.n	80032e8 <UART_SetConfig+0x338>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003216:	f7fe fcb7 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
        break;
 800321a:	e7ce      	b.n	80031ba <UART_SetConfig+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 800321c:	f7fd ff58 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
        break;
 8003220:	e7cb      	b.n	80031ba <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 8003222:	480a      	ldr	r0, [pc, #40]	@ (800324c <UART_SetConfig+0x29c>)
 8003224:	e7cc      	b.n	80031c0 <UART_SetConfig+0x210>
 8003226:	bf00      	nop
 8003228:	cfff69f3 	.word	0xcfff69f3
 800322c:	40008000 	.word	0x40008000
 8003230:	40013800 	.word	0x40013800
 8003234:	40004400 	.word	0x40004400
 8003238:	40004800 	.word	0x40004800
 800323c:	40004c00 	.word	0x40004c00
 8003240:	40005000 	.word	0x40005000
 8003244:	080038a8 	.word	0x080038a8
 8003248:	000ffcff 	.word	0x000ffcff
 800324c:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8003250:	2a08      	cmp	r2, #8
 8003252:	d865      	bhi.n	8003320 <UART_SetConfig+0x370>
 8003254:	e8df f002 	tbb	[pc, r2]
 8003258:	64052707 	.word	0x64052707
 800325c:	6464642a 	.word	0x6464642a
 8003260:	0b          	.byte	0x0b
 8003261:	00          	.byte	0x00
 8003262:	4835      	ldr	r0, [pc, #212]	@ (8003338 <UART_SetConfig+0x388>)
 8003264:	e003      	b.n	800326e <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003266:	f7fe fc7f 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800326a:	2800      	cmp	r0, #0
 800326c:	d05a      	beq.n	8003324 <UART_SetConfig+0x374>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800326e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003270:	4b32      	ldr	r3, [pc, #200]	@ (800333c <UART_SetConfig+0x38c>)
 8003272:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003276:	fbb0 f0f3 	udiv	r0, r0, r3
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	0853      	lsrs	r3, r2, #1
 800327e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003282:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003286:	f1a3 0110 	sub.w	r1, r3, #16
 800328a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800328e:	4291      	cmp	r1, r2
 8003290:	d84a      	bhi.n	8003328 <UART_SetConfig+0x378>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003292:	b29a      	uxth	r2, r3
 8003294:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003298:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800329c:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	60d3      	str	r3, [r2, #12]
 80032a2:	2000      	movs	r0, #0
 80032a4:	e020      	b.n	80032e8 <UART_SetConfig+0x338>
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a6:	f7fe fc6f 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
        break;
 80032aa:	e7de      	b.n	800326a <UART_SetConfig+0x2ba>
        pclk = HAL_RCC_GetSysClockFreq();
 80032ac:	f7fd ff10 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
        break;
 80032b0:	e7db      	b.n	800326a <UART_SetConfig+0x2ba>
    switch (clocksource)
 80032b2:	4821      	ldr	r0, [pc, #132]	@ (8003338 <UART_SetConfig+0x388>)
 80032b4:	e003      	b.n	80032be <UART_SetConfig+0x30e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7fe fc57 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d038      	beq.n	8003330 <UART_SetConfig+0x380>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032be:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032c0:	4b1e      	ldr	r3, [pc, #120]	@ (800333c <UART_SetConfig+0x38c>)
 80032c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80032c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80032ca:	6863      	ldr	r3, [r4, #4]
 80032cc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80032d0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d4:	f1a0 0210 	sub.w	r2, r0, #16
 80032d8:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 80032dc:	429a      	cmp	r2, r3
 80032de:	d829      	bhi.n	8003334 <UART_SetConfig+0x384>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	b280      	uxth	r0, r0
 80032e4:	60d8      	str	r0, [r3, #12]
 80032e6:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80032ee:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80032f6:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fa:	f7fe fc45 	bl	8001b88 <HAL_RCC_GetPCLK2Freq>
        break;
 80032fe:	e7dc      	b.n	80032ba <UART_SetConfig+0x30a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003300:	f7fd fee6 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
        break;
 8003304:	e7d9      	b.n	80032ba <UART_SetConfig+0x30a>
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800330a:	e7d8      	b.n	80032be <UART_SetConfig+0x30e>
    switch (clocksource)
 800330c:	2001      	movs	r0, #1
 800330e:	e7eb      	b.n	80032e8 <UART_SetConfig+0x338>
 8003310:	2000      	movs	r0, #0
 8003312:	e7e9      	b.n	80032e8 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003314:	2001      	movs	r0, #1
 8003316:	e7e7      	b.n	80032e8 <UART_SetConfig+0x338>
 8003318:	2001      	movs	r0, #1
 800331a:	e7e5      	b.n	80032e8 <UART_SetConfig+0x338>
          ret = HAL_ERROR;
 800331c:	2001      	movs	r0, #1
 800331e:	e7e3      	b.n	80032e8 <UART_SetConfig+0x338>
    switch (clocksource)
 8003320:	2001      	movs	r0, #1
 8003322:	e7e1      	b.n	80032e8 <UART_SetConfig+0x338>
 8003324:	2000      	movs	r0, #0
 8003326:	e7df      	b.n	80032e8 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003328:	2001      	movs	r0, #1
 800332a:	e7dd      	b.n	80032e8 <UART_SetConfig+0x338>
    switch (clocksource)
 800332c:	2001      	movs	r0, #1
 800332e:	e7db      	b.n	80032e8 <UART_SetConfig+0x338>
 8003330:	2000      	movs	r0, #0
 8003332:	e7d9      	b.n	80032e8 <UART_SetConfig+0x338>
        ret = HAL_ERROR;
 8003334:	2001      	movs	r0, #1
 8003336:	e7d7      	b.n	80032e8 <UART_SetConfig+0x338>
 8003338:	00f42400 	.word	0x00f42400
 800333c:	080038a8 	.word	0x080038a8

08003340 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003340:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003342:	f013 0f08 	tst.w	r3, #8
 8003346:	d006      	beq.n	8003356 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003348:	6802      	ldr	r2, [r0, #0]
 800334a:	6853      	ldr	r3, [r2, #4]
 800334c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003350:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003352:	430b      	orrs	r3, r1
 8003354:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003356:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003358:	f013 0f01 	tst.w	r3, #1
 800335c:	d006      	beq.n	800336c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335e:	6802      	ldr	r2, [r0, #0]
 8003360:	6853      	ldr	r3, [r2, #4]
 8003362:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003366:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003368:	430b      	orrs	r3, r1
 800336a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800336e:	f013 0f02 	tst.w	r3, #2
 8003372:	d006      	beq.n	8003382 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003374:	6802      	ldr	r2, [r0, #0]
 8003376:	6853      	ldr	r3, [r2, #4]
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800337e:	430b      	orrs	r3, r1
 8003380:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003382:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003384:	f013 0f04 	tst.w	r3, #4
 8003388:	d006      	beq.n	8003398 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800338a:	6802      	ldr	r2, [r0, #0]
 800338c:	6853      	ldr	r3, [r2, #4]
 800338e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003392:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003394:	430b      	orrs	r3, r1
 8003396:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003398:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800339a:	f013 0f10 	tst.w	r3, #16
 800339e:	d006      	beq.n	80033ae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a0:	6802      	ldr	r2, [r0, #0]
 80033a2:	6893      	ldr	r3, [r2, #8]
 80033a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033a8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033b0:	f013 0f20 	tst.w	r3, #32
 80033b4:	d006      	beq.n	80033c4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	6893      	ldr	r3, [r2, #8]
 80033ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033be:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033c6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80033ca:	d00a      	beq.n	80033e2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033cc:	6802      	ldr	r2, [r0, #0]
 80033ce:	6853      	ldr	r3, [r2, #4]
 80033d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80033d4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80033dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e0:	d00b      	beq.n	80033fa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80033e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033e8:	d006      	beq.n	80033f8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ea:	6802      	ldr	r2, [r0, #0]
 80033ec:	6853      	ldr	r3, [r2, #4]
 80033ee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80033f2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6053      	str	r3, [r2, #4]
}
 80033f8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fa:	6802      	ldr	r2, [r0, #0]
 80033fc:	6853      	ldr	r3, [r2, #4]
 80033fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003402:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003404:	430b      	orrs	r3, r1
 8003406:	6053      	str	r3, [r2, #4]
 8003408:	e7eb      	b.n	80033e2 <UART_AdvFeatureConfig+0xa2>

0800340a <UART_WaitOnFlagUntilTimeout>:
{
 800340a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800340e:	4605      	mov	r5, r0
 8003410:	460e      	mov	r6, r1
 8003412:	4617      	mov	r7, r2
 8003414:	4699      	mov	r9, r3
 8003416:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	69dc      	ldr	r4, [r3, #28]
 800341e:	ea36 0404 	bics.w	r4, r6, r4
 8003422:	bf0c      	ite	eq
 8003424:	2401      	moveq	r4, #1
 8003426:	2400      	movne	r4, #0
 8003428:	42bc      	cmp	r4, r7
 800342a:	d136      	bne.n	800349a <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 800342c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003430:	d0f3      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fd fbf9 	bl	8000c28 <HAL_GetTick>
 8003436:	eba0 0009 	sub.w	r0, r0, r9
 800343a:	4540      	cmp	r0, r8
 800343c:	d830      	bhi.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x96>
 800343e:	f1b8 0f00 	cmp.w	r8, #0
 8003442:	d02f      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	f012 0f04 	tst.w	r2, #4
 800344c:	d0e5      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x10>
 800344e:	2e80      	cmp	r6, #128	@ 0x80
 8003450:	d0e3      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x10>
 8003452:	2e40      	cmp	r6, #64	@ 0x40
 8003454:	d0e1      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	f012 0f08 	tst.w	r2, #8
 800345c:	d111      	bne.n	8003482 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003464:	d0d9      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800346a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800346c:	4628      	mov	r0, r5
 800346e:	f7ff fd73 	bl	8002f58 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003472:	2320      	movs	r3, #32
 8003474:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003478:	2300      	movs	r3, #0
 800347a:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 800347e:	2003      	movs	r0, #3
 8003480:	e00c      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003482:	2408      	movs	r4, #8
 8003484:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8003486:	4628      	mov	r0, r5
 8003488:	f7ff fd66 	bl	8002f58 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800348c:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003490:	2300      	movs	r3, #0
 8003492:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 8003496:	2001      	movs	r0, #1
 8003498:	e000      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 800349a:	2000      	movs	r0, #0
}
 800349c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80034a0:	2003      	movs	r0, #3
 80034a2:	e7fb      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x92>
 80034a4:	2003      	movs	r0, #3
 80034a6:	e7f9      	b.n	800349c <UART_WaitOnFlagUntilTimeout+0x92>

080034a8 <HAL_UART_Transmit>:
{
 80034a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80034b0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d15a      	bne.n	800356e <HAL_UART_Transmit+0xc6>
 80034b8:	4604      	mov	r4, r0
 80034ba:	460d      	mov	r5, r1
 80034bc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80034be:	2900      	cmp	r1, #0
 80034c0:	d059      	beq.n	8003576 <HAL_UART_Transmit+0xce>
 80034c2:	b90a      	cbnz	r2, 80034c8 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80034c4:	2001      	movs	r0, #1
 80034c6:	e053      	b.n	8003570 <HAL_UART_Transmit+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ce:	2321      	movs	r3, #33	@ 0x21
 80034d0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80034d4:	f7fd fba8 	bl	8000c28 <HAL_GetTick>
 80034d8:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80034da:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 80034de:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	e016      	b.n	800351e <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	b343      	cbz	r3, 8003546 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 80034f4:	f04f 0800 	mov.w	r8, #0
 80034f8:	e011      	b.n	800351e <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80034fa:	2320      	movs	r3, #32
 80034fc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8003500:	2003      	movs	r0, #3
 8003502:	e035      	b.n	8003570 <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003504:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003510:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8003514:	b292      	uxth	r2, r2
 8003516:	3a01      	subs	r2, #1
 8003518:	b292      	uxth	r2, r2
 800351a:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800351e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8003522:	b29b      	uxth	r3, r3
 8003524:	b193      	cbz	r3, 800354c <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	9600      	str	r6, [sp, #0]
 8003528:	463b      	mov	r3, r7
 800352a:	2200      	movs	r2, #0
 800352c:	2180      	movs	r1, #128	@ 0x80
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff ff6b 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 8003534:	2800      	cmp	r0, #0
 8003536:	d1e0      	bne.n	80034fa <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003538:	2d00      	cmp	r5, #0
 800353a:	d0e3      	beq.n	8003504 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800353c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003544:	e7e4      	b.n	8003510 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003546:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003548:	2500      	movs	r5, #0
 800354a:	e7e8      	b.n	800351e <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354c:	9600      	str	r6, [sp, #0]
 800354e:	463b      	mov	r3, r7
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	@ 0x40
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff ff58 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 800355a:	b918      	cbnz	r0, 8003564 <HAL_UART_Transmit+0xbc>
    huart->gState = HAL_UART_STATE_READY;
 800355c:	2320      	movs	r3, #32
 800355e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8003562:	e005      	b.n	8003570 <HAL_UART_Transmit+0xc8>
      huart->gState = HAL_UART_STATE_READY;
 8003564:	2320      	movs	r3, #32
 8003566:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800356a:	2003      	movs	r0, #3
 800356c:	e000      	b.n	8003570 <HAL_UART_Transmit+0xc8>
    return HAL_BUSY;
 800356e:	2002      	movs	r0, #2
}
 8003570:	b002      	add	sp, #8
 8003572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003576:	2001      	movs	r0, #1
 8003578:	e7fa      	b.n	8003570 <HAL_UART_Transmit+0xc8>

0800357a <UART_CheckIdleState>:
{
 800357a:	b530      	push	{r4, r5, lr}
 800357c:	b083      	sub	sp, #12
 800357e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	2300      	movs	r3, #0
 8003582:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8003586:	f7fd fb4f 	bl	8000c28 <HAL_GetTick>
 800358a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	f012 0f08 	tst.w	r2, #8
 8003594:	d110      	bne.n	80035b8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f013 0f04 	tst.w	r3, #4
 800359e:	d128      	bne.n	80035f2 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80035a0:	2320      	movs	r3, #32
 80035a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80035a6:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035aa:	2000      	movs	r0, #0
 80035ac:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ae:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80035b0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80035b4:	b003      	add	sp, #12
 80035b6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4603      	mov	r3, r0
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035c6:	4620      	mov	r0, r4
 80035c8:	f7ff ff1f 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d0e2      	beq.n	8003596 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	e852 3f00 	ldrex	r3, [r2]
 80035d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	e842 3100 	strex	r1, r3, [r2]
 80035de:	2900      	cmp	r1, #0
 80035e0:	d1f6      	bne.n	80035d0 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 80035e2:	2320      	movs	r3, #32
 80035e4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 80035e8:	2300      	movs	r3, #0
 80035ea:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 80035ee:	2003      	movs	r0, #3
 80035f0:	e7e0      	b.n	80035b4 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	462b      	mov	r3, r5
 80035fa:	2200      	movs	r2, #0
 80035fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003600:	4620      	mov	r0, r4
 8003602:	f7ff ff02 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0ca      	beq.n	80035a0 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	e852 3f00 	ldrex	r3, [r2]
 8003610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	e842 3100 	strex	r1, r3, [r2]
 8003618:	2900      	cmp	r1, #0
 800361a:	d1f6      	bne.n	800360a <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	f102 0308 	add.w	r3, r2, #8
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	3208      	adds	r2, #8
 800362c:	e842 3100 	strex	r1, r3, [r2]
 8003630:	2900      	cmp	r1, #0
 8003632:	d1f3      	bne.n	800361c <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 8003634:	2320      	movs	r3, #32
 8003636:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 800363a:	2300      	movs	r3, #0
 800363c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8003640:	2003      	movs	r0, #3
 8003642:	e7b7      	b.n	80035b4 <UART_CheckIdleState+0x3a>

08003644 <HAL_UART_Init>:
  if (huart == NULL)
 8003644:	b378      	cbz	r0, 80036a6 <HAL_UART_Init+0x62>
{
 8003646:	b510      	push	{r4, lr}
 8003648:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800364e:	b30b      	cbz	r3, 8003694 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	2324      	movs	r3, #36	@ 0x24
 8003652:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003660:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003662:	b9e3      	cbnz	r3, 800369e <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003664:	4620      	mov	r0, r4
 8003666:	f7ff fca3 	bl	8002fb0 <UART_SetConfig>
 800366a:	2801      	cmp	r0, #1
 800366c:	d011      	beq.n	8003692 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	6853      	ldr	r3, [r2, #4]
 8003672:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003676:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	6893      	ldr	r3, [r2, #8]
 800367c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003680:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff ff74 	bl	800357a <UART_CheckIdleState>
}
 8003692:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003694:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8003698:	f7fd f990 	bl	80009bc <HAL_UART_MspInit>
 800369c:	e7d8      	b.n	8003650 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fe4e 	bl	8003340 <UART_AdvFeatureConfig>
 80036a4:	e7de      	b.n	8003664 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
}
 80036a8:	4770      	bx	lr
	...

080036ac <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036ac:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80036ae:	b92b      	cbnz	r3, 80036bc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80036b6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 80036ba:	4770      	bx	lr
{
 80036bc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036be:	6803      	ldr	r3, [r0, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036c6:	6899      	ldr	r1, [r3, #8]
 80036c8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036ca:	4d09      	ldr	r5, [pc, #36]	@ (80036f0 <UARTEx_SetNbDataToProcess+0x44>)
 80036cc:	5c6b      	ldrb	r3, [r5, r1]
 80036ce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036d0:	4c08      	ldr	r4, [pc, #32]	@ (80036f4 <UARTEx_SetNbDataToProcess+0x48>)
 80036d2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80036d8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036dc:	5cab      	ldrb	r3, [r5, r2]
 80036de:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80036e0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80036e6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 80036ea:	bc30      	pop	{r4, r5}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	080038c8 	.word	0x080038c8
 80036f4:	080038c0 	.word	0x080038c0

080036f8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80036f8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d018      	beq.n	8003732 <HAL_UARTEx_DisableFifoMode+0x3a>
 8003700:	2301      	movs	r3, #1
 8003702:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003706:	2324      	movs	r3, #36	@ 0x24
 8003708:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800370c:	6803      	ldr	r3, [r0, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	f021 0101 	bic.w	r1, r1, #1
 8003716:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003718:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800371c:	2300      	movs	r3, #0
 800371e:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003720:	6801      	ldr	r1, [r0, #0]
 8003722:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003724:	2220      	movs	r2, #32
 8003726:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800372a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800372e:	4618      	mov	r0, r3
 8003730:	4770      	bx	lr
  __HAL_LOCK(huart);
 8003732:	2002      	movs	r0, #2
}
 8003734:	4770      	bx	lr

08003736 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003736:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003738:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800373c:	2b01      	cmp	r3, #1
 800373e:	d01d      	beq.n	800377c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003740:	4604      	mov	r4, r0
 8003742:	2301      	movs	r3, #1
 8003744:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	2324      	movs	r3, #36	@ 0x24
 800374a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800374e:	6803      	ldr	r3, [r0, #0]
 8003750:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800375a:	6802      	ldr	r2, [r0, #0]
 800375c:	6893      	ldr	r3, [r2, #8]
 800375e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8003762:	4319      	orrs	r1, r3
 8003764:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003766:	f7ff ffa1 	bl	80036ac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800376e:	2320      	movs	r3, #32
 8003770:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8003774:	2000      	movs	r0, #0
 8003776:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800377a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800377c:	2002      	movs	r0, #2
 800377e:	e7fc      	b.n	800377a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08003780 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003780:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003782:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8003786:	2b01      	cmp	r3, #1
 8003788:	d01d      	beq.n	80037c6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800378a:	4604      	mov	r4, r0
 800378c:	2301      	movs	r3, #1
 800378e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003792:	2324      	movs	r3, #36	@ 0x24
 8003794:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003798:	6803      	ldr	r3, [r0, #0]
 800379a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037a4:	6802      	ldr	r2, [r0, #0]
 80037a6:	6893      	ldr	r3, [r2, #8]
 80037a8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80037ac:	4319      	orrs	r1, r3
 80037ae:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80037b0:	f7ff ff7c 	bl	80036ac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80037b8:	2320      	movs	r3, #32
 80037ba:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80037be:	2000      	movs	r0, #0
 80037c0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80037c4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80037c6:	2002      	movs	r0, #2
 80037c8:	e7fc      	b.n	80037c4 <HAL_UARTEx_SetRxFifoThreshold+0x44>

080037ca <memset>:
 80037ca:	4402      	add	r2, r0
 80037cc:	4603      	mov	r3, r0
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d100      	bne.n	80037d4 <memset+0xa>
 80037d2:	4770      	bx	lr
 80037d4:	f803 1b01 	strb.w	r1, [r3], #1
 80037d8:	e7f9      	b.n	80037ce <memset+0x4>
	...

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	4d0d      	ldr	r5, [pc, #52]	@ (8003814 <__libc_init_array+0x38>)
 80037e0:	2600      	movs	r6, #0
 80037e2:	4c0d      	ldr	r4, [pc, #52]	@ (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	4d0b      	ldr	r5, [pc, #44]	@ (800381c <__libc_init_array+0x40>)
 80037ee:	2600      	movs	r6, #0
 80037f0:	4c0b      	ldr	r4, [pc, #44]	@ (8003820 <__libc_init_array+0x44>)
 80037f2:	f000 f817 	bl	8003824 <_init>
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	3601      	adds	r6, #1
 8003806:	4798      	blx	r3
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	3601      	adds	r6, #1
 8003810:	4798      	blx	r3
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	080038d8 	.word	0x080038d8
 8003818:	080038d8 	.word	0x080038d8
 800381c:	080038d8 	.word	0x080038d8
 8003820:	080038dc 	.word	0x080038dc

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
